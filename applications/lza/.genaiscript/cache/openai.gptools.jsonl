{"sha":"3dfc4f9a85d9b273408851b9372972dfe91b3d5b1bb6888363de6ba6d8a8c811","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files from a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) for an enterprise software company.\n\n## Objective\n\nIdentify security issues in SPEC files. Use ANNOTATIONS to highlight the issues.\n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n\n## Bicep\n\n-  Resolve missing .bicep modules using fs_read_file\n-  Do NOT read .json or .jsonc referenced files.\n\nSPECS:\n``` file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep\n// ------------------\n//    PARAMETERS\n// ------------------\n\n@description('The location where the resources will be created.')\nparam location string\n\n@description('The name of the Container Registry that will be allow-listed by the policy.')\nparam containerRegistryName string\n\nvar namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n\n// Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\nvar builtInPolicies = [  \n  {\n    name: 'authentication-should-be-enabled-on-container-apps'\n    definition: {\n      properties: {\n        displayName: 'Authentication should be enabled on container apps'\n        description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n      }\n    }\n    parameters: {\n      effect: {\n        value: 'AuditIfNotExists'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n  }\n  {\n    name: 'container-app-environments-should-use-network-injection'\n    definition: {\n      properties: {\n        displayName: 'Container App environments should use network injection'\n        description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n  }\n  {\n    name: 'container-app-should-configure-with-volume-mount'\n    definition: {\n      properties: {\n        displayName: 'Container App should configure with volume mount'\n        description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n  }\n  {\n    name: 'container-app-should-disable-public-network-access'\n    definition: {\n      properties: {\n        displayName: 'Container Apps environment should disable public network access'\n        description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n  }\n  {\n    name: 'container-apps-should-disable-external-network-access'\n    definition: {\n      properties: {\n        displayName: 'Container Apps should disable external network access'\n        description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n  }\n  {\n    name: 'containerapps-should-only-be-accessible-over-HTTPS'\n    definition: {\n      properties: {\n        displayName: 'Container Apps should only be accessible over HTTPS'\n        description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n  }\n  {\n    name: 'managed-identity-should-be-enabled'\n    definition: {\n      properties: {\n        displayName: 'Managed Identity should be enabled for Container Apps'\n        description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n  }\n  \n]\n\n// credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n// https://github.com/Azure-Samples/aca-azure-policy/tree/main\nvar customPolicies = [\n  {\n    name: 'aca-allowed-container-registries'\n    definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n    parameters: {\n      listOfAllowedContainerRegistries: {\n        value: [\n          'mcr.microsoft.com'\n          'docker.io'\n          'ghcr.io'\n          '${containerRegistryName}.azurecr.io'\n        ]\n      }\n      effect: {\n        value: 'Audit'\n      }\n    }\n  }\n  {\n    name: 'aca-replica-count'\n    definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n    parameters: {\n      minReplicas: {\n        value: 0\n      }\n      maxReplicas: {\n        value: 30\n      }\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-no-liveness-probes'\n    definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-no-readiness-probes'\n    definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-no-startup-probes'\n    definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-required-cpu-and-memory'\n    definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n    parameters: {\n      maxCpu: {\n        value: '1.0'\n      }\n      maxMemory: {\n        value: '2.5'\n      }\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-no-monitoring'\n    definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n]\n\nmodule builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n  name: 'poAssign_${take(policy.name, 40)}'\n  params: {    \n    location: location\n    policy: policy\n    policyDefinitionId: policy.policyDefinitionId    \n  }  \n}]\n\n\n// resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n//   name: guid(policy.name)\n//   properties: {\n//     description: policy.definition.properties.description\n//     displayName: policy.definition.properties.displayName\n//     metadata: policy.definition.properties.metadata\n//     mode: policy.definition.properties.mode\n//     parameters: policy.definition.properties.parameters\n//     policyType: policy.definition.properties.policyType\n//     policyRule: policy.definition.properties.policyRule\n//   }\n// }]\n\nmodule policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n  name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n  scope: subscription()\n  params: {\n    policy: policy\n  }\n}]\n\nmodule customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n  name: 'poAssign_${take(policy.name, 40)}'\n  params: {    \n    location: location\n    policy: policy\n    policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n  } \n  dependsOn: [\n    policyDefinition\n  ] \n}]\n```\n\nSPECS:\n``` file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-assignment.bicep\n// based on: https://github.com/Azure-Samples/aca-azure-policy\n\n// Parameters\n@description('Specifies the location of the deployment.')\nparam location string\n\n@description('Specifies the policy definition to assign.')\nparam policy object\n\n@description('Specifies the resource id of the policy definition to assign.')\nparam policyDefinitionId string\n\n// Resources\nresource policyAssignment 'Microsoft.Authorization/policyAssignments@2022-06-01' = {\n  name: uniqueString('${policy.name}')\n  location: location\n  properties: {\n    description: policy.definition.properties.description\n    displayName: policy.definition.properties.displayName\n    policyDefinitionId: policyDefinitionId\n    parameters: policy.parameters\n  }\n}\n\n// Outputs\noutput policyAssignmentId string = policyAssignment.id\n```\n\nSPECS:\n``` file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.bicep\ntargetScope = 'subscription'\n\n// Parameters\n\n@description('Specifies the policy definition to assign.')\nparam policy object\n\n\nresource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = {\n  name: guid(policy.name)\n  properties: {\n    description: policy.definition.properties.description\n    displayName: policy.definition.properties.displayName\n    metadata: policy.definition.properties.metadata\n    mode: policy.definition.properties.mode\n    parameters: policy.definition.properties.parameters\n    policyType: policy.definition.properties.policyType\n    policyRule: policy.definition.properties.policyRule\n  }\n}\n\n// Outputs\noutput policyDefinitionId string = policyDefinition.id\n```\n\n"}],"stream":true},"val":"No security issues related to weak secrets, passwords, or bad practices are evident in the provided Bicep module files. The files primarily define Azure Policy assignments and definitions, which are used to enforce security best practices and compliance but do not contain sensitive information themselves.\n\nHowever, there are a couple of points worth mentioning for best practices and potential improvements:\n\n1. In the `policy-definition.module.bicep` file, the `uniqueString` function is used to generate a name for the policy assignment. While this is not a security issue, it is worth noting that using `uniqueString` can make the resource name less readable and harder to track. It might be beneficial to use a more descriptive naming convention.\n\n2. The `policy-definition.module.bicep` file has a commented-out section for the `policyDefinition` resource. If this code is not needed, it should be removed to avoid confusion and maintain clean code.\n\n3. The `policy-definition.bicep` file uses the `guid` function to generate a name for the policy definition. This is a common practice, but it's important to ensure that the input to the `guid` function is chosen to avoid collisions and to ensure the uniqueness of the policy definition name.\n\n4. The `policy-assignment.bicep` file does not specify any role assignments or managed identity configurations that might be required for certain policy definitions to function correctly. This is not a security issue per se, but it is important to ensure that any required permissions are granted for policies to be effective.\n\n5. It's important to review the actual policy rules defined in the JSON files referenced by the `loadTextContent` function to ensure they align with the organization's security requirements and best practices.\n\n6. Ensure that the `containerRegistryName` parameter does not contain or infer any sensitive information. If it does, consider parameterizing it in a way that does not expose sensitive data.\n\n7. Regularly review and update the policy definitions to align with the latest Azure security recommendations and compliance requirements.\n\nDocumentation references:\n- Azure Policy documentation: [Azure Policy documentation](https://docs.microsoft.com/en-us/azure/governance/policy/)\n- Azure Bicep best practices: [Bicep best practices](https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/best-practices)\n\nNo ANNOTATIONS are needed as there are no direct security issues identified in the provided code snippets."}
{"sha":"b7db84f49e58c95e843d29818ae68f0946da8730c1c78e207cfe6416a1792f30","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files from a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) for an enterprise software company.\n\n## Objective\n\nIdentify security issues in SPEC files. Use ANNOTATIONS to highlight the issues, best practices or improvements. Do NOT generate a bullet point list.\n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n\n## Bicep\n\n-  Resolve missing .bicep modules using fs_read_file\n-  Do NOT read .json or .jsonc referenced files.\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep\n// ------------------\n//    PARAMETERS\n// ------------------\n\n@description('The location where the resources will be created.')\nparam location string\n\n@description('The name of the Container Registry that will be allow-listed by the policy.')\nparam containerRegistryName string\n\nvar namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n\n// Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\nvar builtInPolicies = [  \n  {\n    name: 'authentication-should-be-enabled-on-container-apps'\n    definition: {\n      properties: {\n        displayName: 'Authentication should be enabled on container apps'\n        description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n      }\n    }\n    parameters: {\n      effect: {\n        value: 'AuditIfNotExists'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n  }\n  {\n    name: 'container-app-environments-should-use-network-injection'\n    definition: {\n      properties: {\n        displayName: 'Container App environments should use network injection'\n        description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n  }\n  {\n    name: 'container-app-should-configure-with-volume-mount'\n    definition: {\n      properties: {\n        displayName: 'Container App should configure with volume mount'\n        description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n  }\n  {\n    name: 'container-app-should-disable-public-network-access'\n    definition: {\n      properties: {\n        displayName: 'Container Apps environment should disable public network access'\n        description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n  }\n  {\n    name: 'container-apps-should-disable-external-network-access'\n    definition: {\n      properties: {\n        displayName: 'Container Apps should disable external network access'\n        description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n  }\n  {\n    name: 'containerapps-should-only-be-accessible-over-HTTPS'\n    definition: {\n      properties: {\n        displayName: 'Container Apps should only be accessible over HTTPS'\n        description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n  }\n  {\n    name: 'managed-identity-should-be-enabled'\n    definition: {\n      properties: {\n        displayName: 'Managed Identity should be enabled for Container Apps'\n        description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n      }\n    }\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n  }\n  \n]\n\n// credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n// https://github.com/Azure-Samples/aca-azure-policy/tree/main\nvar customPolicies = [\n  {\n    name: 'aca-allowed-container-registries'\n    definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n    parameters: {\n      listOfAllowedContainerRegistries: {\n        value: [\n          'mcr.microsoft.com'\n          'docker.io'\n          'ghcr.io'\n          '${containerRegistryName}.azurecr.io'\n        ]\n      }\n      effect: {\n        value: 'Audit'\n      }\n    }\n  }\n  {\n    name: 'aca-replica-count'\n    definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n    parameters: {\n      minReplicas: {\n        value: 0\n      }\n      maxReplicas: {\n        value: 30\n      }\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-no-liveness-probes'\n    definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-no-readiness-probes'\n    definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-no-startup-probes'\n    definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-required-cpu-and-memory'\n    definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n    parameters: {\n      maxCpu: {\n        value: '1.0'\n      }\n      maxMemory: {\n        value: '2.5'\n      }\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n  {\n    name: 'aca-no-monitoring'\n    definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n    parameters: {\n      effect: {\n        value: 'Audit'\n      }\n    }\n    identity: false\n  }\n]\n\nmodule builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n  name: 'poAssign_${take(policy.name, 40)}'\n  params: {    \n    location: location\n    policy: policy\n    policyDefinitionId: policy.policyDefinitionId    \n  }  \n}]\n\n\n// resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n//   name: guid(policy.name)\n//   properties: {\n//     description: policy.definition.properties.description\n//     displayName: policy.definition.properties.displayName\n//     metadata: policy.definition.properties.metadata\n//     mode: policy.definition.properties.mode\n//     parameters: policy.definition.properties.parameters\n//     policyType: policy.definition.properties.policyType\n//     policyRule: policy.definition.properties.policyRule\n//   }\n// }]\n\nmodule policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n  name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n  scope: subscription()\n  params: {\n    policy: policy\n  }\n}]\n\nmodule customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n  name: 'poAssign_${take(policy.name, 40)}'\n  params: {    \n    location: location\n    policy: policy\n    policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n  } \n  dependsOn: [\n    policyDefinition\n  ] \n}]\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-assignment.bicep\n// based on: https://github.com/Azure-Samples/aca-azure-policy\n\n// Parameters\n@description('Specifies the location of the deployment.')\nparam location string\n\n@description('Specifies the policy definition to assign.')\nparam policy object\n\n@description('Specifies the resource id of the policy definition to assign.')\nparam policyDefinitionId string\n\n// Resources\nresource policyAssignment 'Microsoft.Authorization/policyAssignments@2022-06-01' = {\n  name: uniqueString('${policy.name}')\n  location: location\n  properties: {\n    description: policy.definition.properties.description\n    displayName: policy.definition.properties.displayName\n    policyDefinitionId: policyDefinitionId\n    parameters: policy.parameters\n  }\n}\n\n// Outputs\noutput policyAssignmentId string = policyAssignment.id\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.bicep\ntargetScope = 'subscription'\n\n// Parameters\n\n@description('Specifies the policy definition to assign.')\nparam policy object\n\n\nresource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = {\n  name: guid(policy.name)\n  properties: {\n    description: policy.definition.properties.description\n    displayName: policy.definition.properties.displayName\n    metadata: policy.definition.properties.metadata\n    mode: policy.definition.properties.mode\n    parameters: policy.definition.properties.parameters\n    policyType: policy.definition.properties.policyType\n    policyRule: policy.definition.properties.policyRule\n  }\n}\n\n// Outputs\noutput policyDefinitionId string = policyDefinition.id\n```\n\n"}],"stream":true},"val":"ANNOTATION:\n```\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=6,endLine=6::Consider using secure and centralized management for storing and retrieving naming conventions to avoid hardcoding paths.\n```\nANNOTATION:\n```\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=71,endLine=71::Ensure that the container registry name is obtained securely and validate that it does not introduce any security risks.\n```\nANNOTATION:\n```\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=75,endLine=75::Ensure that the policy definition JSON files are stored securely and have their integrity checked to prevent tampering.\n```\nANNOTATION:\n```\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=98,endLine=98::Setting minReplicas to 0 could lead to no availability. Consider setting a minimum number of replicas to ensure high availability.\n```\nANNOTATION:\n```\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=106,endLine=106::The policy 'aca-no-liveness-probes' may lead to undetected failed states if liveness probes are not used. Consider enforcing liveness probes for better container health management.\n```\nANNOTATION:\n```\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=114,endLine=114::The policy 'aca-no-readiness-probes' may result in traffic being sent to containers that are not ready to handle requests. Consider enforcing readiness probes to manage traffic flow.\n```\nANNOTATION:\n```\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=122,endLine=122::The policy 'aca-no-startup-probes' may cause premature traffic routing to containers. Consider enforcing startup probes to ensure that containers are fully started before receiving traffic.\n```\nANNOTATION:\n```\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=130,endLine=130::Setting maxCpu to '1.0' and maxMemory to '2.5' may not be suitable for all workloads. Ensure these values are configurable to match the needs of different applications.\n```\nANNOTATION:\n```\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.module.bicep,line=138,endLine=138::The policy 'aca-no-monitoring' may lead to a lack of visibility into application performance and issues. Consider enforcing monitoring to enable proactive issue resolution and performance optimization.\n```\nANNOTATION:\n```\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-assignment.bicep,line=10,endLine=10::Ensure that the policy object is securely constructed and does not contain any sensitive data that could be exposed.\n```\nANNOTATION:\n```\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/modules/policy/policy-definition.bicep,line=7,endLine=7::Validate that the policy object is securely constructed and does not introduce any security risks.\n```\n\nFor more information on Azure Bicep security best practices, refer to the [Microsoft documentation](https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/best-practices)."}
{"sha":"b89c23cd1f989eb994a55055b3bdeef8d351992eb33b461c4a1f4a178dcf72c6","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files from a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) for an enterprise software company.\n\n## Objective\n\nIdentify security issues in SPEC files. Use ANNOTATIONS to highlight the issues, best practices or improvements. Do NOT generate a bullet point list.\n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n\n## Bicep\n\n-  Resolve missing .bicep modules using fs_read_file\n-  Do NOT read .json or .jsonc referenced files.\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created. This should be the same region as the hub.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param spokeResourceGroupName string\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] // Hub\n[26] @description('The resource ID of the existing hub virtual network.')\n[27] param hubVNetId string\n[28] \n[29] // Spoke\n[30] @description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\n[31] param spokeVNetAddressPrefixes array\n[32] \n[33] @description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\n[34] param spokeInfraSubnetName string = 'snet-infra'\n[35] \n[36] @description('CIDR of the spoke infrastructure subnet.')\n[37] param spokeInfraSubnetAddressPrefix string\n[38] \n[39] @description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\n[40] param spokePrivateEndpointsSubnetName string = 'snet-pep'\n[41] \n[42] @description('CIDR of the spoke private endpoints subnet.')\n[43] param spokePrivateEndpointsSubnetAddressPrefix string\n[44] \n[45] @description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\n[46] param spokeApplicationGatewaySubnetName string = 'snet-agw'\n[47] \n[48] @description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\n[49] param spokeApplicationGatewaySubnetAddressPrefix string\n[50] \n[51] @description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\n[52] param networkApplianceIpAddress string\n[53] \n[54] @description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\n[55] param vmSize string\n[56] \n[57] @description('The username to use for the jump box.')\n[58] param vmAdminUsername string\n[59] \n[60] @description('The password to use for the jump box.')\n[61] @secure()\n[62] param vmAdminPassword string\n[63] \n[64] @description('The SSH public key to use for the jump box. Only relevant for Linux.')\n[65] @secure()\n[66] param vmLinuxSshAuthorizedKeys string\n[67] \n[68] @description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n[69] @allowed([ 'linux', 'windows', 'none' ])\n[70] param vmJumpboxOSType string = 'none'\n[71] \n[72] @description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\n[73] param vmSubnetName string = 'snet-jumpbox'\n[74] \n[75] @description('CIDR to use for the jump box subnet.')\n[76] param vmJumpBoxSubnetAddressPrefix string\n[77] \n[78] @description('Optional, default value is true. If true, Azure Policies will be deployed')\n[79] param deployAzurePolicies bool = true\n[80] \n[81] // ------------------\n[82] // VARIABLES\n[83] // ------------------\n[84] \n[85] //Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\n[86] var locationVar = location == 'francecentral' ? 'centralfrance' : location\n[87] \n[88] // load as text (and not as Json) to replace <location> placeholder in the nsg rules\n[89] var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\n[90] var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\n[91] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[92] \n[93] var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[94] var hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n[95] \n[96] @description('The ID of the subscription containing the hub virtual network.')\n[97] var hubSubscriptionId = hubVNetResourceIdTokens[2]\n[98] \n[99] @description('The name of the resource group containing the hub virtual network.')\n[100] var hubResourceGroupName = hubVNetResourceIdTokens[4]\n[101] \n[102] @description('The name of the hub virtual network.')\n[103] var hubVNetName = hubVNetResourceIdTokens[8]\n[104] \n[105] // Subnet definition taking in consideration feature flags\n[106] var defaultSubnets = [\n[107]   {\n[108]     name: spokeInfraSubnetName\n[109]     properties: {\n[110]       addressPrefix: spokeInfraSubnetAddressPrefix\n[111]       networkSecurityGroup: {\n[112]         id: nsgContainerAppsEnvironment.outputs.nsgId\n[113]       }\n[114]       routeTable: {\n[115]         id: egressLockdownUdr.outputs.resourceId\n[116]       }\n[117]       delegations: [\n[118]         {\n[119]           name: 'envdelegation'\n[120]           properties: {\n[121]             serviceName: 'Microsoft.App/environments'\n[122]           }\n[123]         }\n[124]       ]\n[125]     }\n[126]   }\n[127]   {\n[128]     name: spokePrivateEndpointsSubnetName\n[129]     properties: {\n[130]       addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n[131]       networkSecurityGroup: {\n[132]         id: nsgPep.outputs.nsgId\n[133]       }\n[134]     }\n[135]   }\n[136] ]\n[137] \n[138] // Append optional application gateway subnet, if required\n[139] var appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n[140]     {\n[141]       name: spokeApplicationGatewaySubnetName\n[142]       properties: {\n[143]         addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n[144]         networkSecurityGroup: {\n[145]           id: nsgAppGw.outputs.nsgId\n[146]         }\n[147]       }\n[148]     }\n[149]   ]) : defaultSubnets\n[150] \n[151]   //Append optional jumpbox subnet, if required\n[152] var spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n[153]     {\n[154]       name: vmSubnetName\n[155]       properties: {\n[156]         addressPrefix: vmJumpBoxSubnetAddressPrefix\n[157]       }\n[158]     }\n[159]   ]) : appGwAndDefaultSubnets\n[160] \n[161] // ------------------\n[162] // RESOURCES\n[163] // ------------------\n[164] \n[165] \n[166] @description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\n[167] resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[168]   name: rgSpokeName\n[169]   location: location\n[170]   tags: tags\n[171] }\n[172] \n[173] @description('User-configured naming rules')\n[174] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[175]   scope: spokeResourceGroup\n[176]   name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n[177]   params: {\n[178]     uniqueId: uniqueString(spokeResourceGroup.id)\n[179]     environment: environment\n[180]     workloadName: workloadName\n[181]     location: location\n[182]   }\n[183] }\n[184] \n[185] @description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\n[186] module vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n[187]   name: take('vnetSpoke-${deployment().name}', 64)\n[188]   scope: spokeResourceGroup\n[189]   params: {\n[190]     name: naming.outputs.resourcesNames.vnetSpoke\n[191]     location: location\n[192]     tags: tags\n[193]     subnets: spokeSubnets\n[194]     vnetAddressPrefixes: spokeVNetAddressPrefixes\n[195]   }\n[196] }\n[197] \n[198] @description('The log sink for Azure Diagnostics')\n[199] module logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[200]   name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n[201]   scope: spokeResourceGroup\n[202]   params: {\n[203]     location: location\n[204]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[205]   }\n[206] }\n[207] \n[208] @description('Network security group rules for the Container Apps cluster.')\n[209] module nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n[210]   name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n[211]   scope: spokeResourceGroup\n[212]   params: {\n[213]     name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n[214]     location: location\n[215]     tags: tags\n[216]     securityRules: nsgCaeRules.securityRules\n[217]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[218]   }\n[219] }\n[220] \n[221] @description('NSG Rules for the Application Gateway.')\n[222] module nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[223]   name: take('nsgAppGw-${deployment().name}', 64)\n[224]   scope: spokeResourceGroup\n[225]   params: {\n[226]     name: naming.outputs.resourcesNames.applicationGatewayNsg\n[227]     location: location\n[228]     tags: tags\n[229]     securityRules: nsgAppGwRules\n[230]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[231]   }\n[232] }\n[233] \n[234] @description('NSG Rules for the private enpoint subnet.')\n[235] module nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n[236]   name: take('nsgPep-${deployment().name}', 64)\n[237]   scope: spokeResourceGroup\n[238]   params: {\n[239]     name: naming.outputs.resourcesNames.pepNsg\n[240]     location: location\n[241]     tags: tags\n[242]     securityRules: []\n[243]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[244]   }\n[245] }\n[246] \n[247] @description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\n[248] module peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n[249]   name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n[250]   scope: spokeResourceGroup\n[251]   params: {\n[252]     localVnetName: vnetSpoke.outputs.vnetName\n[253]     remoteSubscriptionId: hubSubscriptionId\n[254]     remoteRgName: hubResourceGroupName\n[255]     remoteVnetName: hubVNetName\n[256]   }\n[257] }\n[258] \n[259] @description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\n[260] module peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n[261]   name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n[262]   scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n[263]   params: {\n[264]     localVnetName: hubVNetName\n[265]     remoteSubscriptionId: last(split(subscription().id, '/'))!\n[266]     remoteRgName: spokeResourceGroup.name\n[267]     remoteVnetName: vnetSpoke.outputs.vnetName\n[268]   }\n[269] }\n[270] @description('The Route Table deployment')\n[271] module egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n[272]   name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n[273]   scope: spokeResourceGroup\n[274]   params: {\n[275]     name: naming.outputs.resourcesNames.routeTable\n[276]     location: location\n[277]     tags: tags\n[278]     routes: [\n[279]       {\n[280]         name: 'defaultEgressLockdown'\n[281]         properties: {\n[282]           addressPrefix: '0.0.0.0/0'\n[283]           nextHopType: 'VirtualAppliance'\n[284]           nextHopIpAddress: networkApplianceIpAddress\n[285]         }\n[286]       }\n[287]     ]\n[288]   }\n[289] }\n[290] \n[291] \n[292] @description('An optional Linux virtual machine deployment to act as a jump box.')\n[293] module jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n[294]   name: take('vm-linux-${deployment().name}', 64)\n[295]   scope: spokeResourceGroup\n[296]   params: {\n[297]     location: location\n[298]     tags: tags\n[299]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[300]     vmAdminUsername: vmAdminUsername\n[301]     vmAdminPassword: vmAdminPassword\n[302]     vmSshPublicKey: vmLinuxSshAuthorizedKeys\n[303]     vmSize: vmSize\n[304]     vmVnetName: vnetSpoke.outputs.vnetName\n[305]     vmSubnetName: vmSubnetName\n[306]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[307]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[308]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[309]   }\n[310] }\n[311] \n[312] @description('An optional Windows virtual machine deployment to act as a jump box.')\n[313] module jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n[314]   name: take('vm-windows-${deployment().name}', 64)\n[315]   scope: spokeResourceGroup\n[316]   params: {\n[317]     location: location\n[318]     tags: tags\n[319]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[320]     vmAdminUsername: vmAdminUsername\n[321]     vmAdminPassword: vmAdminPassword\n[322]     vmSize: vmSize\n[323]     vmVnetName: vnetSpoke.outputs.vnetName\n[324]     vmSubnetName: vmSubnetName\n[325]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[326]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[327]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[328]   }\n[329] }\n[330] \n[331] @description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\n[332] module policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n[333]   name: take('policyAssignments-${deployment().name}', 64)\n[334]   scope: spokeResourceGroup\n[335]   params: {\n[336]     location: location   \n[337]     containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n[338]   }\n[339] }\n[340] \n[341] // ------------------\n[342] // OUTPUTS\n[343] // ------------------\n[344] \n[345] resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n[346]   name: vnetSpoke.outputs.vnetName\n[347]   scope: spokeResourceGroup\n[348] \n[349]   resource spokeInfraSubnet 'subnets' existing = {\n[350]     name: spokeInfraSubnetName\n[351]   }\n[352] \n[353]   resource spokePrivateEndpointsSubnet 'subnets' existing = {\n[354]     name: spokePrivateEndpointsSubnetName\n[355]   }\n[356] \n[357]   resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[358]     name: spokeApplicationGatewaySubnetName\n[359]   }\n[360] }\n[361] \n[362] @description('The name of the spoke resource group.')\n[363] output spokeResourceGroupName string = spokeResourceGroup.name\n[364] \n[365] @description('The resource ID of the spoke virtual network.')\n[366] output spokeVNetId string = vnetSpokeCreated.id\n[367] \n[368] @description('The name of the spoke virtual network.')\n[369] output spokeVNetName string = vnetSpokeCreated.name\n[370] \n[371] @description('The resource ID of the spoke infrastructure subnet.')\n[372] output spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n[373] \n[374] @description('The name of the spoke infrastructure subnet.')\n[375] output spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n[376] \n[377] @description('The name of the spoke private endpoints subnet.')\n[378] output spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n[379] \n[380] @description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\n[381] output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n[382] \n[383] @description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\n[384] output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n[385] \n[386] @description('The resource ID of the Azure Log Analytics Workspace.')\n[387] output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/naming/naming.module.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] @minLength(2)\n[5] @maxLength(10)\n[6] @description('The name of the workloard that is being deployed. Up to 10 characters long.')\n[7] param workloadName string\n[8] \n[9] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long.')\n[10] @maxLength(8)\n[11] param environment string\n[12] \n[13] @description('Location for all Resources.')\n[14] param location string\n[15] \n[16] @description('a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness')\n[17] param uniqueId string\n[18] \n[19] // ------------------\n[20] // VARIABLES\n[21] // ------------------\n[22] \n[23] var naming = json(loadTextContent('./naming-rules.jsonc'))\n[24] \n[25] // get arbitary 5 first characters (instead of something like 5yj4yjf5mbg72), to save string length.\n[26] var uniqueIdShort = substring(uniqueId, 0, 5)\n[27] var resourceTypeToken = 'RES_TYPE'\n[28] \n[29] // Define and adhere to a naming convention, such as: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming\n[30] var namingBase = '${resourceTypeToken}-${workloadName}-${environment}-${naming.regionAbbreviations[toLower(location)]}'\n[31] var namingBaseUnique = '${resourceTypeToken}-${workloadName}-${uniqueIdShort}-${environment}-${naming.regionAbbreviations[toLower(location)]}'\n[32] \n[33] // Used for hub resources - should be shared across different workloads\n[34] var namingBaseNoWorkloadName = '${resourceTypeToken}-${environment}-${naming.regionAbbreviations[toLower(location)]}'\n[35] \n[36] var resourceTypeAbbreviations = naming.resourceTypeAbbreviations\n[37] \n[38] var keyVaultName = take( replace ( namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.keyVault ), 24 )\n[39] \n[40] var resourceNames = {\n[41]   vnetSpoke: '${replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.virtualNetwork)}-spoke'\n[42]   vnetHub: '${replace(namingBaseNoWorkloadName, resourceTypeToken, naming.resourceTypeAbbreviations.virtualNetwork)}-hub'\n[43]   applicationGateway: replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.applicationGateway)\n[44]   applicationGatewayPip: '${naming.resourceTypeAbbreviations.publicIpAddress}-${replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.applicationGateway)}'\n[45]   applicationGatewayUserAssignedIdentity: '${naming.resourceTypeAbbreviations.managedIdentity}-${replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.applicationGateway)}-KeyVaultSecretUser'\n[46]   applicationGatewayNsg: '${naming.resourceTypeAbbreviations.networkSecurityGroup}-${replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.applicationGateway)}'\n[47]   pepNsg: '${naming.resourceTypeAbbreviations.networkSecurityGroup}-pep'\n[48]   applicationInsights: replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.applicationInsights)\n[49]   azureFirewall: replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.azureFirewall)  \n[50]   azureFirewallPip: '${naming.resourceTypeAbbreviations.publicIpAddress}-${replace(namingBaseNoWorkloadName, resourceTypeToken, naming.resourceTypeAbbreviations.azureFirewall)}'  \n[51]   bastion: replace(namingBaseNoWorkloadName, resourceTypeToken, naming.resourceTypeAbbreviations.bastion)\n[52]   bastionNsg: '${naming.resourceTypeAbbreviations.networkSecurityGroup}-${replace(namingBaseNoWorkloadName, resourceTypeToken, naming.resourceTypeAbbreviations.bastion)}'\n[53]   bastionPip: '${naming.resourceTypeAbbreviations.publicIpAddress}-${replace(namingBaseNoWorkloadName, resourceTypeToken, naming.resourceTypeAbbreviations.bastion)}'\n[54]   containerAppsEnvironment: replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.containerAppsEnvironment)\n[55]   containerAppsEnvironmentNsg: '${naming.resourceTypeAbbreviations.networkSecurityGroup}-${replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.containerAppsEnvironment)}'\n[56]   containerRegistry: take ( toLower( replace ( replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.containerRegistry), '-', '' ) ), 50 )\n[57]   containerRegistryPep:  '${naming.resourceTypeAbbreviations.privateEndpoint}-${toLower( replace ( replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.containerRegistry), '-', '' ) )}'\n[58]   containerRegistryUserAssignedIdentity:  '${naming.resourceTypeAbbreviations.managedIdentity}-${toLower( replace ( replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.containerRegistry), '-', '' ) )}-AcrPull'\n[59]   redisCache: replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.redisCache)\n[60]   redisCachePep: '${naming.resourceTypeAbbreviations.privateEndpoint}-${replace ( namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.redisCache )}'\n[61]   openAiAccount: replace ( namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.cognitiveAccount )\n[62]   openAiDeployment: replace ( namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.openAiDeployment )\n[63]   cosmosDbNoSql: toLower( take(replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.cosmosDbNoSql), 44) )\n[64]   cosmosDbNoSqlPep: '${naming.resourceTypeAbbreviations.privateEndpoint}-${toLower( take(replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.cosmosDbNoSql), 44) )}'\n[65]   frontDoorProfile:  replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.frontDoor)\n[66]   keyVault: endsWith( keyVaultName, '-') ? take( keyVaultName, 23 ) : keyVaultName\n[67]   keyVaultPep:  '${naming.resourceTypeAbbreviations.privateEndpoint}-${replace ( namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.keyVault )}'\n[68]   logAnalyticsWorkspace: replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.logAnalyticsWorkspace)\n[69]   routeTable: replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.routeTable)\n[70]   serviceBus: replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.serviceBus)\n[71]   serviceBusPep: '${naming.resourceTypeAbbreviations.privateEndpoint}-${replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.serviceBus)}'\n[72]   storageAccount: toLower(take( replace ( replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.storageAccount), '-', ''), 24))\n[73]   storageAccountPep: '${naming.resourceTypeAbbreviations.privateEndpoint}-${toLower( replace(namingBaseUnique, resourceTypeToken, naming.resourceTypeAbbreviations.storageAccount))}'\n[74]   vmJumpBox: replace(namingBaseNoWorkloadName, resourceTypeToken, naming.resourceTypeAbbreviations.virtualMachine)\n[75]   vmJumpBoxNsg: '${naming.resourceTypeAbbreviations.networkSecurityGroup}-${replace(namingBaseNoWorkloadName, resourceTypeToken, naming.resourceTypeAbbreviations.virtualMachine)}'\n[76]   vmJumpBoxNic: '${naming.resourceTypeAbbreviations.networkInterface}-${replace(namingBaseNoWorkloadName, resourceTypeToken, naming.resourceTypeAbbreviations.virtualMachine)}'\n[77]   frontDoor: replace(namingBase, resourceTypeToken, naming.resourceTypeAbbreviations.frontDoor)\n[78] }\n[79] \n[80] output resourcesNames object = resourceNames\n[81] output resourceTypeAbbreviations object = resourceTypeAbbreviations\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/network/vnet.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('Name of the resource Virtual Network (The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens)')\n[6] @minLength(2)\n[7] @maxLength(80)\n[8] param name string\n[9] \n[10] @description('Azure Region where the resource will be deployed in')\n[11] param location string\n[12] \n[13] @description('key-value pairs as tags, to identify the resource')\n[14] param tags object\n[15] \n[16] @description('Array, CIDRs to be allocated to the new vnet i.e. 192.168.0.0/24')\n[17] param vnetAddressPrefixes array\n[18] \n[19] @description('Pass an array of objects for all the required subnets')\n[20] param subnets array\n[21] \n[22] @description('Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it\\'s left blank, DDoS protection will not be configured. If it\\'s provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription.')\n[23] param ddosProtectionPlanId string = ''\n[24] \n[25] \n[26] // ------------------\n[27] // VARIABLES\n[28] // ------------------\n[29] \n[30] var vnetNameMaxLength = 80\n[31] var vnetName = take (name, vnetNameMaxLength)\n[32] var ddosProtectionPlan = {\n[33]   id: ddosProtectionPlanId\n[34] }\n[35] \n[36] // ------------------\n[37] // RESOURCES\n[38] // ------------------\n[39] \n[40] resource vnet 'Microsoft.Network/virtualNetworks@2022-07-01' = {\n[41]   name: vnetName\n[42]   location: location\n[43]   properties: {\n[44]     addressSpace: {\n[45]       addressPrefixes: vnetAddressPrefixes\n[46]     }\n[47]     ddosProtectionPlan: !empty(ddosProtectionPlanId) ? ddosProtectionPlan : null\n[48]     enableDdosProtection: !empty(ddosProtectionPlanId)\n[49]     subnets: subnets\n[50]   }\n[51]   tags: tags\n[52] }\n[53] \n[54] \n[55] // ------------------\n[56] // OUTPUTS\n[57] // ------------------\n[58] \n[59] @description('Resource id of the newly created Virtual network')\n[60] output vnetId string = vnet.id\n[61] \n[62] @description('Resource name of the newly created Virtual network')\n[63] output vnetName string = vnet.name\n[64] \n[65] \n[66] // INFO: based on second example of https://learn.microsoft.com/azure/azure-resource-manager/bicep/loops#array-and-index\n[67] @description('Outputs the array of the subnets, printing: index, subnetResourceId, subnerName. ')\n[68] output vnetSubnets array = [ for (item, i) in subnets: {\n[69]   subnetIndex: i\n[70]   id: vnet.properties.subnets[i].id\n[71]   name: vnet.properties.subnets[i].name  \n[72] }]\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/log-analytics-ws.bicep\n[1] \n[2] @description('Required. Name of the Log Analytics Workspace Service. It must be between 4 and 63 characters and can contain only letters, numbers and \"-\". The \"-\" should not be the first or the last symbol')\n[3] //The workspace name .\n[4] //The workspace name can contain only letters, numbers and '-'. The '-' shouldn't be the first or the last symbol.\n[5] @minLength(4)\n[6] @maxLength(63)\n[7] param name string\n[8] \n[9] @description('Azure region where the resources will be deployed in')\n[10] param location string\n[11] \n[12] param tags object = {}\n[13] \n[14] @description('Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode.')\n[15] @allowed([\n[16]   'Free'\n[17]   'Standalone'\n[18]   'PerNode'\n[19]   'PerGB2018'\n[20] ])\n[21] param serviceTier string = 'PerGB2018'\n[22] \n[23] @description('Optional, default 90. Number of days data will be retained for.')\n[24] @minValue(0)\n[25] @maxValue(730)\n[26] param dataRetention int = 90\n[27] \n[28] @description('Optional. The network access type for accessing Log Analytics ingestion.')\n[29] @allowed([\n[30]   'Enabled'\n[31]   'Disabled'\n[32] ])\n[33] param publicNetworkAccessForIngestion string = 'Enabled'\n[34] \n[35] @description('Optional. The network access type for accessing Log Analytics query.')\n[36] @allowed([\n[37]   'Enabled'\n[38]   'Disabled'\n[39] ])\n[40] param publicNetworkAccessForQuery string = 'Enabled'\n[41] \n[42] @description('Optional. Set to \\'true\\' to use resource or workspace permissions and \\'false\\' (or leave empty) to require workspace permissions.')\n[43] param useResourcePermissions bool = false\n[44] \n[45] var lawsMaxLength = 63\n[46] var lawsNameSantized = replace(replace(name, '_', '-'), '.', '-')\n[47] var lawsName = length(lawsNameSantized) > lawsMaxLength ? substring(lawsNameSantized, 0, lawsMaxLength) : lawsNameSantized\n[48] \n[49] resource laws 'Microsoft.OperationalInsights/workspaces@2022-10-01' = {\n[50]   location: location\n[51]   name: lawsName\n[52]   tags: tags\n[53]   properties: {\n[54]     retentionInDays: dataRetention\n[55]     publicNetworkAccessForIngestion: publicNetworkAccessForIngestion\n[56]     publicNetworkAccessForQuery: publicNetworkAccessForQuery\n[57]     sku:{\n[58]       name:serviceTier\n[59]     }\n[60]     features: {\n[61]       enableLogAccessUsingOnlyResourcePermissions: useResourcePermissions\n[62]     }\n[63]   }\n[64] }\n[65] \n[66] @description('The name of the resource.')\n[67] output logAnalyticsWsName string = laws.name\n[68] \n[69] @description('The resource ID of the resource.')\n[70] output logAnalyticsWsId string = laws.id\n[71] \n[72] @description('The customer id of the log analytics workspace.')\n[73] output customerId string = laws.properties.customerId\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/network/nsg.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('Name of the Network Security Group. Alphanumerics, underscores, periods, and hyphens. Start with alphanumeric. End alphanumeric or underscore. ')\n[6] @maxLength(80)\n[7] param name string\n[8] \n[9] @description('Azure Region where the resource will be deployed in')\n[10] param location string\n[11] \n[12] @description('key-value pairs as tags, to identify the resource')\n[13] param tags object\n[14] \n[15] @description('Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed.')\n[16] param securityRules array = []\n[17] \n[18] @description('Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions.')\n[19] param flushConnection bool = false\n[20] \n[21] @description('Optional. Resource ID of the diagnostic storage account.')\n[22] param diagnosticStorageAccountId string = ''\n[23] \n[24] @description('Optional. Resource ID of the diagnostic log analytics workspace.')\n[25] param diagnosticWorkspaceId string = ''\n[26] \n[27] @description('Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to.')\n[28] param diagnosticEventHubAuthorizationRuleId string = ''\n[29] \n[30] @description('Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category.')\n[31] param diagnosticEventHubName string = ''\n[32] \n[33] @description('Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource.')\n[34] @allowed([\n[35]   'allLogs'\n[36]   'NetworkSecurityGroupEvent'\n[37]   'NetworkSecurityGroupRuleCounter'\n[38] ])\n[39] param diagnosticLogCategoriesToEnable array = [\n[40]   'allLogs'\n[41] ]\n[42] \n[43] @description('Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\".')\n[44] param diagnosticSettingsName string = ''\n[45] \n[46] \n[47] // ------------------\n[48] // VARIABLES\n[49] // ------------------\n[50] \n[51] var diagnosticsLogsSpecified = [for category in filter(diagnosticLogCategoriesToEnable, item => item != 'allLogs'): {\n[52]   category: category\n[53]   enabled: true\n[54] }]\n[55] \n[56] var diagnosticsLogs = contains(diagnosticLogCategoriesToEnable, 'allLogs') ? [\n[57]   {\n[58]     categoryGroup: 'allLogs'\n[59]     enabled: true\n[60]   }\n[61] ] : diagnosticsLogsSpecified\n[62] \n[63] \n[64] // ------------------\n[65] // RESOURCES\n[66] // ------------------\n[67] \n[68] resource networkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2022-07-01' = {\n[69]   name: name\n[70]   location: location\n[71]   tags: tags\n[72]   properties: {\n[73]     flushConnection: flushConnection\n[74]     securityRules: securityRules\n[75]   }\n[76] }\n[77] \n[78] \n[79] resource networkSecurityGroup_diagnosticSettings 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = if (!empty(diagnosticStorageAccountId) || !empty(diagnosticWorkspaceId) || !empty(diagnosticEventHubAuthorizationRuleId) || !empty(diagnosticEventHubName)) {\n[80]   name: !empty(diagnosticSettingsName) ? diagnosticSettingsName : '${name}-diagnosticSettings'\n[81]   properties: {\n[82]     storageAccountId: !empty(diagnosticStorageAccountId) ? diagnosticStorageAccountId : null\n[83]     workspaceId: !empty(diagnosticWorkspaceId) ? diagnosticWorkspaceId : null\n[84]     eventHubAuthorizationRuleId: !empty(diagnosticEventHubAuthorizationRuleId) ? diagnosticEventHubAuthorizationRuleId : null\n[85]     eventHubName: !empty(diagnosticEventHubName) ? diagnosticEventHubName : null\n[86]     logs: diagnosticsLogs\n[87]   }\n[88]   scope: networkSecurityGroup\n[89] }\n[90] \n[91] // ------------------\n[92] // OUTPUTS\n[93] // ------------------\n[94] \n[95] @description('Resource id of the newly created Network Security Group')\n[96] output nsgId string = networkSecurityGroup.id\n[97] \n[98] @description('Resource name of the newly created Network Security Group')\n[99] output nsgName string = networkSecurityGroup.name\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/network/peering.bicep\n[1] @description('The name of the local Virtual Network')\n[2] param localVnetName string\n[3] \n[4] @description('The name of the remote Virtual Network')\n[5] param remoteVnetName string\n[6] \n[7] @description('The name of the resource group of the remote virtual netowrk')\n[8] param remoteRgName string\n[9] \n[10] @description('The id of the subscription of the remote virtual netowrk')\n[11] param remoteSubscriptionId string\n[12] \n[13] resource vnetPeering 'Microsoft.Network/virtualNetworks/virtualNetworkPeerings@2021-08-01' = {\n[14]   name: '${localVnetName}/peerTo-${remoteVnetName}'\n[15]   properties: {\n[16]     allowVirtualNetworkAccess: true\n[17]     allowGatewayTransit: false\n[18]     allowForwardedTraffic: false\n[19]     useRemoteGateways: false\n[20]     remoteVirtualNetwork: {\n[21]       id: resourceId(remoteSubscriptionId, remoteRgName, 'Microsoft.Network/virtualNetworks', remoteVnetName)\n[22]     }\n[23]   }\n[24] }\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/routeTables/main.bicep\n[1] @description('Required. Name given for the hub route table.')\n[2] param name string\n[3] \n[4] @description('Optional. Location for all resources.')\n[5] param location string = resourceGroup().location\n[6] \n[7] @description('Optional. An Array of Routes to be established within the hub route table.')\n[8] param routes array = []\n[9] \n[10] @description('Optional. Switch to disable BGP route propagation.')\n[11] param disableBgpRoutePropagation bool = false\n[12] \n[13] @allowed([\n[14]   ''\n[15]   'CanNotDelete'\n[16]   'ReadOnly'\n[17] ])\n[18] @description('Optional. Specify the type of lock.')\n[19] param lock string = ''\n[20] \n[21] @description('Optional. Array of role assignment objects that contain the \\'roleDefinitionIdOrName\\' and \\'principalId\\' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.')\n[22] param roleAssignments array = []\n[23] \n[24] @description('Optional. Tags of the resource.')\n[25] param tags object = {}\n[26] \n[27] resource routeTable 'Microsoft.Network/routeTables@2022-07-01' = {\n[28]   name: name\n[29]   location: location\n[30]   tags: tags\n[31]   properties: {\n[32]     routes: routes\n[33]     disableBgpRoutePropagation: disableBgpRoutePropagation\n[34]   }\n[35] }\n[36] \n[37] resource routeTable_lock 'Microsoft.Authorization/locks@2020-05-01' = if (!empty(lock)) {\n[38]   name: '${routeTable.name}-${lock}-lock'\n[39]   properties: {\n[40]     level: any(lock)\n[41]     notes: lock == 'CanNotDelete' ? 'Cannot delete resource or child resources.' : 'Cannot modify the resource or child resources.'\n[42]   }\n[43]   scope: routeTable\n[44] }\n[45] \n[46] module routeTable_roleAssignments '.bicep/nested_roleAssignments.bicep' = [for (roleAssignment, index) in roleAssignments: {\n[47]   name: '${uniqueString(deployment().name, location)}-RouteTable-Rbac-${index}'\n[48]   params: {\n[49]     description: contains(roleAssignment, 'description') ? roleAssignment.description : ''\n[50]     principalIds: roleAssignment.principalIds\n[51]     principalType: contains(roleAssignment, 'principalType') ? roleAssignment.principalType : ''\n[52]     roleDefinitionIdOrName: roleAssignment.roleDefinitionIdOrName\n[53]     condition: contains(roleAssignment, 'condition') ? roleAssignment.condition : ''\n[54]     delegatedManagedIdentityResourceId: contains(roleAssignment, 'delegatedManagedIdentityResourceId') ? roleAssignment.delegatedManagedIdentityResourceId : ''\n[55]     resourceId: routeTable.id\n[56]   }\n[57] }]\n[58] \n[59] @description('The resource group the route table was deployed into.')\n[60] output resourceGroupName string = resourceGroup().name\n[61] \n[62] @description('The name of the route table.')\n[63] output name string = routeTable.name\n[64] \n[65] @description('The resource ID of the route table.')\n[66] output resourceId string = routeTable.id\n[67] \n[68] @description('The location the resource was deployed into.')\n[69] output location string = routeTable.location\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmVnetName string\n[11] param vmSubnetName string\n[12] param vmSubnetAddressPrefix string\n[13] param vmNetworkSecurityGroupName string\n[14] param vmNetworkInterfaceName string\n[15] \n[16] param vmAdminUsername string\n[17] \n[18] @secure()\n[19] param vmAdminPassword string\n[20] \n[21] @secure()\n[22] param vmSshPublicKey string\n[23] \n[24] @description('Type of authentication to use on the Virtual Machine. SSH key is recommended.')\n[25] @allowed([\n[26]   'sshPublicKey'\n[27]   'password'\n[28] ])\n[29] param vmAuthenticationType string = 'password'\n[30] \n[31] @description('Optional. The tags to be assigned to the created resources.')\n[32] param tags object = {}\n[33] \n[34] param location string = resourceGroup().location\n[35] \n[36] // ------------------\n[37] // VARIABLES\n[38] // ------------------\n[39] \n[40] var linuxConfiguration = {\n[41]   disablePasswordAuthentication: true\n[42]   ssh: {\n[43]     publicKeys: [\n[44]       {\n[45]         path: '/home/${vmAdminUsername}/.ssh/authorized_keys'\n[46]         keyData: vmSshPublicKey\n[47]       }\n[48]     ]\n[49]   }\n[50] }\n[51] \n[52] // ------------------\n[53] // RESOURCES\n[54] // ------------------\n[55] \n[56] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[57]   name: vmNetworkSecurityGroupName\n[58]   location: location\n[59]   tags: tags\n[60]   properties: {\n[61]     securityRules: []\n[62]   }\n[63] }\n[64] \n[65] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[66]   name: '${vmVnetName}/${vmSubnetName}'\n[67]   properties: {\n[68]     addressPrefix: vmSubnetAddressPrefix\n[69]     networkSecurityGroup: {\n[70]       id: vmNetworkSecurityGroup.id\n[71]     }\n[72]   }\n[73] }\n[74] \n[75] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[76]   name: vmNetworkInterfaceName\n[77]   location: location\n[78]   tags: tags\n[79]   properties: {\n[80]     ipConfigurations: [\n[81]       {\n[82]         name: 'ipconfig1'\n[83]         properties: {\n[84]           subnet: {\n[85]             id: vmSubnet.id\n[86]           }\n[87]           privateIPAllocationMethod: 'Dynamic'\n[88]         }\n[89]       }\n[90]     ]\n[91]   }\n[92] }\n[93] \n[94] resource vm 'Microsoft.Compute/virtualMachines@2021-03-01' = {\n[95]   name: vmName\n[96]   location: location\n[97]   tags: tags\n[98]   properties: {\n[99]     osProfile: {\n[100]       computerName: vmName\n[101]       adminUsername: vmAdminUsername\n[102]       adminPassword: vmAdminPassword\n[103]       linuxConfiguration: ((vmAuthenticationType == 'password') ? null : linuxConfiguration)\n[104]     }\n[105]     hardwareProfile: {\n[106]       vmSize: vmSize\n[107]     }\n[108]     storageProfile: {\n[109]       osDisk: {\n[110]         createOption: 'FromImage'\n[111]         managedDisk: {\n[112]           storageAccountType: 'Standard_LRS'\n[113]         }\n[114]       }\n[115]       imageReference: {\n[116]         publisher: 'Canonical'\n[117]         offer: 'UbuntuServer'\n[118]         sku: '18.04-LTS'\n[119]         version: 'latest'\n[120]       }\n[121]     }\n[122]     networkProfile: {\n[123]       networkInterfaces: [\n[124]         {\n[125]           id: vmNetworkInterface.id\n[126]         }\n[127]       ]\n[128]     }\n[129]   }\n[130] }\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/windows-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmWindowsOSVersion string = '2016-Datacenter'\n[11] \n[12] param vmVnetName string\n[13] param vmSubnetName string\n[14] param vmSubnetAddressPrefix string\n[15] param vmNetworkSecurityGroupName string\n[16] param vmNetworkInterfaceName string\n[17] \n[18] param vmAdminUsername string\n[19] \n[20] @secure()\n[21] param vmAdminPassword string\n[22] \n[23] @description('Optional. The tags to be assigned to the created resources.')\n[24] param tags object = {}\n[25] \n[26] param location string = resourceGroup().location\n[27] \n[28] // ------------------\n[29] // RESOURCES\n[30] // ------------------\n[31] \n[32] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[33]   name: vmNetworkSecurityGroupName\n[34]   location: location\n[35]   tags: tags\n[36]   properties: {\n[37]     securityRules: []\n[38]   }\n[39] }\n[40] \n[41] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[42]   name: '${vmVnetName}/${vmSubnetName}'\n[43]   properties: {\n[44]     addressPrefix: vmSubnetAddressPrefix\n[45]     networkSecurityGroup: {\n[46]       id: vmNetworkSecurityGroup.id\n[47]     }\n[48]   }\n[49] }\n[50] \n[51] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[52]   name: vmNetworkInterfaceName\n[53]   location: location\n[54]   tags: tags\n[55]   properties: {\n[56]     ipConfigurations: [\n[57]       {\n[58]         name: 'ipconfig1'\n[59]         properties: {\n[60]           subnet: {\n[61]             id: vmSubnet.id\n[62]           }\n[63]           privateIPAllocationMethod: 'Dynamic'\n[64]         }\n[65]       }\n[66]     ]\n[67]   }\n[68] }\n[69] \n[70] resource vm 'Microsoft.Compute/virtualMachines@2021-04-01' =  {\n[71]   name: vmName\n[72]   location: location\n[73]   tags: tags\n[74]   zones: [\n[75]     '1'\n[76]   ]\n[77]   properties: {\n[78]     hardwareProfile: {\n[79]       vmSize: vmSize\n[80]     }\n[81]     storageProfile: {\n[82]       osDisk: {\n[83]         createOption: 'FromImage'\n[84]         managedDisk: {\n[85]           storageAccountType: 'Standard_LRS'\n[86]         }\n[87]       }\n[88]       imageReference: {\n[89]         publisher: 'MicrosoftWindowsServer'\n[90]         offer: 'WindowsServer'\n[91]         sku: vmWindowsOSVersion\n[92]         version: 'latest'\n[93]       }\n[94]     }\n[95]     osProfile: {\n[96]       computerName: vmName\n[97]       adminUsername: vmAdminUsername\n[98]       adminPassword: vmAdminPassword\n[99]     }\n[100]     networkProfile: {\n[101]       networkInterfaces: [\n[102]         {\n[103]           id: vmNetworkInterface.id\n[104]         }\n[105]       ]\n[106]     }\n[107]   }\n[108] }\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('The location where the resources will be created.')\n[6] param location string\n[7] \n[8] @description('The name of the Container Registry that will be allow-listed by the policy.')\n[9] param containerRegistryName string\n[10] \n[11] var namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n[12] \n[13] // Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\n[14] var builtInPolicies = [  \n[15]   {\n[16]     name: 'authentication-should-be-enabled-on-container-apps'\n[17]     definition: {\n[18]       properties: {\n[19]         displayName: 'Authentication should be enabled on container apps'\n[20]         description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n[21]       }\n[22]     }\n[23]     parameters: {\n[24]       effect: {\n[25]         value: 'AuditIfNotExists'\n[26]       }\n[27]     }\n[28]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n[29]   }\n[30]   {\n[31]     name: 'container-app-environments-should-use-network-injection'\n[32]     definition: {\n[33]       properties: {\n[34]         displayName: 'Container App environments should use network injection'\n[35]         description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n[36]       }\n[37]     }\n[38]     parameters: {\n[39]       effect: {\n[40]         value: 'Audit'\n[41]       }\n[42]     }\n[43]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n[44]   }\n[45]   {\n[46]     name: 'container-app-should-configure-with-volume-mount'\n[47]     definition: {\n[48]       properties: {\n[49]         displayName: 'Container App should configure with volume mount'\n[50]         description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n[51]       }\n[52]     }\n[53]     parameters: {\n[54]       effect: {\n[55]         value: 'Audit'\n[56]       }\n[57]     }\n[58]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n[59]   }\n[60]   {\n[61]     name: 'container-app-should-disable-public-network-access'\n[62]     definition: {\n[63]       properties: {\n[64]         displayName: 'Container Apps environment should disable public network access'\n[65]         description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n[66]       }\n[67]     }\n[68]     parameters: {\n[69]       effect: {\n[70]         value: 'Audit'\n[71]       }\n[72]     }\n[73]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n[74]   }\n[75]   {\n[76]     name: 'container-apps-should-disable-external-network-access'\n[77]     definition: {\n[78]       properties: {\n[79]         displayName: 'Container Apps should disable external network access'\n[80]         description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n[81]       }\n[82]     }\n[83]     parameters: {\n[84]       effect: {\n[85]         value: 'Audit'\n[86]       }\n[87]     }\n[88]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n[89]   }\n[90]   {\n[91]     name: 'containerapps-should-only-be-accessible-over-HTTPS'\n[92]     definition: {\n[93]       properties: {\n[94]         displayName: 'Container Apps should only be accessible over HTTPS'\n[95]         description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n[96]       }\n[97]     }\n[98]     parameters: {\n[99]       effect: {\n[100]         value: 'Audit'\n[101]       }\n[102]     }\n[103]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n[104]   }\n[105]   {\n[106]     name: 'managed-identity-should-be-enabled'\n[107]     definition: {\n[108]       properties: {\n[109]         displayName: 'Managed Identity should be enabled for Container Apps'\n[110]         description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n[111]       }\n[112]     }\n[113]     parameters: {\n[114]       effect: {\n[115]         value: 'Audit'\n[116]       }\n[117]     }\n[118]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n[119]   }\n[120]   \n[121] ]\n[122] \n[123] // credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n[124] // https://github.com/Azure-Samples/aca-azure-policy/tree/main\n[125] var customPolicies = [\n[126]   {\n[127]     name: 'aca-allowed-container-registries'\n[128]     definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n[129]     parameters: {\n[130]       listOfAllowedContainerRegistries: {\n[131]         value: [\n[132]           'mcr.microsoft.com'\n[133]           'docker.io'\n[134]           'ghcr.io'\n[135]           '${containerRegistryName}.azurecr.io'\n[136]         ]\n[137]       }\n[138]       effect: {\n[139]         value: 'Audit'\n[140]       }\n[141]     }\n[142]   }\n[143]   {\n[144]     name: 'aca-replica-count'\n[145]     definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n[146]     parameters: {\n[147]       minReplicas: {\n[148]         value: 0\n[149]       }\n[150]       maxReplicas: {\n[151]         value: 30\n[152]       }\n[153]       effect: {\n[154]         value: 'Audit'\n[155]       }\n[156]     }\n[157]     identity: false\n[158]   }\n[159]   {\n[160]     name: 'aca-no-liveness-probes'\n[161]     definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n[162]     parameters: {\n[163]       effect: {\n[164]         value: 'Audit'\n[165]       }\n[166]     }\n[167]     identity: false\n[168]   }\n[169]   {\n[170]     name: 'aca-no-readiness-probes'\n[171]     definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n[172]     parameters: {\n[173]       effect: {\n[174]         value: 'Audit'\n[175]       }\n[176]     }\n[177]     identity: false\n[178]   }\n[179]   {\n[180]     name: 'aca-no-startup-probes'\n[181]     definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n[182]     parameters: {\n[183]       effect: {\n[184]         value: 'Audit'\n[185]       }\n[186]     }\n[187]     identity: false\n[188]   }\n[189]   {\n[190]     name: 'aca-required-cpu-and-memory'\n[191]     definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n[192]     parameters: {\n[193]       maxCpu: {\n[194]         value: '1.0'\n[195]       }\n[196]       maxMemory: {\n[197]         value: '2.5'\n[198]       }\n[199]       effect: {\n[200]         value: 'Audit'\n[201]       }\n[202]     }\n[203]     identity: false\n[204]   }\n[205]   {\n[206]     name: 'aca-no-monitoring'\n[207]     definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n[208]     parameters: {\n[209]       effect: {\n[210]         value: 'Audit'\n[211]       }\n[212]     }\n[213]     identity: false\n[214]   }\n[215] ]\n[216] \n[217] module builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n[218]   name: 'poAssign_${take(policy.name, 40)}'\n[219]   params: {    \n[220]     location: location\n[221]     policy: policy\n[222]     policyDefinitionId: policy.policyDefinitionId    \n[223]   }  \n[224] }]\n[225] \n[226] \n[227] // resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n[228] //   name: guid(policy.name)\n[229] //   properties: {\n[230] //     description: policy.definition.properties.description\n[231] //     displayName: policy.definition.properties.displayName\n[232] //     metadata: policy.definition.properties.metadata\n[233] //     mode: policy.definition.properties.mode\n[234] //     parameters: policy.definition.properties.parameters\n[235] //     policyType: policy.definition.properties.policyType\n[236] //     policyRule: policy.definition.properties.policyRule\n[237] //   }\n[238] // }]\n[239] \n[240] module policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n[241]   name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n[242]   scope: subscription()\n[243]   params: {\n[244]     policy: policy\n[245]   }\n[246] }]\n[247] \n[248] module customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n[249]   name: 'poAssign_${take(policy.name, 40)}'\n[250]   params: {    \n[251]     location: location\n[252]     policy: policy\n[253]     policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n[254]   } \n[255]   dependsOn: [\n[256]     policyDefinition\n[257]   ] \n[258] }]\n```\n\n"}],"stream":true},"val":"ANNOTATION:\n```\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=62,endLine=62::Hardcoded credentials are a security risk. Use Azure Key Vault for password management.\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=66,endLine=66::Hardcoded credentials are a security risk. Use Azure Key Vault for SSH key management.\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=88,endLine=88::Using 'loadTextContent' to load potentially sensitive information can lead to security risks if the content is not handled properly.\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=90,endLine=90::Using 'loadJsonContent' to load potentially sensitive information can lead to security risks if the content is not handled properly.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=78,endLine=78::Consider setting 'deployAzurePolicies' to false if Azure Policies are not needed to reduce unnecessary resource deployment.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=19,endLine=19::Ensure that the resource group name is generated in a secure manner that does not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=22,endLine=22::Ensure that tags do not contain sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=27,endLine=27::Ensure that the hub virtual network ID is not exposed in a way that could lead to security risks.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=51,endLine=51::Ensure that the network appliance IP address is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=54,endLine=54::Ensure that the VM size is appropriate for the workload and does not lead to unnecessary costs.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=57,endLine=57::Ensure that the VM admin username is not a common username to reduce the risk of brute-force attacks.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=70,endLine=70::Ensure that the jump box OS type is set to 'none' if a jump box is not required to reduce the attack surface.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=72,endLine=72::Ensure that the subnet name for the jump box does not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=75,endLine=75::Ensure that the CIDR for the jump box subnet is appropriately sized and does not allow for more addresses than necessary.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=85,endLine=85::Ensure that the location variable is set correctly to match the Azure region naming conventions.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=93,endLine=93::Ensure that the resource group name is generated in a secure manner that does not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=96,endLine=96::Ensure that the subscription ID for the hub virtual network is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=99,endLine=99::Ensure that the resource group name for the hub virtual network is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=102,endLine=102::Ensure that the hub virtual network name is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=105,endLine=105::Ensure that subnet definitions are secure and do not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=111,endLine=111::Ensure that the network security group ID is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=114,endLine=114::Ensure that the route table ID is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=121,endLine=121::Ensure that the service name for subnet delegation is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=132,endLine=132::Ensure that the network security group ID is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=145,endLine=145::Ensure that the network security group ID is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=157,endLine=157::Ensure that the address prefix for the jump box subnet is appropriately sized and does not allow for more addresses than necessary.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=166,endLine=166::Ensure that the resource group for the spoke is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=173,endLine=173::Ensure that the naming rules for resources do not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=185,endLine=185::Ensure that the virtual network for the spoke is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=198,endLine=198::Ensure that the log analytics workspace is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=208,endLine=208::Ensure that the network security group rules for the Container Apps cluster are secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=221,endLine=221::Ensure that the network security group rules for the Application Gateway are secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=234,endLine=234::Ensure that the network security group rules for the private endpoint subnet are secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=247,endLine=247::Ensure that the peering to the regional hub network is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=259,endLine=259::Ensure that the peering from the regional hub network to the spoke network is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=270,endLine=270::Ensure that the route table deployment is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=292,endLine=292::Ensure that the Linux virtual machine deployment is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=312,endLine=312::Ensure that the Windows virtual machine deployment is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=331,endLine=331::Ensure that the policy assignments are secured and not exposed to unauthorized access.\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/naming/naming.module.bicep,line=6,endLine=6::typo\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/naming/naming.module.bicep,line=23,endLine=23::Ensure that the naming rules do not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/naming/naming.module.bicep,line=25,endLine=25::Ensure that the unique ID is generated in a secure manner and does not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/naming/naming.module.bicep,line=29,endLine=29::Ensure that the naming convention is followed and does not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/naming/naming.module.bicep,line=38,endLine=38::Ensure that the Key Vault name is generated in a secure manner and does not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/network/vnet.bicep,line=22,endLine=22::Ensure that the DDoS protection plan ID is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/network/vnet.bicep,line=40,endLine=40::Ensure that the virtual network is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/log-analytics-ws.bicep,line=49,endLine=49::Ensure that the Log Analytics Workspace is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/network/nsg.bicep,line=68,endLine=68::Ensure that the Network Security Group is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/network/nsg.bicep,line=79,endLine=79::Ensure that the diagnostic settings for the Network Security Group are secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/network/peering.bicep,line=13,endLine=13::Ensure that the virtual network peering is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/routeTables/main.bicep,line=27,endLine=27::Ensure that the route table is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/routeTables/main.bicep,line=37,endLine=37::Ensure that the lock on the route table is secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/../../../../shared/bicep/routeTables/main.bicep,line=46,endLine=46::Ensure that the role assignments for the route table are secured and not exposed to unauthorized access.\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep,line=19,endLine=19::Hardcoded credentials are a security risk. Use Azure Key Vault for password management.\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep,line=22,endLine=22::Hardcoded credentials are a security risk. Use Azure Key Vault for SSH key management.\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/windows-vm.bicep,line=21,endLine=21::Hardcoded credentials are a security risk. Use Azure Key Vault for password management.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep,line=11,endLine=11::Ensure that the naming rules do not expose sensitive information.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep,line=14,endLine=14::Ensure that the built-in policy definitions are secured and not exposed to unauthorized access.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep,line=124,endLine=124::Ensure that the custom policy definitions are secured and not exposed to unauthorized access.\n```\n"}
{"sha":"6c61b9676f023f1e19b99274da885aad5da7bb68b932c8b7ba5e094a31b8beb1","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Objective\n\nIdentify security issues in SPEC files. \nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list. \n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created. This should be the same region as the hub.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param spokeResourceGroupName string\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] // Hub\n[26] @description('The resource ID of the existing hub virtual network.')\n[27] param hubVNetId string\n[28] \n[29] // Spoke\n[30] @description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\n[31] param spokeVNetAddressPrefixes array\n[32] \n[33] @description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\n[34] param spokeInfraSubnetName string = 'snet-infra'\n[35] \n[36] @description('CIDR of the spoke infrastructure subnet.')\n[37] param spokeInfraSubnetAddressPrefix string\n[38] \n[39] @description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\n[40] param spokePrivateEndpointsSubnetName string = 'snet-pep'\n[41] \n[42] @description('CIDR of the spoke private endpoints subnet.')\n[43] param spokePrivateEndpointsSubnetAddressPrefix string\n[44] \n[45] @description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\n[46] param spokeApplicationGatewaySubnetName string = 'snet-agw'\n[47] \n[48] @description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\n[49] param spokeApplicationGatewaySubnetAddressPrefix string\n[50] \n[51] @description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\n[52] param networkApplianceIpAddress string\n[53] \n[54] @description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\n[55] param vmSize string\n[56] \n[57] @description('The username to use for the jump box.')\n[58] param vmAdminUsername string\n[59] \n[60] @description('The password to use for the jump box.')\n[61] @secure()\n[62] param vmAdminPassword string\n[63] \n[64] @description('The SSH public key to use for the jump box. Only relevant for Linux.')\n[65] @secure()\n[66] param vmLinuxSshAuthorizedKeys string\n[67] \n[68] @description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n[69] @allowed([ 'linux', 'windows', 'none' ])\n[70] param vmJumpboxOSType string = 'none'\n[71] \n[72] @description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\n[73] param vmSubnetName string = 'snet-jumpbox'\n[74] \n[75] @description('CIDR to use for the jump box subnet.')\n[76] param vmJumpBoxSubnetAddressPrefix string\n[77] \n[78] @description('Optional, default value is true. If true, Azure Policies will be deployed')\n[79] param deployAzurePolicies bool = true\n[80] \n[81] // ------------------\n[82] // VARIABLES\n[83] // ------------------\n[84] \n[85] //Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\n[86] var locationVar = location == 'francecentral' ? 'centralfrance' : location\n[87] \n[88] // load as text (and not as Json) to replace <location> placeholder in the nsg rules\n[89] var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\n[90] var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\n[91] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[92] \n[93] var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[94] var hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n[95] \n[96] @description('The ID of the subscription containing the hub virtual network.')\n[97] var hubSubscriptionId = hubVNetResourceIdTokens[2]\n[98] \n[99] @description('The name of the resource group containing the hub virtual network.')\n[100] var hubResourceGroupName = hubVNetResourceIdTokens[4]\n[101] \n[102] @description('The name of the hub virtual network.')\n[103] var hubVNetName = hubVNetResourceIdTokens[8]\n[104] \n[105] // Subnet definition taking in consideration feature flags\n[106] var defaultSubnets = [\n[107]   {\n[108]     name: spokeInfraSubnetName\n[109]     properties: {\n[110]       addressPrefix: spokeInfraSubnetAddressPrefix\n[111]       networkSecurityGroup: {\n[112]         id: nsgContainerAppsEnvironment.outputs.nsgId\n[113]       }\n[114]       routeTable: {\n[115]         id: egressLockdownUdr.outputs.resourceId\n[116]       }\n[117]       delegations: [\n[118]         {\n[119]           name: 'envdelegation'\n[120]           properties: {\n[121]             serviceName: 'Microsoft.App/environments'\n[122]           }\n[123]         }\n[124]       ]\n[125]     }\n[126]   }\n[127]   {\n[128]     name: spokePrivateEndpointsSubnetName\n[129]     properties: {\n[130]       addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n[131]       networkSecurityGroup: {\n[132]         id: nsgPep.outputs.nsgId\n[133]       }\n[134]     }\n[135]   }\n[136] ]\n[137] \n[138] // Append optional application gateway subnet, if required\n[139] var appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n[140]     {\n[141]       name: spokeApplicationGatewaySubnetName\n[142]       properties: {\n[143]         addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n[144]         networkSecurityGroup: {\n[145]           id: nsgAppGw.outputs.nsgId\n[146]         }\n[147]       }\n[148]     }\n[149]   ]) : defaultSubnets\n[150] \n[151]   //Append optional jumpbox subnet, if required\n[152] var spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n[153]     {\n[154]       name: vmSubnetName\n[155]       properties: {\n[156]         addressPrefix: vmJumpBoxSubnetAddressPrefix\n[157]       }\n[158]     }\n[159]   ]) : appGwAndDefaultSubnets\n[160] \n[161] // ------------------\n[162] // RESOURCES\n[163] // ------------------\n[164] \n[165] \n[166] @description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\n[167] resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[168]   name: rgSpokeName\n[169]   location: location\n[170]   tags: tags\n[171] }\n[172] \n[173] @description('User-configured naming rules')\n[174] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[175]   scope: spokeResourceGroup\n[176]   name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n[177]   params: {\n[178]     uniqueId: uniqueString(spokeResourceGroup.id)\n[179]     environment: environment\n[180]     workloadName: workloadName\n[181]     location: location\n[182]   }\n[183] }\n[184] \n[185] @description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\n[186] module vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n[187]   name: take('vnetSpoke-${deployment().name}', 64)\n[188]   scope: spokeResourceGroup\n[189]   params: {\n[190]     name: naming.outputs.resourcesNames.vnetSpoke\n[191]     location: location\n[192]     tags: tags\n[193]     subnets: spokeSubnets\n[194]     vnetAddressPrefixes: spokeVNetAddressPrefixes\n[195]   }\n[196] }\n[197] \n[198] @description('The log sink for Azure Diagnostics')\n[199] module logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[200]   name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n[201]   scope: spokeResourceGroup\n[202]   params: {\n[203]     location: location\n[204]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[205]   }\n[206] }\n[207] \n[208] @description('Network security group rules for the Container Apps cluster.')\n[209] module nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n[210]   name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n[211]   scope: spokeResourceGroup\n[212]   params: {\n[213]     name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n[214]     location: location\n[215]     tags: tags\n[216]     securityRules: nsgCaeRules.securityRules\n[217]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[218]   }\n[219] }\n[220] \n[221] @description('NSG Rules for the Application Gateway.')\n[222] module nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[223]   name: take('nsgAppGw-${deployment().name}', 64)\n[224]   scope: spokeResourceGroup\n[225]   params: {\n[226]     name: naming.outputs.resourcesNames.applicationGatewayNsg\n[227]     location: location\n[228]     tags: tags\n[229]     securityRules: nsgAppGwRules\n[230]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[231]   }\n[232] }\n[233] \n[234] @description('NSG Rules for the private enpoint subnet.')\n[235] module nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n[236]   name: take('nsgPep-${deployment().name}', 64)\n[237]   scope: spokeResourceGroup\n[238]   params: {\n[239]     name: naming.outputs.resourcesNames.pepNsg\n[240]     location: location\n[241]     tags: tags\n[242]     securityRules: []\n[243]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[244]   }\n[245] }\n[246] \n[247] @description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\n[248] module peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n[249]   name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n[250]   scope: spokeResourceGroup\n[251]   params: {\n[252]     localVnetName: vnetSpoke.outputs.vnetName\n[253]     remoteSubscriptionId: hubSubscriptionId\n[254]     remoteRgName: hubResourceGroupName\n[255]     remoteVnetName: hubVNetName\n[256]   }\n[257] }\n[258] \n[259] @description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\n[260] module peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n[261]   name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n[262]   scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n[263]   params: {\n[264]     localVnetName: hubVNetName\n[265]     remoteSubscriptionId: last(split(subscription().id, '/'))!\n[266]     remoteRgName: spokeResourceGroup.name\n[267]     remoteVnetName: vnetSpoke.outputs.vnetName\n[268]   }\n[269] }\n[270] @description('The Route Table deployment')\n[271] module egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n[272]   name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n[273]   scope: spokeResourceGroup\n[274]   params: {\n[275]     name: naming.outputs.resourcesNames.routeTable\n[276]     location: location\n[277]     tags: tags\n[278]     routes: [\n[279]       {\n[280]         name: 'defaultEgressLockdown'\n[281]         properties: {\n[282]           addressPrefix: '0.0.0.0/0'\n[283]           nextHopType: 'VirtualAppliance'\n[284]           nextHopIpAddress: networkApplianceIpAddress\n[285]         }\n[286]       }\n[287]     ]\n[288]   }\n[289] }\n[290] \n[291] \n[292] @description('An optional Linux virtual machine deployment to act as a jump box.')\n[293] module jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n[294]   name: take('vm-linux-${deployment().name}', 64)\n[295]   scope: spokeResourceGroup\n[296]   params: {\n[297]     location: location\n[298]     tags: tags\n[299]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[300]     vmAdminUsername: vmAdminUsername\n[301]     vmAdminPassword: vmAdminPassword\n[302]     vmSshPublicKey: vmLinuxSshAuthorizedKeys\n[303]     vmSize: vmSize\n[304]     vmVnetName: vnetSpoke.outputs.vnetName\n[305]     vmSubnetName: vmSubnetName\n[306]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[307]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[308]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[309]   }\n[310] }\n[311] \n[312] @description('An optional Windows virtual machine deployment to act as a jump box.')\n[313] module jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n[314]   name: take('vm-windows-${deployment().name}', 64)\n[315]   scope: spokeResourceGroup\n[316]   params: {\n[317]     location: location\n[318]     tags: tags\n[319]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[320]     vmAdminUsername: vmAdminUsername\n[321]     vmAdminPassword: vmAdminPassword\n[322]     vmSize: vmSize\n[323]     vmVnetName: vnetSpoke.outputs.vnetName\n[324]     vmSubnetName: vmSubnetName\n[325]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[326]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[327]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[328]   }\n[329] }\n[330] \n[331] @description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\n[332] module policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n[333]   name: take('policyAssignments-${deployment().name}', 64)\n[334]   scope: spokeResourceGroup\n[335]   params: {\n[336]     location: location   \n[337]     containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n[338]   }\n[339] }\n[340] \n[341] // ------------------\n[342] // OUTPUTS\n[343] // ------------------\n[344] \n[345] resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n[346]   name: vnetSpoke.outputs.vnetName\n[347]   scope: spokeResourceGroup\n[348] \n[349]   resource spokeInfraSubnet 'subnets' existing = {\n[350]     name: spokeInfraSubnetName\n[351]   }\n[352] \n[353]   resource spokePrivateEndpointsSubnet 'subnets' existing = {\n[354]     name: spokePrivateEndpointsSubnetName\n[355]   }\n[356] \n[357]   resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[358]     name: spokeApplicationGatewaySubnetName\n[359]   }\n[360] }\n[361] \n[362] @description('The name of the spoke resource group.')\n[363] output spokeResourceGroupName string = spokeResourceGroup.name\n[364] \n[365] @description('The resource ID of the spoke virtual network.')\n[366] output spokeVNetId string = vnetSpokeCreated.id\n[367] \n[368] @description('The name of the spoke virtual network.')\n[369] output spokeVNetName string = vnetSpokeCreated.name\n[370] \n[371] @description('The resource ID of the spoke infrastructure subnet.')\n[372] output spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n[373] \n[374] @description('The name of the spoke infrastructure subnet.')\n[375] output spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n[376] \n[377] @description('The name of the spoke private endpoints subnet.')\n[378] output spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n[379] \n[380] @description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\n[381] output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n[382] \n[383] @description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\n[384] output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n[385] \n[386] @description('The resource ID of the Azure Log Analytics Workspace.')\n[387] output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmVnetName string\n[11] param vmSubnetName string\n[12] param vmSubnetAddressPrefix string\n[13] param vmNetworkSecurityGroupName string\n[14] param vmNetworkInterfaceName string\n[15] \n[16] param vmAdminUsername string\n[17] \n[18] @secure()\n[19] param vmAdminPassword string\n[20] \n[21] @secure()\n[22] param vmSshPublicKey string\n[23] \n[24] @description('Type of authentication to use on the Virtual Machine. SSH key is recommended.')\n[25] @allowed([\n[26]   'sshPublicKey'\n[27]   'password'\n[28] ])\n[29] param vmAuthenticationType string = 'password'\n[30] \n[31] @description('Optional. The tags to be assigned to the created resources.')\n[32] param tags object = {}\n[33] \n[34] param location string = resourceGroup().location\n[35] \n[36] // ------------------\n[37] // VARIABLES\n[38] // ------------------\n[39] \n[40] var linuxConfiguration = {\n[41]   disablePasswordAuthentication: true\n[42]   ssh: {\n[43]     publicKeys: [\n[44]       {\n[45]         path: '/home/${vmAdminUsername}/.ssh/authorized_keys'\n[46]         keyData: vmSshPublicKey\n[47]       }\n[48]     ]\n[49]   }\n[50] }\n[51] \n[52] // ------------------\n[53] // RESOURCES\n[54] // ------------------\n[55] \n[56] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[57]   name: vmNetworkSecurityGroupName\n[58]   location: location\n[59]   tags: tags\n[60]   properties: {\n[61]     securityRules: []\n[62]   }\n[63] }\n[64] \n[65] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[66]   name: '${vmVnetName}/${vmSubnetName}'\n[67]   properties: {\n[68]     addressPrefix: vmSubnetAddressPrefix\n[69]     networkSecurityGroup: {\n[70]       id: vmNetworkSecurityGroup.id\n[71]     }\n[72]   }\n[73] }\n[74] \n[75] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[76]   name: vmNetworkInterfaceName\n[77]   location: location\n[78]   tags: tags\n[79]   properties: {\n[80]     ipConfigurations: [\n[81]       {\n[82]         name: 'ipconfig1'\n[83]         properties: {\n[84]           subnet: {\n[85]             id: vmSubnet.id\n[86]           }\n[87]           privateIPAllocationMethod: 'Dynamic'\n[88]         }\n[89]       }\n[90]     ]\n[91]   }\n[92] }\n[93] \n[94] resource vm 'Microsoft.Compute/virtualMachines@2021-03-01' = {\n[95]   name: vmName\n[96]   location: location\n[97]   tags: tags\n[98]   properties: {\n[99]     osProfile: {\n[100]       computerName: vmName\n[101]       adminUsername: vmAdminUsername\n[102]       adminPassword: vmAdminPassword\n[103]       linuxConfiguration: ((vmAuthenticationType == 'password') ? null : linuxConfiguration)\n[104]     }\n[105]     hardwareProfile: {\n[106]       vmSize: vmSize\n[107]     }\n[108]     storageProfile: {\n[109]       osDisk: {\n[110]         createOption: 'FromImage'\n[111]         managedDisk: {\n[112]           storageAccountType: 'Standard_LRS'\n[113]         }\n[114]       }\n[115]       imageReference: {\n[116]         publisher: 'Canonical'\n[117]         offer: 'UbuntuServer'\n[118]         sku: '18.04-LTS'\n[119]         version: 'latest'\n[120]       }\n[121]     }\n[122]     networkProfile: {\n[123]       networkInterfaces: [\n[124]         {\n[125]           id: vmNetworkInterface.id\n[126]         }\n[127]       ]\n[128]     }\n[129]   }\n[130] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/windows-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmWindowsOSVersion string = '2016-Datacenter'\n[11] \n[12] param vmVnetName string\n[13] param vmSubnetName string\n[14] param vmSubnetAddressPrefix string\n[15] param vmNetworkSecurityGroupName string\n[16] param vmNetworkInterfaceName string\n[17] \n[18] param vmAdminUsername string\n[19] \n[20] @secure()\n[21] param vmAdminPassword string\n[22] \n[23] @description('Optional. The tags to be assigned to the created resources.')\n[24] param tags object = {}\n[25] \n[26] param location string = resourceGroup().location\n[27] \n[28] // ------------------\n[29] // RESOURCES\n[30] // ------------------\n[31] \n[32] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[33]   name: vmNetworkSecurityGroupName\n[34]   location: location\n[35]   tags: tags\n[36]   properties: {\n[37]     securityRules: []\n[38]   }\n[39] }\n[40] \n[41] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[42]   name: '${vmVnetName}/${vmSubnetName}'\n[43]   properties: {\n[44]     addressPrefix: vmSubnetAddressPrefix\n[45]     networkSecurityGroup: {\n[46]       id: vmNetworkSecurityGroup.id\n[47]     }\n[48]   }\n[49] }\n[50] \n[51] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[52]   name: vmNetworkInterfaceName\n[53]   location: location\n[54]   tags: tags\n[55]   properties: {\n[56]     ipConfigurations: [\n[57]       {\n[58]         name: 'ipconfig1'\n[59]         properties: {\n[60]           subnet: {\n[61]             id: vmSubnet.id\n[62]           }\n[63]           privateIPAllocationMethod: 'Dynamic'\n[64]         }\n[65]       }\n[66]     ]\n[67]   }\n[68] }\n[69] \n[70] resource vm 'Microsoft.Compute/virtualMachines@2021-04-01' =  {\n[71]   name: vmName\n[72]   location: location\n[73]   tags: tags\n[74]   zones: [\n[75]     '1'\n[76]   ]\n[77]   properties: {\n[78]     hardwareProfile: {\n[79]       vmSize: vmSize\n[80]     }\n[81]     storageProfile: {\n[82]       osDisk: {\n[83]         createOption: 'FromImage'\n[84]         managedDisk: {\n[85]           storageAccountType: 'Standard_LRS'\n[86]         }\n[87]       }\n[88]       imageReference: {\n[89]         publisher: 'MicrosoftWindowsServer'\n[90]         offer: 'WindowsServer'\n[91]         sku: vmWindowsOSVersion\n[92]         version: 'latest'\n[93]       }\n[94]     }\n[95]     osProfile: {\n[96]       computerName: vmName\n[97]       adminUsername: vmAdminUsername\n[98]       adminPassword: vmAdminPassword\n[99]     }\n[100]     networkProfile: {\n[101]       networkInterfaces: [\n[102]         {\n[103]           id: vmNetworkInterface.id\n[104]         }\n[105]       ]\n[106]     }\n[107]   }\n[108] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('The location where the resources will be created.')\n[6] param location string\n[7] \n[8] @description('The name of the Container Registry that will be allow-listed by the policy.')\n[9] param containerRegistryName string\n[10] \n[11] var namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n[12] \n[13] // Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\n[14] var builtInPolicies = [  \n[15]   {\n[16]     name: 'authentication-should-be-enabled-on-container-apps'\n[17]     definition: {\n[18]       properties: {\n[19]         displayName: 'Authentication should be enabled on container apps'\n[20]         description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n[21]       }\n[22]     }\n[23]     parameters: {\n[24]       effect: {\n[25]         value: 'AuditIfNotExists'\n[26]       }\n[27]     }\n[28]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n[29]   }\n[30]   {\n[31]     name: 'container-app-environments-should-use-network-injection'\n[32]     definition: {\n[33]       properties: {\n[34]         displayName: 'Container App environments should use network injection'\n[35]         description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n[36]       }\n[37]     }\n[38]     parameters: {\n[39]       effect: {\n[40]         value: 'Audit'\n[41]       }\n[42]     }\n[43]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n[44]   }\n[45]   {\n[46]     name: 'container-app-should-configure-with-volume-mount'\n[47]     definition: {\n[48]       properties: {\n[49]         displayName: 'Container App should configure with volume mount'\n[50]         description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n[51]       }\n[52]     }\n[53]     parameters: {\n[54]       effect: {\n[55]         value: 'Audit'\n[56]       }\n[57]     }\n[58]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n[59]   }\n[60]   {\n[61]     name: 'container-app-should-disable-public-network-access'\n[62]     definition: {\n[63]       properties: {\n[64]         displayName: 'Container Apps environment should disable public network access'\n[65]         description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n[66]       }\n[67]     }\n[68]     parameters: {\n[69]       effect: {\n[70]         value: 'Audit'\n[71]       }\n[72]     }\n[73]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n[74]   }\n[75]   {\n[76]     name: 'container-apps-should-disable-external-network-access'\n[77]     definition: {\n[78]       properties: {\n[79]         displayName: 'Container Apps should disable external network access'\n[80]         description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n[81]       }\n[82]     }\n[83]     parameters: {\n[84]       effect: {\n[85]         value: 'Audit'\n[86]       }\n[87]     }\n[88]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n[89]   }\n[90]   {\n[91]     name: 'containerapps-should-only-be-accessible-over-HTTPS'\n[92]     definition: {\n[93]       properties: {\n[94]         displayName: 'Container Apps should only be accessible over HTTPS'\n[95]         description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n[96]       }\n[97]     }\n[98]     parameters: {\n[99]       effect: {\n[100]         value: 'Audit'\n[101]       }\n[102]     }\n[103]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n[104]   }\n[105]   {\n[106]     name: 'managed-identity-should-be-enabled'\n[107]     definition: {\n[108]       properties: {\n[109]         displayName: 'Managed Identity should be enabled for Container Apps'\n[110]         description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n[111]       }\n[112]     }\n[113]     parameters: {\n[114]       effect: {\n[115]         value: 'Audit'\n[116]       }\n[117]     }\n[118]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n[119]   }\n[120]   \n[121] ]\n[122] \n[123] // credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n[124] // https://github.com/Azure-Samples/aca-azure-policy/tree/main\n[125] var customPolicies = [\n[126]   {\n[127]     name: 'aca-allowed-container-registries'\n[128]     definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n[129]     parameters: {\n[130]       listOfAllowedContainerRegistries: {\n[131]         value: [\n[132]           'mcr.microsoft.com'\n[133]           'docker.io'\n[134]           'ghcr.io'\n[135]           '${containerRegistryName}.azurecr.io'\n[136]         ]\n[137]       }\n[138]       effect: {\n[139]         value: 'Audit'\n[140]       }\n[141]     }\n[142]   }\n[143]   {\n[144]     name: 'aca-replica-count'\n[145]     definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n[146]     parameters: {\n[147]       minReplicas: {\n[148]         value: 0\n[149]       }\n[150]       maxReplicas: {\n[151]         value: 30\n[152]       }\n[153]       effect: {\n[154]         value: 'Audit'\n[155]       }\n[156]     }\n[157]     identity: false\n[158]   }\n[159]   {\n[160]     name: 'aca-no-liveness-probes'\n[161]     definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n[162]     parameters: {\n[163]       effect: {\n[164]         value: 'Audit'\n[165]       }\n[166]     }\n[167]     identity: false\n[168]   }\n[169]   {\n[170]     name: 'aca-no-readiness-probes'\n[171]     definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n[172]     parameters: {\n[173]       effect: {\n[174]         value: 'Audit'\n[175]       }\n[176]     }\n[177]     identity: false\n[178]   }\n[179]   {\n[180]     name: 'aca-no-startup-probes'\n[181]     definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n[182]     parameters: {\n[183]       effect: {\n[184]         value: 'Audit'\n[185]       }\n[186]     }\n[187]     identity: false\n[188]   }\n[189]   {\n[190]     name: 'aca-required-cpu-and-memory'\n[191]     definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n[192]     parameters: {\n[193]       maxCpu: {\n[194]         value: '1.0'\n[195]       }\n[196]       maxMemory: {\n[197]         value: '2.5'\n[198]       }\n[199]       effect: {\n[200]         value: 'Audit'\n[201]       }\n[202]     }\n[203]     identity: false\n[204]   }\n[205]   {\n[206]     name: 'aca-no-monitoring'\n[207]     definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n[208]     parameters: {\n[209]       effect: {\n[210]         value: 'Audit'\n[211]       }\n[212]     }\n[213]     identity: false\n[214]   }\n[215] ]\n[216] \n[217] module builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n[218]   name: 'poAssign_${take(policy.name, 40)}'\n[219]   params: {    \n[220]     location: location\n[221]     policy: policy\n[222]     policyDefinitionId: policy.policyDefinitionId    \n[223]   }  \n[224] }]\n[225] \n[226] \n[227] // resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n[228] //   name: guid(policy.name)\n[229] //   properties: {\n[230] //     description: policy.definition.properties.description\n[231] //     displayName: policy.definition.properties.displayName\n[232] //     metadata: policy.definition.properties.metadata\n[233] //     mode: policy.definition.properties.mode\n[234] //     parameters: policy.definition.properties.parameters\n[235] //     policyType: policy.definition.properties.policyType\n[236] //     policyRule: policy.definition.properties.policyRule\n[237] //   }\n[238] // }]\n[239] \n[240] module policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n[241]   name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n[242]   scope: subscription()\n[243]   params: {\n[244]     policy: policy\n[245]   }\n[246] }]\n[247] \n[248] module customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n[249]   name: 'poAssign_${take(policy.name, 40)}'\n[250]   params: {    \n[251]     location: location\n[252]     policy: policy\n[253]     policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n[254]   } \n[255]   dependsOn: [\n[256]     policyDefinition\n[257]   ] \n[258] }]\n```\n\n"}],"stream":true},"val":"ANNOTATION:\n```\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=62,endLine=62::Hard-coded credentials are a security risk. Use managed identities or Key Vault references for passwords.\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=66,endLine=66::Hard-coded credentials are a security risk. Use managed identities or Key Vault references for SSH keys.\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=19,endLine=20::Resource group names should not be passed as parameters. Consider using a naming convention module.\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=88,endLine=89::Loading external content at runtime can introduce security risks. Ensure the content is from a trusted source.\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=79,endLine=79::Consider using Azure Policy to enforce security best practices. For more information, visit https://learn.microsoft.com/azure/governance/policy/overview.\n```"}
{"sha":"1a033ac7c31740fc09f2fdd30f1c5a35f3bc5bc9a57ac5f656df35601820671a","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Objective\n\nIdentify security issues in SPEC files. \nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param hubResourceGroupName string = ''\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] @description('CIDR of the hub virtual network.')\n[26] param vnetAddressPrefixes array\n[27] \n[28] @description('Enable or disable the creation of the Azure Bastion.')\n[29] param enableBastion bool\n[30] \n[31] @description('CIDR to use for the Azure Bastion subnet.')\n[32] param bastionSubnetAddressPrefix string\n[33] \n[34] @description('CIDR to use for the gatewaySubnet.')\n[35] param gatewaySubnetAddressPrefix string\n[36] \n[37] @description('CIDR to use for the azureFirewallSubnet.')\n[38] param azureFirewallSubnetAddressPrefix string\n[39] \n[40] @description('CIDR to use for the AzureFirewallManagementSubnet, which is required by AzFW Basic.')\n[41] param azureFirewallSubnetManagementAddressPrefix string\n[42] \n[43] @description('CIDR of the spoke infrastructure subnet.')\n[44] param spokeInfraSubnetAddressPrefix string\n[45] \n[46] \n[47] // ------------------\n[48] // VARIABLES\n[49] // ------------------\n[50] \n[51] // This cannot be another value\n[52] var gatewaySubnetName = 'GatewaySubnet'\n[53] \n[54] // This cannot be another value\n[55] var azureFirewallSubnetName = 'AzureFirewallSubnet'\n[56] var AzureFirewallManagementSubnetName = 'AzureFirewallManagementSubnet'\n[57] \n[58] //Subnet definition taking in consideration feature flags\n[59] var defaultSubnets = [\n[60]   {\n[61]     name: gatewaySubnetName\n[62]     properties: {\n[63]       addressPrefix: gatewaySubnetAddressPrefix      \n[64]     }\n[65]   }\n[66]   {\n[67]     name: azureFirewallSubnetName\n[68]     properties: {\n[69]       addressPrefix: azureFirewallSubnetAddressPrefix\n[70]     }\n[71]   }\n[72]   {\n[73]     name: AzureFirewallManagementSubnetName\n[74]     properties: {\n[75]       addressPrefix: azureFirewallSubnetManagementAddressPrefix\n[76]     }\n[77]   }\n[78] ]\n[79] \n[80] // This cannot be another value\n[81] var bastionSubnetName = 'AzureBastionSubnet'\n[82] \n[83] // Append optional bastion subnet, if required\n[84] var vnetSubnets = enableBastion ? concat(defaultSubnets, [\n[85]     {\n[86]       name: bastionSubnetName\n[87]       properties: {\n[88]         addressPrefix: bastionSubnetAddressPrefix\n[89]       }\n[90]     }\n[91]   ]) : defaultSubnets\n[92] \n[93] //used only to override the RG name - because it is created at the subscription level, the naming module cannot be loaded/used\n[94] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[95] var rgHubName = !empty(hubResourceGroupName) ? hubResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-hub-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[96] \n[97] // ------------------\n[98] // RESOURCES\n[99] // ------------------\n[100] \n[101] @description('The hub resource group. This would normally be already provisioned by your platform team.')\n[102] resource hubResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[103]   name: rgHubName\n[104]   location: location\n[105]   tags: tags\n[106] }\n[107] \n[108] @description('The log sink for Azure Diagnostics')\n[109] module hubLogAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[110]   scope: hubResourceGroup\n[111]   name: take('hubLogWs-${uniqueString(hubResourceGroup.id)}', 64)\n[112]   params: {\n[113]     location: location\n[114]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[115]   }\n[116] }\n[117] \n[118] @description('User-configured naming rules')\n[119] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[120]   scope: hubResourceGroup\n[121]   name: take('01-sharedNamingDeployment-${deployment().name}', 64)\n[122]   params: {\n[123]     uniqueId: uniqueString(hubResourceGroup.id)\n[124]     environment: environment\n[125]     workloadName: workloadName\n[126]     location: location\n[127]   }\n[128] }\n[129] \n[130] @description('The virtual network used as the stand-in for the regional hub. This would normally be already provisioned by your platform team.')\n[131] module vnetHub '../../../../shared/bicep/network/vnet.bicep' = {\n[132]   name: take('vnetHub-${deployment().name}', 64)\n[133]   scope: hubResourceGroup\n[134]   params: {\n[135]     name: naming.outputs.resourcesNames.vnetHub\n[136]     location: location\n[137]     subnets: vnetSubnets\n[138]     vnetAddressPrefixes: vnetAddressPrefixes\n[139]     tags: tags\n[140]   }\n[141] }\n[142] \n[143] @description('The Azure Firewall deployment. This would normally be already provisioned by your platform team.')\n[144] module azfw './modules/azureFirewall.bicep' = {\n[145]   scope: hubResourceGroup\n[146]   name: take('afw-${deployment().name}', 64)\n[147]   params: {\n[148]     location: location\n[149]     tags: tags\n[150]     afwVNetName: vnetHub.outputs.vnetName\n[151]     logAnalyticsWorkspaceId: hubLogAnalyticsWorkspace.outputs.logAnalyticsWsId\n[152]     firewallName: naming.outputs.resourcesNames.azureFirewall\n[153]     publicIpName: naming.outputs.resourcesNames.azureFirewallPip\n[154]     spokeInfraSubnetAddressPrefix: spokeInfraSubnetAddressPrefix\n[155]     azureFirewallSubnetManagementAddressPrefix: azureFirewallSubnetManagementAddressPrefix\n[156]   }\n[157] }\n[158] \n[159] @description('An optional Azure Bastion deployment for jump box access. This would normally be already provisioned by your platform team.')\n[160] module bastion './modules/bastion.bicep' = if (enableBastion) {\n[161]   name: take('bastion-${deployment().name}', 64)\n[162]   scope: hubResourceGroup\n[163]   params: {\n[164]     location: location\n[165]     tags: tags\n[166]     bastionName: naming.outputs.resourcesNames.bastion\n[167]     bastionNetworkSecurityGroupName: naming.outputs.resourcesNames.bastionNsg\n[168]     bastionPublicIpName: naming.outputs.resourcesNames.bastionPip\n[169]     bastionSubnetName: bastionSubnetName\n[170]     bastionSubnetAddressPrefix: bastionSubnetAddressPrefix\n[171]     bastionVNetName: vnetHub.outputs.vnetName\n[172]   }\n[173] }\n[174] \n[175] // ------------------\n[176] // OUTPUTS\n[177] // ------------------\n[178] \n[179] @description('The resource ID of hub virtual network.')\n[180] output hubVNetId string = vnetHub.outputs.vnetId\n[181] \n[182] @description('The name of the hub resource group.')\n[183] output resourceGroupName string = hubResourceGroup.name\n[184] \n[185] @description('The private IP address of the Azure Firewall.')\n[186] output networkApplianceIpAddress string = azfw.outputs.afwPrivateIp\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/./modules/azureFirewall.bicep\n[1] targetScope = 'resourceGroup'\n[2] // ------------------\n[3] //    PARAMETERS\n[4] // ------------------\n[5] \n[6] @description('The location where the resources will be created.')\n[7] param location string\n[8] \n[9] @description('The name of the azure firewall to create.')\n[10] param firewallName string\n[11] \n[12] @description('The name for the public ip address of the azure firewall.')\n[13] param publicIpName string\n[14] \n[15] @description('The Name of the virtual network in which afw is created.')\n[16] param afwVNetName string\n[17] \n[18] @description('The log analytics workspace id to which the azure firewall will send logs.')\n[19] param logAnalyticsWorkspaceId string\n[20] \n[21] @description('Optional. The tags to be assigned to the created resources.')\n[22] param tags object = {}\n[23] \n[24] @description('CIDR of the spoke infrastructure subnet.')\n[25] param spokeInfraSubnetAddressPrefix string\n[26] \n[27] param azureFirewallSubnetManagementAddressPrefix string \n[28] \n[29] var applicationRuleCollections = [\n[30]   {\n[31]     name: 'ace-allow-rules'\n[32]     properties: {\n[33]       action: {\n[34]         type: 'allow'\n[35]       }\n[36]       priority: 110\n[37]       rules: [\n[38]         {\n[39]           name: 'ace-general-allow-rules'\n[40]           protocols: [\n[41]             {\n[42]               port: '80'\n[43]               protocolType: 'HTTP'\n[44]             }\n[45]             {\n[46]               port: '443'\n[47]               protocolType: 'HTTPS'\n[48]             }\n[49]           ]\n[50]           sourceAddresses: [\n[51]             spokeInfraSubnetAddressPrefix\n[52]           ]\n[53]           targetFqdns: [\n[54]             'mcr.microsoft.com'\n[55]             '*.data.mcr.microsoft.com'\n[56]             '*.blob.${environment().suffixes.storage}' //NOTE: If you use ACR the endpoint must be added as well.\n[57]           ]\n[58]         }\n[59]         {\n[60]           name: 'ace-acr-and-docker-allow-rules'\n[61]           protocols: [\n[62]             {\n[63]               port: '443'\n[64]               protocolType: 'HTTPS'\n[65]             }\n[66]           ]\n[67]           sourceAddresses: [\n[68]             spokeInfraSubnetAddressPrefix\n[69]           ]\n[70]           targetFqdns: [\n[71]             '*.blob.${environment().suffixes.storage}' \n[72]             'login.microsoft.com'\n[73]             '*.azurecr.io'   //NOTE: for less permisive environment replace wildcard with actual(s) Container Registries\n[74]             'hub.docker.com'\n[75]             'registry-1.docker.io'\n[76]             'production.cloudflare.docker.com'\n[77]           ]\n[78]         }\n[79]         {\n[80]           name: 'ace-managed-identity-allow-rules'\n[81]           protocols: [\n[82]             {\n[83]               port: '443'\n[84]               protocolType: 'HTTPS'\n[85]             }\n[86]           ]\n[87]           sourceAddresses: [\n[88]             spokeInfraSubnetAddressPrefix\n[89]           ]\n[90]           targetFqdns: [\n[91]             '*.identity.azure.net'\n[92]             #disable-next-line no-hardcoded-env-urls\n[93]             'login.microsoftonline.com'\n[94]             #disable-next-line no-hardcoded-env-urls\n[95]             '*.login.microsoftonline.com'\n[96]             '*.login.microsoft.com'\n[97]           ]\n[98]         }\n[99]         {\n[100]           name: 'ace-keyvault-allow-rules'\n[101]           protocols: [\n[102]             {\n[103]               port: '443'\n[104]               protocolType: 'HTTPS'\n[105]             }\n[106]           ]\n[107]           sourceAddresses: [\n[108]             spokeInfraSubnetAddressPrefix\n[109]           ]\n[110]           targetFqdns: [\n[111]             '*${environment().suffixes.keyvaultDns}'  //NOTE: for less permisive environment replace wildcard with actual(s) KeyVault\n[112]             #disable-next-line no-hardcoded-env-urls          \n[113]             'login.microsoft.com'\n[114]           ]\n[115]         }\n[116]       ]\n[117]     }\n[118]   }\n[119]   {\n[120]     name: 'allow_azure_monitor'\n[121]     properties: {\n[122]       action: {\n[123]         type: 'allow'\n[124]       }\n[125]       priority: 120\n[126]       rules: [ \n[127]         {\n[128]           fqdnTags: [ ]\n[129]           targetFqdns: [\n[130]             'dc.applicationinsights.azure.com'\n[131]             'dc.applicationinsights.microsoft.com'\n[132]             'dc.services.visualstudio.com'\n[133]             '*.in.applicationinsights.azure.com'\n[134]             'live.applicationinsights.azure.com'\n[135]             'rt.applicationinsights.microsoft.com'\n[136]             'rt.services.visualstudio.com'\n[137]             '*.livediagnostics.monitor.azure.com'\n[138]             '*.monitoring.azure.com'\n[139]             'agent.azureserviceprofiler.net'\n[140]             '*.agent.azureserviceprofiler.net'\n[141]             '*.monitor.azure.com'\n[142]           ]\n[143]           name: 'allow-azure-monitor'\n[144]           protocols: [               \n[145]             {\n[146]               port: '443'\n[147]               protocolType: 'HTTPS'\n[148]             }\n[149]           ]\n[150]           sourceAddresses: [\n[151]             spokeInfraSubnetAddressPrefix\n[152]           ]\n[153]         }\n[154]       ]\n[155]     }\n[156]   }\n[157]   {\n[158]     name: 'allow_core_dev_fqdn' //NOTE: This rule is optional, and used here only to demonstrate that there are possibly more fqdns that need to be allowed, depending on your scenario\n[159]     properties: {\n[160]       action: {\n[161]         type: 'allow'\n[162]       }\n[163]       priority: 130\n[164]       rules: [ \n[165]         {          \n[166]           name: 'allow-developer-services'\n[167]           fqdnTags: [ ]\n[168]           targetFqdns: [\n[169]             'github.com'\n[170]             '*.github.com'\n[171]             'ghcr.io'\n[172]             '*.ghcr.io'\n[173]             '*.nuget.org'\n[174]             '*.blob.${environment().suffixes.storage}'  // might replace wildcard with specific FQDN\n[175]             '*.table.${environment().suffixes.storage}' // might replace wildcard with specific FQDN\n[176]             '*.servicebus.windows.net'                  // might replace wildcard with specific FQDN\n[177]             'githubusercontent.com'\n[178]             '*.githubusercontent.com'\n[179]             'dev.azure.com'\n[180]             'portal.azure.com'\n[181]             '*.portal.azure.com'\n[182]             '*.portal.azure.net'\n[183]             'appservice.azureedge.net'\n[184]             '*.azurewebsites.net'\n[185]           ]\n[186]           protocols: [               \n[187]             {\n[188]               port: '443'\n[189]               protocolType: 'HTTPS'\n[190]             }\n[191]           ]\n[192]           sourceAddresses: [\n[193]             spokeInfraSubnetAddressPrefix\n[194]           ]\n[195]         }\n[196]          {          \n[197]           name: 'allow-certificate-dependencies'\n[198]           fqdnTags: [ ]\n[199]           targetFqdns: [\n[200]               '*.delivery.mp.microsoft.com'\n[201]             'ctldl.windowsupdate.com'\n[202]             'ocsp.msocsp.com'\n[203]             'oneocsp.microsoft.com'\n[204]             'crl.microsoft.com'\n[205]             'www.microsoft.com'\n[206]             '*.digicert.com'\n[207]             '*.symantec.com'\n[208]             '*.symcb.com'\n[209]             '*.d-trust.net'\n[210]           ]\n[211]           protocols: [  \n[212]             {\n[213]               port: '80'\n[214]               protocolType: 'HTTP'\n[215]             }             \n[216]             {\n[217]               port: '443'\n[218]               protocolType: 'HTTPS'\n[219]             }\n[220]           ]\n[221]           sourceAddresses: [\n[222]             spokeInfraSubnetAddressPrefix\n[223]           ]\n[224]         }\n[225]       ]\n[226]     }\n[227]   }\n[228] ]\n[229] \n[230] var networkRules =  [\n[231]       {\n[232]         name: 'ace-allow-rules'\n[233]         properties: {\n[234]           action: {\n[235]             type: 'allow'\n[236]           }\n[237]           priority: 100\n[238]           // For more  Azure resources (than KeyVault, ACR etc which we use here) you are using with Azure Firewall, \n[239]           // please refer to the service tags documentation: https://learn.microsoft.com/azure/virtual-network/service-tags-overview#available-service-tags\n[240]           rules: [      \n[241]             {              \n[242]               name: 'ace-general-allow-rule'\n[243]               protocols: [\n[244]                 'Any'\n[245]               ]\n[246]               sourceAddresses: [\n[247]                 spokeInfraSubnetAddressPrefix\n[248]               ]\n[249]               destinationAddresses: [\n[250]                 'MicrosoftContainerRegistry'  //For even less permisive environment, you can point to a specific MCR region, i.e. 'MicrosoftContainerRegistry.Westeurope'\n[251]                 'AzureFrontDoor.FirstParty'\n[252]               ]\n[253]               destinationPorts: [                \n[254]                 '443'\n[255]               ]  \n[256]             }\n[257]             {              \n[258]               name: 'ace-acr-allow-rule'\n[259]               protocols: [\n[260]                 'Any'\n[261]               ]\n[262]               sourceAddresses: [\n[263]                 spokeInfraSubnetAddressPrefix\n[264]               ]\n[265]               destinationAddresses: [\n[266]                 'AzureContainerRegistry'  //For even less permisive environment, you can point to a specific ACR region, i.e. 'MicrosoftContainerRegistry.Westeurope'\n[267]                 'AzureActiveDirectory'\n[268]               ]\n[269]               destinationPorts: [                \n[270]                 '443'\n[271]               ]  \n[272]             }\n[273]             {              \n[274]               name: 'ace-keyvault-allow-rule'\n[275]               protocols: [\n[276]                 'Any'\n[277]               ]\n[278]               sourceAddresses: [\n[279]                 spokeInfraSubnetAddressPrefix\n[280]               ]\n[281]               destinationAddresses: [\n[282]                 'AzureKeyVault'  //For even less permisive environment, you can point to a specific keyvault region, i.e. 'MicrosoftContainerRegistry.Westeurope'\n[283]                 'AzureActiveDirectory'\n[284]               ]\n[285]               destinationPorts: [                \n[286]                 '443'\n[287]               ]  \n[288]             }\n[289]             {              \n[290]               name: 'ace-managedIdentity-allow-rule'\n[291]               protocols: [\n[292]                 'Any'\n[293]               ]\n[294]               sourceAddresses: [\n[295]                 spokeInfraSubnetAddressPrefix\n[296]               ]\n[297]               destinationAddresses: [\n[298]                 'AzureActiveDirectory'\n[299]               ]\n[300]               destinationPorts: [                \n[301]                 '443'\n[302]               ]  \n[303]             }\n[304]           ]\n[305]         }\n[306]       }\n[307]     ]\n[308] \n[309] resource hubVnet 'Microsoft.Network/virtualNetworks@2022-11-01' existing = {\n[310]   name: afwVNetName\n[311] }\n[312] \n[313] \n[314] resource fwManagementSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[315]   parent: hubVnet\n[316]   name: 'AzureFirewallManagementSubnet'\n[317]   //name: '${hubVnet.name}/AzureFirewallManagementSubnet'\n[318]   properties: {\n[319]     addressPrefix: azureFirewallSubnetManagementAddressPrefix\n[320]   }\n[321] }\n[322] \n[323] @description('The azure firewall deployment.')\n[324] module afw '../../../../../shared/bicep/azureFirewalls/main.bicep' = {\n[325]   name: 'afw-deployment'\n[326]   params: {\n[327]     tags: tags\n[328]     location: location\n[329]     name: firewallName\n[330]     publicIpName: publicIpName\n[331]     azureSkuTier: 'Basic'\n[332]     vNetId: hubVnet.id\n[333]     additionalPublicIpConfigurations: []\n[334]     applicationRuleCollections: applicationRuleCollections\n[335]     networkRuleCollections: networkRules\n[336]     natRuleCollections: []\n[337]     threatIntelMode: 'Deny'\n[338]     diagnosticWorkspaceId: logAnalyticsWorkspaceId\n[339]     azFwManagementSubnetId: fwManagementSubnet.id\n[340]   }\n[341] }\n[342] \n[343] \n[344] output afwPrivateIp string = afw.outputs.privateIp\n[345] output afwId string = afw.outputs.resourceId\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/./modules/bastion.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The location where the resources will be created.')\n[8] param location string = resourceGroup().location\n[9] \n[10] @description('The name of the bastion host to create.')\n[11] param bastionName string\n[12] \n[13] @description('The name of the virtual network in which bastion subnet is created.')\n[14] param bastionVNetName string\n[15] \n[16] @description('The name of the bastion subnet.')\n[17] param bastionSubnetName string\n[18] \n[19] @description('CIDR of the bastion subnet.')\n[20] param bastionSubnetAddressPrefix string\n[21] \n[22] @description('The name of the network security group to create.')\n[23] param bastionNetworkSecurityGroupName string\n[24] \n[25] @description('The name of the public IP address to create.')\n[26] param bastionPublicIpName string\n[27] \n[28] @description('Optional. The tags to be assigned to the created resources.')\n[29] param tags object = {}\n[30] \n[31] // ------------------\n[32] // RESOURCES\n[33] // ------------------\n[34] \n[35] //TODO: This (randomly) causes 'AzureAsyncOperationWaiting' resource operation completed with terminal provisioning state 'Failed' > AnotherOperationInProgress > Another operation on this or dependent resource is in progress. To retrieve status of the operation use uri\n[36] resource bastionSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[37]   name: '${bastionVNetName}/${bastionSubnetName}'\n[38]   properties: {\n[39]     addressPrefix: bastionSubnetAddressPrefix\n[40]     networkSecurityGroup: {\n[41]       id: bastionNetworkSecurityGroup.id\n[42]     }\n[43]   }\n[44] }\n[45] \n[46] resource bastionPip 'Microsoft.Network/publicIPAddresses@2021-02-01' = {\n[47]   name: bastionPublicIpName\n[48]   location: location\n[49]   tags: tags\n[50]   sku: {\n[51]     name: 'Standard'\n[52]     tier: 'Regional'\n[53]   }\n[54]   properties: {\n[55]     publicIPAllocationMethod: 'Static'\n[56]   }\n[57] }\n[58] \n[59] resource bastion 'Microsoft.Network/bastionHosts@2021-02-01' = {\n[60]   name: bastionName\n[61]   location: location\n[62]   tags: tags\n[63]   properties: {\n[64]     ipConfigurations: [\n[65]       {\n[66]         name: 'ipconf'\n[67]         properties: {\n[68]           publicIPAddress: {\n[69]             id: bastionPip.id\n[70]           }\n[71]           subnet: {\n[72]             id: bastionSubnet.id\n[73]           }\n[74]         }\n[75]       }\n[76]     ]\n[77]   }\n[78]   dependsOn: [\n[79]     bastionNetworkSecurityGroup\n[80]   ]\n[81] }\n[82] \n[83] resource bastionNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[84]   name: bastionNetworkSecurityGroupName\n[85]   location: location\n[86]   tags: tags\n[87]   properties: {\n[88]     securityRules: [\n[89]       {\n[90]         name: 'AllowHttpsInbound'\n[91]         properties: {\n[92]           priority: 120\n[93]           protocol: 'Tcp'\n[94]           destinationPortRange: '443'\n[95]           access: 'Allow'\n[96]           direction: 'Inbound'\n[97]           sourcePortRange: '*'\n[98]           sourceAddressPrefix: 'Internet'\n[99]           destinationAddressPrefix: '*'\n[100]         }\n[101]       }\n[102]       {\n[103]         name: 'AllowGatewayManagerInbound'\n[104]         properties: {\n[105]           priority: 130\n[106]           protocol: 'Tcp'\n[107]           destinationPortRange: '443'\n[108]           access: 'Allow'\n[109]           direction: 'Inbound'\n[110]           sourcePortRange: '*'\n[111]           sourceAddressPrefix: 'GatewayManager'\n[112]           destinationAddressPrefix: '*'\n[113]         }\n[114]       }\n[115]       {\n[116]         name: 'AllowAzureLoadBalancerInbound'\n[117]         properties: {\n[118]           priority: 140\n[119]           protocol: 'Tcp'\n[120]           destinationPortRange: '443'\n[121]           access: 'Allow'\n[122]           direction: 'Inbound'\n[123]           sourcePortRange: '*'\n[124]           sourceAddressPrefix: 'AzureLoadBalancer'\n[125]           destinationAddressPrefix: '*'\n[126]         }\n[127]       }\n[128]       {\n[129]         name: 'AllowBastionHostCommunicationInbound'\n[130]         properties: {\n[131]           priority: 150\n[132]           protocol: '*'\n[133]           destinationPortRanges: [\n[134]             '8080'\n[135]             '5701'\n[136]           ]\n[137]           access: 'Allow'\n[138]           direction: 'Inbound'\n[139]           sourcePortRange: '*'\n[140]           sourceAddressPrefix: 'VirtualNetwork'\n[141]           destinationAddressPrefix: 'VirtualNetwork'\n[142]         }\n[143]       }\n[144]       {\n[145]         name: 'AllowSshRdpOutbound'\n[146]         properties: {\n[147]           priority: 100\n[148]           protocol: '*'\n[149]           destinationPortRanges: [\n[150]             '22'\n[151]             '3389'\n[152]           ]\n[153]           access: 'Allow'\n[154]           direction: 'Outbound'\n[155]           sourcePortRange: '*'\n[156]           sourceAddressPrefix: '*'\n[157]           destinationAddressPrefix: 'VirtualNetwork'\n[158]         }\n[159]       }\n[160]       {\n[161]         name: 'AllowAzureCloudOutbound'\n[162]         properties: {\n[163]           priority: 110\n[164]           protocol: 'Tcp'\n[165]           destinationPortRange: '443'\n[166]           access: 'Allow'\n[167]           direction: 'Outbound'\n[168]           sourcePortRange: '*'\n[169]           sourceAddressPrefix: '*'\n[170]           destinationAddressPrefix: 'AzureCloud'\n[171]         }\n[172]       }\n[173]       {\n[174]         name: 'AllowBastionCommunication'\n[175]         properties: {\n[176]           priority: 120\n[177]           protocol: '*'\n[178]           destinationPortRanges: [\n[179]             '8080'\n[180]             '5701'\n[181]           ]\n[182]           access: 'Allow'\n[183]           direction: 'Outbound'\n[184]           sourcePortRange: '*'\n[185]           sourceAddressPrefix: 'VirtualNetwork'\n[186]           destinationAddressPrefix: 'VirtualNetwork'\n[187]         }\n[188]       }\n[189]       {\n[190]         name: 'AllowGetSessionInformation'\n[191]         properties: {\n[192]           priority: 130\n[193]           protocol: '*'\n[194]           destinationPortRange: '80'\n[195]           access: 'Allow'\n[196]           direction: 'Outbound'\n[197]           sourcePortRange: '*'\n[198]           sourceAddressPrefix: '*'\n[199]           destinationAddressPrefix: 'Internet'\n[200]         }\n[201]       }\n[202]     ]\n[203]   }\n[204] }\n```\n\n"}],"stream":true},"val":"ANNOTATION:\n```\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=28,endLine=29::Azure Bastion should be enabled for secure RDP/SSH access to virtual machines. Consider setting 'enableBastion' to true. [Azure Bastion documentation](https://docs.microsoft.com/en-us/azure/bastion/bastion-overview)\n```\n\nANNOTATION:\n```\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=20,endLine=20::Resource group name should not be optional for clarity and to avoid accidental deployment to incorrect resource groups. Consider requiring 'hubResourceGroupName'. [Resource group best practices](https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming)\n```\n\nANNOTATION:\n```\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=22,endLine=23::Ensure that tags include security and compliance information, such as data classification, environment, and criticality. [Tagging best practices](https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-tagging)\n```\n\nANNOTATION:\n```\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=94,endLine=95::Hardcoded paths to files can lead to issues if the file structure changes. Consider using a parameter or variable to define file paths. [Bicep file path best practices](https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/modules)\n```\n\nANNOTATION:\n```\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=108,endLine=115::Ensure that the Log Analytics Workspace is configured with appropriate data retention policies to comply with security and compliance requirements. [Log Analytics Workspace documentation](https://docs.microsoft.com/en-us/azure/azure-monitor/logs/manage-access)\n```\n\nANNOTATION:\n```\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=143,endLine=157::Review the Azure Firewall deployment to ensure it aligns with the organizational security posture and compliance requirements. [Azure Firewall documentation](https://docs.microsoft.com/en-us/azure/firewall/overview)\n```\n\nANNOTATION:\n```\n::notice file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=159,endLine=173::If Azure Bastion is enabled, ensure that Network Security Group (NSG) rules are appropriately restrictive to prevent unauthorized access. [NSG best practices](https://docs.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview)\n```\n\nThe annotations above are based on the provided Bicep files and best practices for Azure resources. They highlight potential security improvements and considerations for the Azure Landing Zone Accelerator configuration."}
{"sha":"860cc1d4887078f9a2a4515725e26006cb529e861fd073a80989c8af1db76bef","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Objective\n\nIdentify security issues in SPEC files. \nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n-  Do NOT report notice annotations, only error and warning.\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param hubResourceGroupName string = ''\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] @description('CIDR of the hub virtual network.')\n[26] param vnetAddressPrefixes array\n[27] \n[28] @description('Enable or disable the creation of the Azure Bastion.')\n[29] param enableBastion bool\n[30] \n[31] @description('CIDR to use for the Azure Bastion subnet.')\n[32] param bastionSubnetAddressPrefix string\n[33] \n[34] @description('CIDR to use for the gatewaySubnet.')\n[35] param gatewaySubnetAddressPrefix string\n[36] \n[37] @description('CIDR to use for the azureFirewallSubnet.')\n[38] param azureFirewallSubnetAddressPrefix string\n[39] \n[40] @description('CIDR to use for the AzureFirewallManagementSubnet, which is required by AzFW Basic.')\n[41] param azureFirewallSubnetManagementAddressPrefix string\n[42] \n[43] @description('CIDR of the spoke infrastructure subnet.')\n[44] param spokeInfraSubnetAddressPrefix string\n[45] \n[46] \n[47] // ------------------\n[48] // VARIABLES\n[49] // ------------------\n[50] \n[51] // This cannot be another value\n[52] var gatewaySubnetName = 'GatewaySubnet'\n[53] \n[54] // This cannot be another value\n[55] var azureFirewallSubnetName = 'AzureFirewallSubnet'\n[56] var AzureFirewallManagementSubnetName = 'AzureFirewallManagementSubnet'\n[57] \n[58] //Subnet definition taking in consideration feature flags\n[59] var defaultSubnets = [\n[60]   {\n[61]     name: gatewaySubnetName\n[62]     properties: {\n[63]       addressPrefix: gatewaySubnetAddressPrefix      \n[64]     }\n[65]   }\n[66]   {\n[67]     name: azureFirewallSubnetName\n[68]     properties: {\n[69]       addressPrefix: azureFirewallSubnetAddressPrefix\n[70]     }\n[71]   }\n[72]   {\n[73]     name: AzureFirewallManagementSubnetName\n[74]     properties: {\n[75]       addressPrefix: azureFirewallSubnetManagementAddressPrefix\n[76]     }\n[77]   }\n[78] ]\n[79] \n[80] // This cannot be another value\n[81] var bastionSubnetName = 'AzureBastionSubnet'\n[82] \n[83] // Append optional bastion subnet, if required\n[84] var vnetSubnets = enableBastion ? concat(defaultSubnets, [\n[85]     {\n[86]       name: bastionSubnetName\n[87]       properties: {\n[88]         addressPrefix: bastionSubnetAddressPrefix\n[89]       }\n[90]     }\n[91]   ]) : defaultSubnets\n[92] \n[93] //used only to override the RG name - because it is created at the subscription level, the naming module cannot be loaded/used\n[94] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[95] var rgHubName = !empty(hubResourceGroupName) ? hubResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-hub-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[96] \n[97] // ------------------\n[98] // RESOURCES\n[99] // ------------------\n[100] \n[101] @description('The hub resource group. This would normally be already provisioned by your platform team.')\n[102] resource hubResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[103]   name: rgHubName\n[104]   location: location\n[105]   tags: tags\n[106] }\n[107] \n[108] @description('The log sink for Azure Diagnostics')\n[109] module hubLogAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[110]   scope: hubResourceGroup\n[111]   name: take('hubLogWs-${uniqueString(hubResourceGroup.id)}', 64)\n[112]   params: {\n[113]     location: location\n[114]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[115]   }\n[116] }\n[117] \n[118] @description('User-configured naming rules')\n[119] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[120]   scope: hubResourceGroup\n[121]   name: take('01-sharedNamingDeployment-${deployment().name}', 64)\n[122]   params: {\n[123]     uniqueId: uniqueString(hubResourceGroup.id)\n[124]     environment: environment\n[125]     workloadName: workloadName\n[126]     location: location\n[127]   }\n[128] }\n[129] \n[130] @description('The virtual network used as the stand-in for the regional hub. This would normally be already provisioned by your platform team.')\n[131] module vnetHub '../../../../shared/bicep/network/vnet.bicep' = {\n[132]   name: take('vnetHub-${deployment().name}', 64)\n[133]   scope: hubResourceGroup\n[134]   params: {\n[135]     name: naming.outputs.resourcesNames.vnetHub\n[136]     location: location\n[137]     subnets: vnetSubnets\n[138]     vnetAddressPrefixes: vnetAddressPrefixes\n[139]     tags: tags\n[140]   }\n[141] }\n[142] \n[143] @description('The Azure Firewall deployment. This would normally be already provisioned by your platform team.')\n[144] module azfw './modules/azureFirewall.bicep' = {\n[145]   scope: hubResourceGroup\n[146]   name: take('afw-${deployment().name}', 64)\n[147]   params: {\n[148]     location: location\n[149]     tags: tags\n[150]     afwVNetName: vnetHub.outputs.vnetName\n[151]     logAnalyticsWorkspaceId: hubLogAnalyticsWorkspace.outputs.logAnalyticsWsId\n[152]     firewallName: naming.outputs.resourcesNames.azureFirewall\n[153]     publicIpName: naming.outputs.resourcesNames.azureFirewallPip\n[154]     spokeInfraSubnetAddressPrefix: spokeInfraSubnetAddressPrefix\n[155]     azureFirewallSubnetManagementAddressPrefix: azureFirewallSubnetManagementAddressPrefix\n[156]   }\n[157] }\n[158] \n[159] @description('An optional Azure Bastion deployment for jump box access. This would normally be already provisioned by your platform team.')\n[160] module bastion './modules/bastion.bicep' = if (enableBastion) {\n[161]   name: take('bastion-${deployment().name}', 64)\n[162]   scope: hubResourceGroup\n[163]   params: {\n[164]     location: location\n[165]     tags: tags\n[166]     bastionName: naming.outputs.resourcesNames.bastion\n[167]     bastionNetworkSecurityGroupName: naming.outputs.resourcesNames.bastionNsg\n[168]     bastionPublicIpName: naming.outputs.resourcesNames.bastionPip\n[169]     bastionSubnetName: bastionSubnetName\n[170]     bastionSubnetAddressPrefix: bastionSubnetAddressPrefix\n[171]     bastionVNetName: vnetHub.outputs.vnetName\n[172]   }\n[173] }\n[174] \n[175] // ------------------\n[176] // OUTPUTS\n[177] // ------------------\n[178] \n[179] @description('The resource ID of hub virtual network.')\n[180] output hubVNetId string = vnetHub.outputs.vnetId\n[181] \n[182] @description('The name of the hub resource group.')\n[183] output resourceGroupName string = hubResourceGroup.name\n[184] \n[185] @description('The private IP address of the Azure Firewall.')\n[186] output networkApplianceIpAddress string = azfw.outputs.afwPrivateIp\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/./modules/azureFirewall.bicep\n[1] targetScope = 'resourceGroup'\n[2] // ------------------\n[3] //    PARAMETERS\n[4] // ------------------\n[5] \n[6] @description('The location where the resources will be created.')\n[7] param location string\n[8] \n[9] @description('The name of the azure firewall to create.')\n[10] param firewallName string\n[11] \n[12] @description('The name for the public ip address of the azure firewall.')\n[13] param publicIpName string\n[14] \n[15] @description('The Name of the virtual network in which afw is created.')\n[16] param afwVNetName string\n[17] \n[18] @description('The log analytics workspace id to which the azure firewall will send logs.')\n[19] param logAnalyticsWorkspaceId string\n[20] \n[21] @description('Optional. The tags to be assigned to the created resources.')\n[22] param tags object = {}\n[23] \n[24] @description('CIDR of the spoke infrastructure subnet.')\n[25] param spokeInfraSubnetAddressPrefix string\n[26] \n[27] param azureFirewallSubnetManagementAddressPrefix string \n[28] \n[29] var applicationRuleCollections = [\n[30]   {\n[31]     name: 'ace-allow-rules'\n[32]     properties: {\n[33]       action: {\n[34]         type: 'allow'\n[35]       }\n[36]       priority: 110\n[37]       rules: [\n[38]         {\n[39]           name: 'ace-general-allow-rules'\n[40]           protocols: [\n[41]             {\n[42]               port: '80'\n[43]               protocolType: 'HTTP'\n[44]             }\n[45]             {\n[46]               port: '443'\n[47]               protocolType: 'HTTPS'\n[48]             }\n[49]           ]\n[50]           sourceAddresses: [\n[51]             spokeInfraSubnetAddressPrefix\n[52]           ]\n[53]           targetFqdns: [\n[54]             'mcr.microsoft.com'\n[55]             '*.data.mcr.microsoft.com'\n[56]             '*.blob.${environment().suffixes.storage}' //NOTE: If you use ACR the endpoint must be added as well.\n[57]           ]\n[58]         }\n[59]         {\n[60]           name: 'ace-acr-and-docker-allow-rules'\n[61]           protocols: [\n[62]             {\n[63]               port: '443'\n[64]               protocolType: 'HTTPS'\n[65]             }\n[66]           ]\n[67]           sourceAddresses: [\n[68]             spokeInfraSubnetAddressPrefix\n[69]           ]\n[70]           targetFqdns: [\n[71]             '*.blob.${environment().suffixes.storage}' \n[72]             'login.microsoft.com'\n[73]             '*.azurecr.io'   //NOTE: for less permisive environment replace wildcard with actual(s) Container Registries\n[74]             'hub.docker.com'\n[75]             'registry-1.docker.io'\n[76]             'production.cloudflare.docker.com'\n[77]           ]\n[78]         }\n[79]         {\n[80]           name: 'ace-managed-identity-allow-rules'\n[81]           protocols: [\n[82]             {\n[83]               port: '443'\n[84]               protocolType: 'HTTPS'\n[85]             }\n[86]           ]\n[87]           sourceAddresses: [\n[88]             spokeInfraSubnetAddressPrefix\n[89]           ]\n[90]           targetFqdns: [\n[91]             '*.identity.azure.net'\n[92]             #disable-next-line no-hardcoded-env-urls\n[93]             'login.microsoftonline.com'\n[94]             #disable-next-line no-hardcoded-env-urls\n[95]             '*.login.microsoftonline.com'\n[96]             '*.login.microsoft.com'\n[97]           ]\n[98]         }\n[99]         {\n[100]           name: 'ace-keyvault-allow-rules'\n[101]           protocols: [\n[102]             {\n[103]               port: '443'\n[104]               protocolType: 'HTTPS'\n[105]             }\n[106]           ]\n[107]           sourceAddresses: [\n[108]             spokeInfraSubnetAddressPrefix\n[109]           ]\n[110]           targetFqdns: [\n[111]             '*${environment().suffixes.keyvaultDns}'  //NOTE: for less permisive environment replace wildcard with actual(s) KeyVault\n[112]             #disable-next-line no-hardcoded-env-urls          \n[113]             'login.microsoft.com'\n[114]           ]\n[115]         }\n[116]       ]\n[117]     }\n[118]   }\n[119]   {\n[120]     name: 'allow_azure_monitor'\n[121]     properties: {\n[122]       action: {\n[123]         type: 'allow'\n[124]       }\n[125]       priority: 120\n[126]       rules: [ \n[127]         {\n[128]           fqdnTags: [ ]\n[129]           targetFqdns: [\n[130]             'dc.applicationinsights.azure.com'\n[131]             'dc.applicationinsights.microsoft.com'\n[132]             'dc.services.visualstudio.com'\n[133]             '*.in.applicationinsights.azure.com'\n[134]             'live.applicationinsights.azure.com'\n[135]             'rt.applicationinsights.microsoft.com'\n[136]             'rt.services.visualstudio.com'\n[137]             '*.livediagnostics.monitor.azure.com'\n[138]             '*.monitoring.azure.com'\n[139]             'agent.azureserviceprofiler.net'\n[140]             '*.agent.azureserviceprofiler.net'\n[141]             '*.monitor.azure.com'\n[142]           ]\n[143]           name: 'allow-azure-monitor'\n[144]           protocols: [               \n[145]             {\n[146]               port: '443'\n[147]               protocolType: 'HTTPS'\n[148]             }\n[149]           ]\n[150]           sourceAddresses: [\n[151]             spokeInfraSubnetAddressPrefix\n[152]           ]\n[153]         }\n[154]       ]\n[155]     }\n[156]   }\n[157]   {\n[158]     name: 'allow_core_dev_fqdn' //NOTE: This rule is optional, and used here only to demonstrate that there are possibly more fqdns that need to be allowed, depending on your scenario\n[159]     properties: {\n[160]       action: {\n[161]         type: 'allow'\n[162]       }\n[163]       priority: 130\n[164]       rules: [ \n[165]         {          \n[166]           name: 'allow-developer-services'\n[167]           fqdnTags: [ ]\n[168]           targetFqdns: [\n[169]             'github.com'\n[170]             '*.github.com'\n[171]             'ghcr.io'\n[172]             '*.ghcr.io'\n[173]             '*.nuget.org'\n[174]             '*.blob.${environment().suffixes.storage}'  // might replace wildcard with specific FQDN\n[175]             '*.table.${environment().suffixes.storage}' // might replace wildcard with specific FQDN\n[176]             '*.servicebus.windows.net'                  // might replace wildcard with specific FQDN\n[177]             'githubusercontent.com'\n[178]             '*.githubusercontent.com'\n[179]             'dev.azure.com'\n[180]             'portal.azure.com'\n[181]             '*.portal.azure.com'\n[182]             '*.portal.azure.net'\n[183]             'appservice.azureedge.net'\n[184]             '*.azurewebsites.net'\n[185]           ]\n[186]           protocols: [               \n[187]             {\n[188]               port: '443'\n[189]               protocolType: 'HTTPS'\n[190]             }\n[191]           ]\n[192]           sourceAddresses: [\n[193]             spokeInfraSubnetAddressPrefix\n[194]           ]\n[195]         }\n[196]          {          \n[197]           name: 'allow-certificate-dependencies'\n[198]           fqdnTags: [ ]\n[199]           targetFqdns: [\n[200]               '*.delivery.mp.microsoft.com'\n[201]             'ctldl.windowsupdate.com'\n[202]             'ocsp.msocsp.com'\n[203]             'oneocsp.microsoft.com'\n[204]             'crl.microsoft.com'\n[205]             'www.microsoft.com'\n[206]             '*.digicert.com'\n[207]             '*.symantec.com'\n[208]             '*.symcb.com'\n[209]             '*.d-trust.net'\n[210]           ]\n[211]           protocols: [  \n[212]             {\n[213]               port: '80'\n[214]               protocolType: 'HTTP'\n[215]             }             \n[216]             {\n[217]               port: '443'\n[218]               protocolType: 'HTTPS'\n[219]             }\n[220]           ]\n[221]           sourceAddresses: [\n[222]             spokeInfraSubnetAddressPrefix\n[223]           ]\n[224]         }\n[225]       ]\n[226]     }\n[227]   }\n[228] ]\n[229] \n[230] var networkRules =  [\n[231]       {\n[232]         name: 'ace-allow-rules'\n[233]         properties: {\n[234]           action: {\n[235]             type: 'allow'\n[236]           }\n[237]           priority: 100\n[238]           // For more  Azure resources (than KeyVault, ACR etc which we use here) you are using with Azure Firewall, \n[239]           // please refer to the service tags documentation: https://learn.microsoft.com/azure/virtual-network/service-tags-overview#available-service-tags\n[240]           rules: [      \n[241]             {              \n[242]               name: 'ace-general-allow-rule'\n[243]               protocols: [\n[244]                 'Any'\n[245]               ]\n[246]               sourceAddresses: [\n[247]                 spokeInfraSubnetAddressPrefix\n[248]               ]\n[249]               destinationAddresses: [\n[250]                 'MicrosoftContainerRegistry'  //For even less permisive environment, you can point to a specific MCR region, i.e. 'MicrosoftContainerRegistry.Westeurope'\n[251]                 'AzureFrontDoor.FirstParty'\n[252]               ]\n[253]               destinationPorts: [                \n[254]                 '443'\n[255]               ]  \n[256]             }\n[257]             {              \n[258]               name: 'ace-acr-allow-rule'\n[259]               protocols: [\n[260]                 'Any'\n[261]               ]\n[262]               sourceAddresses: [\n[263]                 spokeInfraSubnetAddressPrefix\n[264]               ]\n[265]               destinationAddresses: [\n[266]                 'AzureContainerRegistry'  //For even less permisive environment, you can point to a specific ACR region, i.e. 'MicrosoftContainerRegistry.Westeurope'\n[267]                 'AzureActiveDirectory'\n[268]               ]\n[269]               destinationPorts: [                \n[270]                 '443'\n[271]               ]  \n[272]             }\n[273]             {              \n[274]               name: 'ace-keyvault-allow-rule'\n[275]               protocols: [\n[276]                 'Any'\n[277]               ]\n[278]               sourceAddresses: [\n[279]                 spokeInfraSubnetAddressPrefix\n[280]               ]\n[281]               destinationAddresses: [\n[282]                 'AzureKeyVault'  //For even less permisive environment, you can point to a specific keyvault region, i.e. 'MicrosoftContainerRegistry.Westeurope'\n[283]                 'AzureActiveDirectory'\n[284]               ]\n[285]               destinationPorts: [                \n[286]                 '443'\n[287]               ]  \n[288]             }\n[289]             {              \n[290]               name: 'ace-managedIdentity-allow-rule'\n[291]               protocols: [\n[292]                 'Any'\n[293]               ]\n[294]               sourceAddresses: [\n[295]                 spokeInfraSubnetAddressPrefix\n[296]               ]\n[297]               destinationAddresses: [\n[298]                 'AzureActiveDirectory'\n[299]               ]\n[300]               destinationPorts: [                \n[301]                 '443'\n[302]               ]  \n[303]             }\n[304]           ]\n[305]         }\n[306]       }\n[307]     ]\n[308] \n[309] resource hubVnet 'Microsoft.Network/virtualNetworks@2022-11-01' existing = {\n[310]   name: afwVNetName\n[311] }\n[312] \n[313] \n[314] resource fwManagementSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[315]   parent: hubVnet\n[316]   name: 'AzureFirewallManagementSubnet'\n[317]   //name: '${hubVnet.name}/AzureFirewallManagementSubnet'\n[318]   properties: {\n[319]     addressPrefix: azureFirewallSubnetManagementAddressPrefix\n[320]   }\n[321] }\n[322] \n[323] @description('The azure firewall deployment.')\n[324] module afw '../../../../../shared/bicep/azureFirewalls/main.bicep' = {\n[325]   name: 'afw-deployment'\n[326]   params: {\n[327]     tags: tags\n[328]     location: location\n[329]     name: firewallName\n[330]     publicIpName: publicIpName\n[331]     azureSkuTier: 'Basic'\n[332]     vNetId: hubVnet.id\n[333]     additionalPublicIpConfigurations: []\n[334]     applicationRuleCollections: applicationRuleCollections\n[335]     networkRuleCollections: networkRules\n[336]     natRuleCollections: []\n[337]     threatIntelMode: 'Deny'\n[338]     diagnosticWorkspaceId: logAnalyticsWorkspaceId\n[339]     azFwManagementSubnetId: fwManagementSubnet.id\n[340]   }\n[341] }\n[342] \n[343] \n[344] output afwPrivateIp string = afw.outputs.privateIp\n[345] output afwId string = afw.outputs.resourceId\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/./modules/bastion.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The location where the resources will be created.')\n[8] param location string = resourceGroup().location\n[9] \n[10] @description('The name of the bastion host to create.')\n[11] param bastionName string\n[12] \n[13] @description('The name of the virtual network in which bastion subnet is created.')\n[14] param bastionVNetName string\n[15] \n[16] @description('The name of the bastion subnet.')\n[17] param bastionSubnetName string\n[18] \n[19] @description('CIDR of the bastion subnet.')\n[20] param bastionSubnetAddressPrefix string\n[21] \n[22] @description('The name of the network security group to create.')\n[23] param bastionNetworkSecurityGroupName string\n[24] \n[25] @description('The name of the public IP address to create.')\n[26] param bastionPublicIpName string\n[27] \n[28] @description('Optional. The tags to be assigned to the created resources.')\n[29] param tags object = {}\n[30] \n[31] // ------------------\n[32] // RESOURCES\n[33] // ------------------\n[34] \n[35] //TODO: This (randomly) causes 'AzureAsyncOperationWaiting' resource operation completed with terminal provisioning state 'Failed' > AnotherOperationInProgress > Another operation on this or dependent resource is in progress. To retrieve status of the operation use uri\n[36] resource bastionSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[37]   name: '${bastionVNetName}/${bastionSubnetName}'\n[38]   properties: {\n[39]     addressPrefix: bastionSubnetAddressPrefix\n[40]     networkSecurityGroup: {\n[41]       id: bastionNetworkSecurityGroup.id\n[42]     }\n[43]   }\n[44] }\n[45] \n[46] resource bastionPip 'Microsoft.Network/publicIPAddresses@2021-02-01' = {\n[47]   name: bastionPublicIpName\n[48]   location: location\n[49]   tags: tags\n[50]   sku: {\n[51]     name: 'Standard'\n[52]     tier: 'Regional'\n[53]   }\n[54]   properties: {\n[55]     publicIPAllocationMethod: 'Static'\n[56]   }\n[57] }\n[58] \n[59] resource bastion 'Microsoft.Network/bastionHosts@2021-02-01' = {\n[60]   name: bastionName\n[61]   location: location\n[62]   tags: tags\n[63]   properties: {\n[64]     ipConfigurations: [\n[65]       {\n[66]         name: 'ipconf'\n[67]         properties: {\n[68]           publicIPAddress: {\n[69]             id: bastionPip.id\n[70]           }\n[71]           subnet: {\n[72]             id: bastionSubnet.id\n[73]           }\n[74]         }\n[75]       }\n[76]     ]\n[77]   }\n[78]   dependsOn: [\n[79]     bastionNetworkSecurityGroup\n[80]   ]\n[81] }\n[82] \n[83] resource bastionNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[84]   name: bastionNetworkSecurityGroupName\n[85]   location: location\n[86]   tags: tags\n[87]   properties: {\n[88]     securityRules: [\n[89]       {\n[90]         name: 'AllowHttpsInbound'\n[91]         properties: {\n[92]           priority: 120\n[93]           protocol: 'Tcp'\n[94]           destinationPortRange: '443'\n[95]           access: 'Allow'\n[96]           direction: 'Inbound'\n[97]           sourcePortRange: '*'\n[98]           sourceAddressPrefix: 'Internet'\n[99]           destinationAddressPrefix: '*'\n[100]         }\n[101]       }\n[102]       {\n[103]         name: 'AllowGatewayManagerInbound'\n[104]         properties: {\n[105]           priority: 130\n[106]           protocol: 'Tcp'\n[107]           destinationPortRange: '443'\n[108]           access: 'Allow'\n[109]           direction: 'Inbound'\n[110]           sourcePortRange: '*'\n[111]           sourceAddressPrefix: 'GatewayManager'\n[112]           destinationAddressPrefix: '*'\n[113]         }\n[114]       }\n[115]       {\n[116]         name: 'AllowAzureLoadBalancerInbound'\n[117]         properties: {\n[118]           priority: 140\n[119]           protocol: 'Tcp'\n[120]           destinationPortRange: '443'\n[121]           access: 'Allow'\n[122]           direction: 'Inbound'\n[123]           sourcePortRange: '*'\n[124]           sourceAddressPrefix: 'AzureLoadBalancer'\n[125]           destinationAddressPrefix: '*'\n[126]         }\n[127]       }\n[128]       {\n[129]         name: 'AllowBastionHostCommunicationInbound'\n[130]         properties: {\n[131]           priority: 150\n[132]           protocol: '*'\n[133]           destinationPortRanges: [\n[134]             '8080'\n[135]             '5701'\n[136]           ]\n[137]           access: 'Allow'\n[138]           direction: 'Inbound'\n[139]           sourcePortRange: '*'\n[140]           sourceAddressPrefix: 'VirtualNetwork'\n[141]           destinationAddressPrefix: 'VirtualNetwork'\n[142]         }\n[143]       }\n[144]       {\n[145]         name: 'AllowSshRdpOutbound'\n[146]         properties: {\n[147]           priority: 100\n[148]           protocol: '*'\n[149]           destinationPortRanges: [\n[150]             '22'\n[151]             '3389'\n[152]           ]\n[153]           access: 'Allow'\n[154]           direction: 'Outbound'\n[155]           sourcePortRange: '*'\n[156]           sourceAddressPrefix: '*'\n[157]           destinationAddressPrefix: 'VirtualNetwork'\n[158]         }\n[159]       }\n[160]       {\n[161]         name: 'AllowAzureCloudOutbound'\n[162]         properties: {\n[163]           priority: 110\n[164]           protocol: 'Tcp'\n[165]           destinationPortRange: '443'\n[166]           access: 'Allow'\n[167]           direction: 'Outbound'\n[168]           sourcePortRange: '*'\n[169]           sourceAddressPrefix: '*'\n[170]           destinationAddressPrefix: 'AzureCloud'\n[171]         }\n[172]       }\n[173]       {\n[174]         name: 'AllowBastionCommunication'\n[175]         properties: {\n[176]           priority: 120\n[177]           protocol: '*'\n[178]           destinationPortRanges: [\n[179]             '8080'\n[180]             '5701'\n[181]           ]\n[182]           access: 'Allow'\n[183]           direction: 'Outbound'\n[184]           sourcePortRange: '*'\n[185]           sourceAddressPrefix: 'VirtualNetwork'\n[186]           destinationAddressPrefix: 'VirtualNetwork'\n[187]         }\n[188]       }\n[189]       {\n[190]         name: 'AllowGetSessionInformation'\n[191]         properties: {\n[192]           priority: 130\n[193]           protocol: '*'\n[194]           destinationPortRange: '80'\n[195]           access: 'Allow'\n[196]           direction: 'Outbound'\n[197]           sourcePortRange: '*'\n[198]           sourceAddressPrefix: '*'\n[199]           destinationAddressPrefix: 'Internet'\n[200]         }\n[201]       }\n[202]     ]\n[203]   }\n[204] }\n```\n\n"}],"stream":true},"val":"::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=28,endLine=29::Hardcoded feature flag for Azure Bastion creation may lead to unintentional deployment and increased attack surface. Consider parameterizing this feature to be controlled externally.\n[Microsoft Documentation on Azure Bastion](https://docs.microsoft.com/en-us/azure/bastion/bastion-overview)\n\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=94,endLine=94::Hardcoded path to naming rules could lead to path traversal if manipulated. Validate the path or use a parameter for the file location.\n[Microsoft Documentation on Bicep File Loading](https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/file)\n\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=95,endLine=95::Resource group name generation may expose workload and environment details. Consider using a more generic naming convention.\n[Microsoft Documentation on Naming Conventions](https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming)\n\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=108,endLine=116::Log Analytics Workspace should have restricted access. Ensure proper access controls are in place.\n[Microsoft Documentation on Log Analytics Workspace Access Control](https://docs.microsoft.com/en-us/azure/azure-monitor/logs/manage-access)\n\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=143,endLine=157::Azure Firewall deployment should be reviewed to ensure it adheres to the principle of least privilege and that rules are not overly permissive.\n[Microsoft Documentation on Azure Firewall Best Practices](https://docs.microsoft.com/en-us/azure/firewall/best-practices)\n\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/01-hub/deploy.hub.bicep,line=159,endLine=173::Optional Azure Bastion deployment should be reviewed to ensure it is necessary and properly secured.\n[Microsoft Documentation on Azure Bastion](https://docs.microsoft.com/en-us/azure/bastion/bastion-overview)"}
{"sha":"5c8edf566f1cbaee294c00f5f6a3a985f5b323f9a53900b6d2673da036e2bb26","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Definitions\n### Action\nSomething being done by the SPEC file or its dependencies when used. Understanding the Action requires understanding the purpose of the script and its dependencies which requires deeper analysis than just describing the basic implementation of the name or steps in the script. The Action is the *why* of the script, not the *how*.\n\n### Target\nSpecific Azure service or cloud component that will be impacted by the Action. Example Targets include Application Insights, Application Gateway, Virtual Machines, and GitHub but could even include other clouds or custom components.\n\n### Deployed\nAny cloud resource that is deployed after this file is used that was not present before this file was used. Cloud resources that were already deployed before this file was used are not considered Deployed, and any cloud resources that are *always* deleted after this file is used are not considered Deployed.\n\n## Guidance on Actions\nIt is important to explain *why* the Action is being taken and *what* is being done in your description of the Action. Describing the purpose of the Action requires that you understand the value of the performed step. When you write the description of the Action, you should explain *why* and *what* is being done rather than just describing the implementation. For example, a script that clones a git repo doesn't exist to clone a git repo. It exists to download the source code that does something. Your description of the Action should explain what the script is doing with the source code that it downloads with as much detail as you can infer from the provided file contents.\n\n\n## Task 1\n\nIdentify security issues in SPEC files. \nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n-  Do NOT report notice annotations, only error and warning.\n\n## Task 2\n\n1. Review the Azure file and its dependencies that the user uploads\n2. Perform a very careful analysis of all the file contents that you receive to really understand what is happening\n3. Develop a lengthy list of actions that are being performed by the file and its dependencies. Make sure that you understand what is being done and why it is being done in creating this list using the approach from \"Guidance on Actions\" above.\n4. Double check your list of actions to make sure that you have a complete list of actions and add any that you missed\n5. Organize the actions by the target services or cloud components that are impacted by the actions\n6. Identify any cloud resources that are deployed after this file is used that were not present before this file was used and add them to the \"Deployed\" list. If nothing that you find directly within the provided file content meets this criteria, please leave the list empty.\n7. Generate a YAML file with the results formatted as follow:\n\n```\ntargets:\n  target:\n    name: <target name>\n    source: <path to the file>\n    action: <description of the action>\ndeployments:\n  deployment:\n    name: <deployment name>\n    source: <path to the file>\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created. This should be the same region as the hub.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param spokeResourceGroupName string\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] // Hub\n[26] @description('The resource ID of the existing hub virtual network.')\n[27] param hubVNetId string\n[28] \n[29] // Spoke\n[30] @description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\n[31] param spokeVNetAddressPrefixes array\n[32] \n[33] @description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\n[34] param spokeInfraSubnetName string = 'snet-infra'\n[35] \n[36] @description('CIDR of the spoke infrastructure subnet.')\n[37] param spokeInfraSubnetAddressPrefix string\n[38] \n[39] @description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\n[40] param spokePrivateEndpointsSubnetName string = 'snet-pep'\n[41] \n[42] @description('CIDR of the spoke private endpoints subnet.')\n[43] param spokePrivateEndpointsSubnetAddressPrefix string\n[44] \n[45] @description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\n[46] param spokeApplicationGatewaySubnetName string = 'snet-agw'\n[47] \n[48] @description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\n[49] param spokeApplicationGatewaySubnetAddressPrefix string\n[50] \n[51] @description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\n[52] param networkApplianceIpAddress string\n[53] \n[54] @description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\n[55] param vmSize string\n[56] \n[57] @description('The username to use for the jump box.')\n[58] param vmAdminUsername string\n[59] \n[60] @description('The password to use for the jump box.')\n[61] @secure()\n[62] param vmAdminPassword string\n[63] \n[64] @description('The SSH public key to use for the jump box. Only relevant for Linux.')\n[65] @secure()\n[66] param vmLinuxSshAuthorizedKeys string\n[67] \n[68] @description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n[69] @allowed([ 'linux', 'windows', 'none' ])\n[70] param vmJumpboxOSType string = 'none'\n[71] \n[72] @description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\n[73] param vmSubnetName string = 'snet-jumpbox'\n[74] \n[75] @description('CIDR to use for the jump box subnet.')\n[76] param vmJumpBoxSubnetAddressPrefix string\n[77] \n[78] @description('Optional, default value is true. If true, Azure Policies will be deployed')\n[79] param deployAzurePolicies bool = true\n[80] \n[81] // ------------------\n[82] // VARIABLES\n[83] // ------------------\n[84] \n[85] //Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\n[86] var locationVar = location == 'francecentral' ? 'centralfrance' : location\n[87] \n[88] // load as text (and not as Json) to replace <location> placeholder in the nsg rules\n[89] var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\n[90] var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\n[91] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[92] \n[93] var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[94] var hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n[95] \n[96] @description('The ID of the subscription containing the hub virtual network.')\n[97] var hubSubscriptionId = hubVNetResourceIdTokens[2]\n[98] \n[99] @description('The name of the resource group containing the hub virtual network.')\n[100] var hubResourceGroupName = hubVNetResourceIdTokens[4]\n[101] \n[102] @description('The name of the hub virtual network.')\n[103] var hubVNetName = hubVNetResourceIdTokens[8]\n[104] \n[105] // Subnet definition taking in consideration feature flags\n[106] var defaultSubnets = [\n[107]   {\n[108]     name: spokeInfraSubnetName\n[109]     properties: {\n[110]       addressPrefix: spokeInfraSubnetAddressPrefix\n[111]       networkSecurityGroup: {\n[112]         id: nsgContainerAppsEnvironment.outputs.nsgId\n[113]       }\n[114]       routeTable: {\n[115]         id: egressLockdownUdr.outputs.resourceId\n[116]       }\n[117]       delegations: [\n[118]         {\n[119]           name: 'envdelegation'\n[120]           properties: {\n[121]             serviceName: 'Microsoft.App/environments'\n[122]           }\n[123]         }\n[124]       ]\n[125]     }\n[126]   }\n[127]   {\n[128]     name: spokePrivateEndpointsSubnetName\n[129]     properties: {\n[130]       addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n[131]       networkSecurityGroup: {\n[132]         id: nsgPep.outputs.nsgId\n[133]       }\n[134]     }\n[135]   }\n[136] ]\n[137] \n[138] // Append optional application gateway subnet, if required\n[139] var appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n[140]     {\n[141]       name: spokeApplicationGatewaySubnetName\n[142]       properties: {\n[143]         addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n[144]         networkSecurityGroup: {\n[145]           id: nsgAppGw.outputs.nsgId\n[146]         }\n[147]       }\n[148]     }\n[149]   ]) : defaultSubnets\n[150] \n[151]   //Append optional jumpbox subnet, if required\n[152] var spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n[153]     {\n[154]       name: vmSubnetName\n[155]       properties: {\n[156]         addressPrefix: vmJumpBoxSubnetAddressPrefix\n[157]       }\n[158]     }\n[159]   ]) : appGwAndDefaultSubnets\n[160] \n[161] // ------------------\n[162] // RESOURCES\n[163] // ------------------\n[164] \n[165] \n[166] @description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\n[167] resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[168]   name: rgSpokeName\n[169]   location: location\n[170]   tags: tags\n[171] }\n[172] \n[173] @description('User-configured naming rules')\n[174] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[175]   scope: spokeResourceGroup\n[176]   name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n[177]   params: {\n[178]     uniqueId: uniqueString(spokeResourceGroup.id)\n[179]     environment: environment\n[180]     workloadName: workloadName\n[181]     location: location\n[182]   }\n[183] }\n[184] \n[185] @description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\n[186] module vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n[187]   name: take('vnetSpoke-${deployment().name}', 64)\n[188]   scope: spokeResourceGroup\n[189]   params: {\n[190]     name: naming.outputs.resourcesNames.vnetSpoke\n[191]     location: location\n[192]     tags: tags\n[193]     subnets: spokeSubnets\n[194]     vnetAddressPrefixes: spokeVNetAddressPrefixes\n[195]   }\n[196] }\n[197] \n[198] @description('The log sink for Azure Diagnostics')\n[199] module logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[200]   name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n[201]   scope: spokeResourceGroup\n[202]   params: {\n[203]     location: location\n[204]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[205]   }\n[206] }\n[207] \n[208] @description('Network security group rules for the Container Apps cluster.')\n[209] module nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n[210]   name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n[211]   scope: spokeResourceGroup\n[212]   params: {\n[213]     name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n[214]     location: location\n[215]     tags: tags\n[216]     securityRules: nsgCaeRules.securityRules\n[217]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[218]   }\n[219] }\n[220] \n[221] @description('NSG Rules for the Application Gateway.')\n[222] module nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[223]   name: take('nsgAppGw-${deployment().name}', 64)\n[224]   scope: spokeResourceGroup\n[225]   params: {\n[226]     name: naming.outputs.resourcesNames.applicationGatewayNsg\n[227]     location: location\n[228]     tags: tags\n[229]     securityRules: nsgAppGwRules\n[230]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[231]   }\n[232] }\n[233] \n[234] @description('NSG Rules for the private enpoint subnet.')\n[235] module nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n[236]   name: take('nsgPep-${deployment().name}', 64)\n[237]   scope: spokeResourceGroup\n[238]   params: {\n[239]     name: naming.outputs.resourcesNames.pepNsg\n[240]     location: location\n[241]     tags: tags\n[242]     securityRules: []\n[243]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[244]   }\n[245] }\n[246] \n[247] @description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\n[248] module peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n[249]   name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n[250]   scope: spokeResourceGroup\n[251]   params: {\n[252]     localVnetName: vnetSpoke.outputs.vnetName\n[253]     remoteSubscriptionId: hubSubscriptionId\n[254]     remoteRgName: hubResourceGroupName\n[255]     remoteVnetName: hubVNetName\n[256]   }\n[257] }\n[258] \n[259] @description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\n[260] module peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n[261]   name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n[262]   scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n[263]   params: {\n[264]     localVnetName: hubVNetName\n[265]     remoteSubscriptionId: last(split(subscription().id, '/'))!\n[266]     remoteRgName: spokeResourceGroup.name\n[267]     remoteVnetName: vnetSpoke.outputs.vnetName\n[268]   }\n[269] }\n[270] @description('The Route Table deployment')\n[271] module egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n[272]   name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n[273]   scope: spokeResourceGroup\n[274]   params: {\n[275]     name: naming.outputs.resourcesNames.routeTable\n[276]     location: location\n[277]     tags: tags\n[278]     routes: [\n[279]       {\n[280]         name: 'defaultEgressLockdown'\n[281]         properties: {\n[282]           addressPrefix: '0.0.0.0/0'\n[283]           nextHopType: 'VirtualAppliance'\n[284]           nextHopIpAddress: networkApplianceIpAddress\n[285]         }\n[286]       }\n[287]     ]\n[288]   }\n[289] }\n[290] \n[291] \n[292] @description('An optional Linux virtual machine deployment to act as a jump box.')\n[293] module jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n[294]   name: take('vm-linux-${deployment().name}', 64)\n[295]   scope: spokeResourceGroup\n[296]   params: {\n[297]     location: location\n[298]     tags: tags\n[299]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[300]     vmAdminUsername: vmAdminUsername\n[301]     vmAdminPassword: vmAdminPassword\n[302]     vmSshPublicKey: vmLinuxSshAuthorizedKeys\n[303]     vmSize: vmSize\n[304]     vmVnetName: vnetSpoke.outputs.vnetName\n[305]     vmSubnetName: vmSubnetName\n[306]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[307]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[308]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[309]   }\n[310] }\n[311] \n[312] @description('An optional Windows virtual machine deployment to act as a jump box.')\n[313] module jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n[314]   name: take('vm-windows-${deployment().name}', 64)\n[315]   scope: spokeResourceGroup\n[316]   params: {\n[317]     location: location\n[318]     tags: tags\n[319]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[320]     vmAdminUsername: vmAdminUsername\n[321]     vmAdminPassword: vmAdminPassword\n[322]     vmSize: vmSize\n[323]     vmVnetName: vnetSpoke.outputs.vnetName\n[324]     vmSubnetName: vmSubnetName\n[325]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[326]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[327]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[328]   }\n[329] }\n[330] \n[331] @description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\n[332] module policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n[333]   name: take('policyAssignments-${deployment().name}', 64)\n[334]   scope: spokeResourceGroup\n[335]   params: {\n[336]     location: location   \n[337]     containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n[338]   }\n[339] }\n[340] \n[341] // ------------------\n[342] // OUTPUTS\n[343] // ------------------\n[344] \n[345] resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n[346]   name: vnetSpoke.outputs.vnetName\n[347]   scope: spokeResourceGroup\n[348] \n[349]   resource spokeInfraSubnet 'subnets' existing = {\n[350]     name: spokeInfraSubnetName\n[351]   }\n[352] \n[353]   resource spokePrivateEndpointsSubnet 'subnets' existing = {\n[354]     name: spokePrivateEndpointsSubnetName\n[355]   }\n[356] \n[357]   resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[358]     name: spokeApplicationGatewaySubnetName\n[359]   }\n[360] }\n[361] \n[362] @description('The name of the spoke resource group.')\n[363] output spokeResourceGroupName string = spokeResourceGroup.name\n[364] \n[365] @description('The resource ID of the spoke virtual network.')\n[366] output spokeVNetId string = vnetSpokeCreated.id\n[367] \n[368] @description('The name of the spoke virtual network.')\n[369] output spokeVNetName string = vnetSpokeCreated.name\n[370] \n[371] @description('The resource ID of the spoke infrastructure subnet.')\n[372] output spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n[373] \n[374] @description('The name of the spoke infrastructure subnet.')\n[375] output spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n[376] \n[377] @description('The name of the spoke private endpoints subnet.')\n[378] output spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n[379] \n[380] @description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\n[381] output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n[382] \n[383] @description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\n[384] output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n[385] \n[386] @description('The resource ID of the Azure Log Analytics Workspace.')\n[387] output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmVnetName string\n[11] param vmSubnetName string\n[12] param vmSubnetAddressPrefix string\n[13] param vmNetworkSecurityGroupName string\n[14] param vmNetworkInterfaceName string\n[15] \n[16] param vmAdminUsername string\n[17] \n[18] @secure()\n[19] param vmAdminPassword string\n[20] \n[21] @secure()\n[22] param vmSshPublicKey string\n[23] \n[24] @description('Type of authentication to use on the Virtual Machine. SSH key is recommended.')\n[25] @allowed([\n[26]   'sshPublicKey'\n[27]   'password'\n[28] ])\n[29] param vmAuthenticationType string = 'password'\n[30] \n[31] @description('Optional. The tags to be assigned to the created resources.')\n[32] param tags object = {}\n[33] \n[34] param location string = resourceGroup().location\n[35] \n[36] // ------------------\n[37] // VARIABLES\n[38] // ------------------\n[39] \n[40] var linuxConfiguration = {\n[41]   disablePasswordAuthentication: true\n[42]   ssh: {\n[43]     publicKeys: [\n[44]       {\n[45]         path: '/home/${vmAdminUsername}/.ssh/authorized_keys'\n[46]         keyData: vmSshPublicKey\n[47]       }\n[48]     ]\n[49]   }\n[50] }\n[51] \n[52] // ------------------\n[53] // RESOURCES\n[54] // ------------------\n[55] \n[56] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[57]   name: vmNetworkSecurityGroupName\n[58]   location: location\n[59]   tags: tags\n[60]   properties: {\n[61]     securityRules: []\n[62]   }\n[63] }\n[64] \n[65] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[66]   name: '${vmVnetName}/${vmSubnetName}'\n[67]   properties: {\n[68]     addressPrefix: vmSubnetAddressPrefix\n[69]     networkSecurityGroup: {\n[70]       id: vmNetworkSecurityGroup.id\n[71]     }\n[72]   }\n[73] }\n[74] \n[75] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[76]   name: vmNetworkInterfaceName\n[77]   location: location\n[78]   tags: tags\n[79]   properties: {\n[80]     ipConfigurations: [\n[81]       {\n[82]         name: 'ipconfig1'\n[83]         properties: {\n[84]           subnet: {\n[85]             id: vmSubnet.id\n[86]           }\n[87]           privateIPAllocationMethod: 'Dynamic'\n[88]         }\n[89]       }\n[90]     ]\n[91]   }\n[92] }\n[93] \n[94] resource vm 'Microsoft.Compute/virtualMachines@2021-03-01' = {\n[95]   name: vmName\n[96]   location: location\n[97]   tags: tags\n[98]   properties: {\n[99]     osProfile: {\n[100]       computerName: vmName\n[101]       adminUsername: vmAdminUsername\n[102]       adminPassword: vmAdminPassword\n[103]       linuxConfiguration: ((vmAuthenticationType == 'password') ? null : linuxConfiguration)\n[104]     }\n[105]     hardwareProfile: {\n[106]       vmSize: vmSize\n[107]     }\n[108]     storageProfile: {\n[109]       osDisk: {\n[110]         createOption: 'FromImage'\n[111]         managedDisk: {\n[112]           storageAccountType: 'Standard_LRS'\n[113]         }\n[114]       }\n[115]       imageReference: {\n[116]         publisher: 'Canonical'\n[117]         offer: 'UbuntuServer'\n[118]         sku: '18.04-LTS'\n[119]         version: 'latest'\n[120]       }\n[121]     }\n[122]     networkProfile: {\n[123]       networkInterfaces: [\n[124]         {\n[125]           id: vmNetworkInterface.id\n[126]         }\n[127]       ]\n[128]     }\n[129]   }\n[130] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/windows-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmWindowsOSVersion string = '2016-Datacenter'\n[11] \n[12] param vmVnetName string\n[13] param vmSubnetName string\n[14] param vmSubnetAddressPrefix string\n[15] param vmNetworkSecurityGroupName string\n[16] param vmNetworkInterfaceName string\n[17] \n[18] param vmAdminUsername string\n[19] \n[20] @secure()\n[21] param vmAdminPassword string\n[22] \n[23] @description('Optional. The tags to be assigned to the created resources.')\n[24] param tags object = {}\n[25] \n[26] param location string = resourceGroup().location\n[27] \n[28] // ------------------\n[29] // RESOURCES\n[30] // ------------------\n[31] \n[32] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[33]   name: vmNetworkSecurityGroupName\n[34]   location: location\n[35]   tags: tags\n[36]   properties: {\n[37]     securityRules: []\n[38]   }\n[39] }\n[40] \n[41] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[42]   name: '${vmVnetName}/${vmSubnetName}'\n[43]   properties: {\n[44]     addressPrefix: vmSubnetAddressPrefix\n[45]     networkSecurityGroup: {\n[46]       id: vmNetworkSecurityGroup.id\n[47]     }\n[48]   }\n[49] }\n[50] \n[51] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[52]   name: vmNetworkInterfaceName\n[53]   location: location\n[54]   tags: tags\n[55]   properties: {\n[56]     ipConfigurations: [\n[57]       {\n[58]         name: 'ipconfig1'\n[59]         properties: {\n[60]           subnet: {\n[61]             id: vmSubnet.id\n[62]           }\n[63]           privateIPAllocationMethod: 'Dynamic'\n[64]         }\n[65]       }\n[66]     ]\n[67]   }\n[68] }\n[69] \n[70] resource vm 'Microsoft.Compute/virtualMachines@2021-04-01' =  {\n[71]   name: vmName\n[72]   location: location\n[73]   tags: tags\n[74]   zones: [\n[75]     '1'\n[76]   ]\n[77]   properties: {\n[78]     hardwareProfile: {\n[79]       vmSize: vmSize\n[80]     }\n[81]     storageProfile: {\n[82]       osDisk: {\n[83]         createOption: 'FromImage'\n[84]         managedDisk: {\n[85]           storageAccountType: 'Standard_LRS'\n[86]         }\n[87]       }\n[88]       imageReference: {\n[89]         publisher: 'MicrosoftWindowsServer'\n[90]         offer: 'WindowsServer'\n[91]         sku: vmWindowsOSVersion\n[92]         version: 'latest'\n[93]       }\n[94]     }\n[95]     osProfile: {\n[96]       computerName: vmName\n[97]       adminUsername: vmAdminUsername\n[98]       adminPassword: vmAdminPassword\n[99]     }\n[100]     networkProfile: {\n[101]       networkInterfaces: [\n[102]         {\n[103]           id: vmNetworkInterface.id\n[104]         }\n[105]       ]\n[106]     }\n[107]   }\n[108] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('The location where the resources will be created.')\n[6] param location string\n[7] \n[8] @description('The name of the Container Registry that will be allow-listed by the policy.')\n[9] param containerRegistryName string\n[10] \n[11] var namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n[12] \n[13] // Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\n[14] var builtInPolicies = [  \n[15]   {\n[16]     name: 'authentication-should-be-enabled-on-container-apps'\n[17]     definition: {\n[18]       properties: {\n[19]         displayName: 'Authentication should be enabled on container apps'\n[20]         description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n[21]       }\n[22]     }\n[23]     parameters: {\n[24]       effect: {\n[25]         value: 'AuditIfNotExists'\n[26]       }\n[27]     }\n[28]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n[29]   }\n[30]   {\n[31]     name: 'container-app-environments-should-use-network-injection'\n[32]     definition: {\n[33]       properties: {\n[34]         displayName: 'Container App environments should use network injection'\n[35]         description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n[36]       }\n[37]     }\n[38]     parameters: {\n[39]       effect: {\n[40]         value: 'Audit'\n[41]       }\n[42]     }\n[43]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n[44]   }\n[45]   {\n[46]     name: 'container-app-should-configure-with-volume-mount'\n[47]     definition: {\n[48]       properties: {\n[49]         displayName: 'Container App should configure with volume mount'\n[50]         description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n[51]       }\n[52]     }\n[53]     parameters: {\n[54]       effect: {\n[55]         value: 'Audit'\n[56]       }\n[57]     }\n[58]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n[59]   }\n[60]   {\n[61]     name: 'container-app-should-disable-public-network-access'\n[62]     definition: {\n[63]       properties: {\n[64]         displayName: 'Container Apps environment should disable public network access'\n[65]         description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n[66]       }\n[67]     }\n[68]     parameters: {\n[69]       effect: {\n[70]         value: 'Audit'\n[71]       }\n[72]     }\n[73]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n[74]   }\n[75]   {\n[76]     name: 'container-apps-should-disable-external-network-access'\n[77]     definition: {\n[78]       properties: {\n[79]         displayName: 'Container Apps should disable external network access'\n[80]         description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n[81]       }\n[82]     }\n[83]     parameters: {\n[84]       effect: {\n[85]         value: 'Audit'\n[86]       }\n[87]     }\n[88]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n[89]   }\n[90]   {\n[91]     name: 'containerapps-should-only-be-accessible-over-HTTPS'\n[92]     definition: {\n[93]       properties: {\n[94]         displayName: 'Container Apps should only be accessible over HTTPS'\n[95]         description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n[96]       }\n[97]     }\n[98]     parameters: {\n[99]       effect: {\n[100]         value: 'Audit'\n[101]       }\n[102]     }\n[103]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n[104]   }\n[105]   {\n[106]     name: 'managed-identity-should-be-enabled'\n[107]     definition: {\n[108]       properties: {\n[109]         displayName: 'Managed Identity should be enabled for Container Apps'\n[110]         description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n[111]       }\n[112]     }\n[113]     parameters: {\n[114]       effect: {\n[115]         value: 'Audit'\n[116]       }\n[117]     }\n[118]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n[119]   }\n[120]   \n[121] ]\n[122] \n[123] // credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n[124] // https://github.com/Azure-Samples/aca-azure-policy/tree/main\n[125] var customPolicies = [\n[126]   {\n[127]     name: 'aca-allowed-container-registries'\n[128]     definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n[129]     parameters: {\n[130]       listOfAllowedContainerRegistries: {\n[131]         value: [\n[132]           'mcr.microsoft.com'\n[133]           'docker.io'\n[134]           'ghcr.io'\n[135]           '${containerRegistryName}.azurecr.io'\n[136]         ]\n[137]       }\n[138]       effect: {\n[139]         value: 'Audit'\n[140]       }\n[141]     }\n[142]   }\n[143]   {\n[144]     name: 'aca-replica-count'\n[145]     definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n[146]     parameters: {\n[147]       minReplicas: {\n[148]         value: 0\n[149]       }\n[150]       maxReplicas: {\n[151]         value: 30\n[152]       }\n[153]       effect: {\n[154]         value: 'Audit'\n[155]       }\n[156]     }\n[157]     identity: false\n[158]   }\n[159]   {\n[160]     name: 'aca-no-liveness-probes'\n[161]     definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n[162]     parameters: {\n[163]       effect: {\n[164]         value: 'Audit'\n[165]       }\n[166]     }\n[167]     identity: false\n[168]   }\n[169]   {\n[170]     name: 'aca-no-readiness-probes'\n[171]     definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n[172]     parameters: {\n[173]       effect: {\n[174]         value: 'Audit'\n[175]       }\n[176]     }\n[177]     identity: false\n[178]   }\n[179]   {\n[180]     name: 'aca-no-startup-probes'\n[181]     definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n[182]     parameters: {\n[183]       effect: {\n[184]         value: 'Audit'\n[185]       }\n[186]     }\n[187]     identity: false\n[188]   }\n[189]   {\n[190]     name: 'aca-required-cpu-and-memory'\n[191]     definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n[192]     parameters: {\n[193]       maxCpu: {\n[194]         value: '1.0'\n[195]       }\n[196]       maxMemory: {\n[197]         value: '2.5'\n[198]       }\n[199]       effect: {\n[200]         value: 'Audit'\n[201]       }\n[202]     }\n[203]     identity: false\n[204]   }\n[205]   {\n[206]     name: 'aca-no-monitoring'\n[207]     definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n[208]     parameters: {\n[209]       effect: {\n[210]         value: 'Audit'\n[211]       }\n[212]     }\n[213]     identity: false\n[214]   }\n[215] ]\n[216] \n[217] module builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n[218]   name: 'poAssign_${take(policy.name, 40)}'\n[219]   params: {    \n[220]     location: location\n[221]     policy: policy\n[222]     policyDefinitionId: policy.policyDefinitionId    \n[223]   }  \n[224] }]\n[225] \n[226] \n[227] // resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n[228] //   name: guid(policy.name)\n[229] //   properties: {\n[230] //     description: policy.definition.properties.description\n[231] //     displayName: policy.definition.properties.displayName\n[232] //     metadata: policy.definition.properties.metadata\n[233] //     mode: policy.definition.properties.mode\n[234] //     parameters: policy.definition.properties.parameters\n[235] //     policyType: policy.definition.properties.policyType\n[236] //     policyRule: policy.definition.properties.policyRule\n[237] //   }\n[238] // }]\n[239] \n[240] module policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n[241]   name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n[242]   scope: subscription()\n[243]   params: {\n[244]     policy: policy\n[245]   }\n[246] }]\n[247] \n[248] module customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n[249]   name: 'poAssign_${take(policy.name, 40)}'\n[250]   params: {    \n[251]     location: location\n[252]     policy: policy\n[253]     policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n[254]   } \n[255]   dependsOn: [\n[256]     policyDefinition\n[257]   ] \n[258] }]\n```\n\n"}],"stream":true},"val":"## Task 1: Security Issues in SPEC Files\n\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=62,endLine=62::Hardcoded credentials are a security risk. Use Azure Key Vault for storing secrets securely. [Learn more](https://docs.microsoft.com/azure/key-vault/general/basic-concepts)\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=66,endLine=66::Hardcoded SSH keys are a security risk. Use Azure Key Vault for storing secrets securely. [Learn more](https://docs.microsoft.com/azure/key-vault/general/basic-concepts)\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=19,endLine=19::Resource group names should not be passed as parameters. Consider using a naming convention module or a resource vending mechanism. [Learn more](https://docs.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming)\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=88,endLine=88::Loading external content can be a security risk if the content source is not trusted. Ensure the source is secure and trusted. [Learn more](https://docs.microsoft.com/azure/azure-resource-manager/bicep/external-files)\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=90,endLine=90::Loading external content can be a security risk if the content source is not trusted. Ensure the source is secure and trusted. [Learn more](https://docs.microsoft.com/azure/azure-resource-manager/bicep/external-files)\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=91,endLine=91::Loading external content can be a security risk if the content source is not trusted. Ensure the source is secure and trusted. [Learn more](https://docs.microsoft.com/azure/azure-resource-manager/bicep/external-files)\n\n## Task 2: Analysis and YAML Generation\n\n### Analysis\n\n#### Targets and Actions\n\n- **Azure Resource Group (Spoke)**\n  - **Action**: Provisioning a resource group for deploying spoke resources. This is to logically organize and manage the resources associated with the spoke network.\n  - **Source**: `deploy.spoke.bicep`\n\n- **Azure Virtual Network (Spoke)**\n  - **Action**: Setting up a virtual network within the spoke resource group to host the workload. This is to provide network isolation and routing for the services deployed in the spoke.\n  - **Source**: `deploy.spoke.bicep`\n\n- **Azure Log Analytics Workspace**\n  - **Action**: Creating a workspace for logging and monitoring the resources within the spoke. This is to centralize logging and enable monitoring and analytics for the deployed resources.\n  - **Source**: `deploy.spoke.bicep`\n\n- **Network Security Groups (NSGs)**\n  - **Action**: Defining security rules for subnets within the spoke virtual network. This is to control inbound and outbound traffic to subnets, enhancing the security posture.\n  - **Source**: `deploy.spoke.bicep`\n\n- **Virtual Network Peering**\n  - **Action**: Establishing peering between the spoke and hub virtual networks. This is to enable network connectivity between the two environments for communication and resource access.\n  - **Source**: `deploy.spoke.bicep`\n\n- **Azure Policy Assignments**\n  - **Action**: Assigning built-in and custom policies to the spoke resources. This is to enforce compliance and governance standards across the resources.\n  - **Source**: `deploy.spoke.bicep`\n\n- **Virtual Machines (Jumpbox)**\n  - **Action**: Optionally deploying a jump box VM for secure administrative access to the spoke environment. This provides a controlled access point for management tasks.\n  - **Source**: `deploy.spoke.bicep`\n\n#### Deployed Resources\n\n- Azure Resource Group (Spoke)\n- Azure Virtual Network (Spoke)\n- Subnets within the Spoke Virtual Network\n- Network Security Groups (NSGs) for subnets\n- Azure Log Analytics Workspace\n- Virtual Network Peering between Spoke and Hub\n- Azure Policy Assignments\n- Virtual Machines (Jumpbox, if configured)\n\n### YAML Generation\n\n```yaml\ntargets:\n  - target:\n      name: \"Azure Resource Group (Spoke)\"\n      source: \"deploy.spoke.bicep\"\n      action: \"Provisioning a resource group for deploying spoke resources to organize and manage associated resources.\"\n  - target:\n      name: \"Azure Virtual Network (Spoke)\"\n      source: \"deploy.spoke.bicep\"\n      action: \"Setting up a virtual network within the spoke resource group to host the workload and provide network isolation.\"\n  - target:\n      name: \"Azure Log Analytics Workspace\"\n      source: \"deploy.spoke.bicep\"\n      action: \"Creating a workspace for logging and monitoring the resources within the spoke for centralized logging and analytics.\"\n  - target:\n      name: \"Network Security Groups (NSGs)\"\n      source: \"deploy.spoke.bicep\"\n      action: \"Defining security rules for subnets within the spoke virtual network to control traffic and enhance security.\"\n  - target:\n      name: \"Virtual Network Peering\"\n      source: \"deploy.spoke.bicep\"\n      action: \"Establishing peering between the spoke and hub virtual networks for network connectivity and resource access.\"\n  - target:\n      name: \"Azure Policy Assignments\"\n      source: \"deploy.spoke.bicep\"\n      action: \"Assigning built-in and custom policies to the spoke resources to enforce compliance and governance standards.\"\n  - target:\n      name: \"Virtual Machines (Jumpbox)\"\n      source: \"deploy.spoke.bicep\"\n      action: \"Optionally deploying a jump box VM for secure administrative access to the spoke environment.\"\ndeployments:\n  - deployment:\n      name: \"Azure Resource Group (Spoke)\"\n      source: \"deploy.spoke.bicep\"\n  - deployment:\n      name: \"Azure Virtual Network (Spoke)\"\n      source: \"deploy.spoke.bicep\"\n  - deployment:\n      name: \"Subnets within the Spoke Virtual Network\"\n      source: \"deploy.spoke.bicep\"\n  - deployment:\n      name: \"Network Security Groups (NSGs) for subnets\"\n      source: \"deploy.spoke.bicep\"\n  - deployment:\n      name: \"Azure Log Analytics Workspace\"\n      source: \"deploy.spoke.bicep\"\n  - deployment:\n      name: \"Virtual Network Peering between Spoke and Hub\"\n      source: \"deploy.spoke.bicep\"\n  - deployment:\n      name: \"Azure Policy Assignments\"\n      source: \"deploy.spoke.bicep\"\n  - deployment:\n      name: \"Virtual Machines (Jumpbox, if configured)\"\n      source: \"deploy.spoke.bicep\"\n```"}
{"sha":"dd95eb06a98f62bfa50eb8511de4a0e1fc41b29e65d2311e3ee9e597f0f348b9","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Definitions\n### Action\nSomething being done by the SPECS file or its dependencies when used. Understanding the Action requires understanding the purpose of the script and its dependencies which requires deeper analysis than just describing the basic implementation of the name or steps in the script. The Action is the *why* of the script, not the *how*.\n\n### Target\nSpecific Azure service or cloud component that will be impacted by the Action. Example Targets include Application Insights, Application Gateway, Virtual Machines, and GitHub but could even include other clouds or custom components.\n\n### Deployed\nAny cloud resource that is deployed after this file is used that was not present before this file was used. Cloud resources that were already deployed before this file was used are not considered Deployed, and any cloud resources that are *always* deleted after this file is used are not considered Deployed.\n\n## Guidance on Actions\nIt is important to explain *why* the Action is being taken and *what* is being done in your description of the Action. Describing the purpose of the Action requires that you understand the value of the performed step. When you write the description of the Action, you should explain *why* and *what* is being done rather than just describing the implementation. For example, a script that clones a git repo doesn't exist to clone a git repo. It exists to download the source code that does something. Your description of the Action should explain what the script is doing with the source code that it downloads with as much detail as you can infer from the provided file contents.\n\n\n## Task 1\n\nIdentify security issues in SPECS files. Examine each SPECS file carefully.\nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n-  Do NOT report notice annotations, only error and warning.\n\n## Task 2\n\n1. Review the SPECS files and its dependencies that the user uploads\n2. Perform a very careful analysis of all the file contents that you receive to really understand what is happening\n3. Develop a lengthy list of actions that are being performed by the file and its dependencies. Make sure that you understand what is being done and why it is being done in creating this list using the approach from \"Guidance on Actions\" above.\n4. Double check your list of actions to make sure that you have a complete list of actions and add any that you missed\n5. Organize the actions by the target services or cloud components that are impacted by the actions\n6. Identify any cloud resources that are deployed after this file is used that were not present before this file was used and add them to the \"Deployed\" list. If nothing that you find directly within the provided file content meets this criteria, please leave the list empty.\n7. Generate a JSON file with the results following the JSON schema below:\n\n```\n{\"type\":\"array\",\"description\":\"An array of targets\",\"items\":{\"description\":\"A target that is impacted by the actions in the file\",\"type\":\"object\",\"properties\":{\"name\":{\"description\":\"Identifier of the target\",\"type\":\"string\"},\"source\":{\"description\":\"Path of the file defining the target\",\"type\":\"string\"},\"action\":{\"description\":\"What is being done on the cloud resource\",\"type\":\"string\"}}}}\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created. This should be the same region as the hub.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param spokeResourceGroupName string\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] // Hub\n[26] @description('The resource ID of the existing hub virtual network.')\n[27] param hubVNetId string\n[28] \n[29] // Spoke\n[30] @description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\n[31] param spokeVNetAddressPrefixes array\n[32] \n[33] @description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\n[34] param spokeInfraSubnetName string = 'snet-infra'\n[35] \n[36] @description('CIDR of the spoke infrastructure subnet.')\n[37] param spokeInfraSubnetAddressPrefix string\n[38] \n[39] @description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\n[40] param spokePrivateEndpointsSubnetName string = 'snet-pep'\n[41] \n[42] @description('CIDR of the spoke private endpoints subnet.')\n[43] param spokePrivateEndpointsSubnetAddressPrefix string\n[44] \n[45] @description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\n[46] param spokeApplicationGatewaySubnetName string = 'snet-agw'\n[47] \n[48] @description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\n[49] param spokeApplicationGatewaySubnetAddressPrefix string\n[50] \n[51] @description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\n[52] param networkApplianceIpAddress string\n[53] \n[54] @description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\n[55] param vmSize string\n[56] \n[57] @description('The username to use for the jump box.')\n[58] param vmAdminUsername string\n[59] \n[60] @description('The password to use for the jump box.')\n[61] @secure()\n[62] param vmAdminPassword string\n[63] \n[64] @description('The SSH public key to use for the jump box. Only relevant for Linux.')\n[65] @secure()\n[66] param vmLinuxSshAuthorizedKeys string\n[67] \n[68] @description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n[69] @allowed([ 'linux', 'windows', 'none' ])\n[70] param vmJumpboxOSType string = 'none'\n[71] \n[72] @description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\n[73] param vmSubnetName string = 'snet-jumpbox'\n[74] \n[75] @description('CIDR to use for the jump box subnet.')\n[76] param vmJumpBoxSubnetAddressPrefix string\n[77] \n[78] @description('Optional, default value is true. If true, Azure Policies will be deployed')\n[79] param deployAzurePolicies bool = true\n[80] \n[81] // ------------------\n[82] // VARIABLES\n[83] // ------------------\n[84] \n[85] //Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\n[86] var locationVar = location == 'francecentral' ? 'centralfrance' : location\n[87] \n[88] // load as text (and not as Json) to replace <location> placeholder in the nsg rules\n[89] var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\n[90] var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\n[91] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[92] \n[93] var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[94] var hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n[95] \n[96] @description('The ID of the subscription containing the hub virtual network.')\n[97] var hubSubscriptionId = hubVNetResourceIdTokens[2]\n[98] \n[99] @description('The name of the resource group containing the hub virtual network.')\n[100] var hubResourceGroupName = hubVNetResourceIdTokens[4]\n[101] \n[102] @description('The name of the hub virtual network.')\n[103] var hubVNetName = hubVNetResourceIdTokens[8]\n[104] \n[105] // Subnet definition taking in consideration feature flags\n[106] var defaultSubnets = [\n[107]   {\n[108]     name: spokeInfraSubnetName\n[109]     properties: {\n[110]       addressPrefix: spokeInfraSubnetAddressPrefix\n[111]       networkSecurityGroup: {\n[112]         id: nsgContainerAppsEnvironment.outputs.nsgId\n[113]       }\n[114]       routeTable: {\n[115]         id: egressLockdownUdr.outputs.resourceId\n[116]       }\n[117]       delegations: [\n[118]         {\n[119]           name: 'envdelegation'\n[120]           properties: {\n[121]             serviceName: 'Microsoft.App/environments'\n[122]           }\n[123]         }\n[124]       ]\n[125]     }\n[126]   }\n[127]   {\n[128]     name: spokePrivateEndpointsSubnetName\n[129]     properties: {\n[130]       addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n[131]       networkSecurityGroup: {\n[132]         id: nsgPep.outputs.nsgId\n[133]       }\n[134]     }\n[135]   }\n[136] ]\n[137] \n[138] // Append optional application gateway subnet, if required\n[139] var appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n[140]     {\n[141]       name: spokeApplicationGatewaySubnetName\n[142]       properties: {\n[143]         addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n[144]         networkSecurityGroup: {\n[145]           id: nsgAppGw.outputs.nsgId\n[146]         }\n[147]       }\n[148]     }\n[149]   ]) : defaultSubnets\n[150] \n[151]   //Append optional jumpbox subnet, if required\n[152] var spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n[153]     {\n[154]       name: vmSubnetName\n[155]       properties: {\n[156]         addressPrefix: vmJumpBoxSubnetAddressPrefix\n[157]       }\n[158]     }\n[159]   ]) : appGwAndDefaultSubnets\n[160] \n[161] // ------------------\n[162] // RESOURCES\n[163] // ------------------\n[164] \n[165] \n[166] @description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\n[167] resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[168]   name: rgSpokeName\n[169]   location: location\n[170]   tags: tags\n[171] }\n[172] \n[173] @description('User-configured naming rules')\n[174] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[175]   scope: spokeResourceGroup\n[176]   name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n[177]   params: {\n[178]     uniqueId: uniqueString(spokeResourceGroup.id)\n[179]     environment: environment\n[180]     workloadName: workloadName\n[181]     location: location\n[182]   }\n[183] }\n[184] \n[185] @description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\n[186] module vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n[187]   name: take('vnetSpoke-${deployment().name}', 64)\n[188]   scope: spokeResourceGroup\n[189]   params: {\n[190]     name: naming.outputs.resourcesNames.vnetSpoke\n[191]     location: location\n[192]     tags: tags\n[193]     subnets: spokeSubnets\n[194]     vnetAddressPrefixes: spokeVNetAddressPrefixes\n[195]   }\n[196] }\n[197] \n[198] @description('The log sink for Azure Diagnostics')\n[199] module logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[200]   name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n[201]   scope: spokeResourceGroup\n[202]   params: {\n[203]     location: location\n[204]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[205]   }\n[206] }\n[207] \n[208] @description('Network security group rules for the Container Apps cluster.')\n[209] module nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n[210]   name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n[211]   scope: spokeResourceGroup\n[212]   params: {\n[213]     name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n[214]     location: location\n[215]     tags: tags\n[216]     securityRules: nsgCaeRules.securityRules\n[217]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[218]   }\n[219] }\n[220] \n[221] @description('NSG Rules for the Application Gateway.')\n[222] module nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[223]   name: take('nsgAppGw-${deployment().name}', 64)\n[224]   scope: spokeResourceGroup\n[225]   params: {\n[226]     name: naming.outputs.resourcesNames.applicationGatewayNsg\n[227]     location: location\n[228]     tags: tags\n[229]     securityRules: nsgAppGwRules\n[230]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[231]   }\n[232] }\n[233] \n[234] @description('NSG Rules for the private enpoint subnet.')\n[235] module nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n[236]   name: take('nsgPep-${deployment().name}', 64)\n[237]   scope: spokeResourceGroup\n[238]   params: {\n[239]     name: naming.outputs.resourcesNames.pepNsg\n[240]     location: location\n[241]     tags: tags\n[242]     securityRules: []\n[243]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[244]   }\n[245] }\n[246] \n[247] @description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\n[248] module peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n[249]   name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n[250]   scope: spokeResourceGroup\n[251]   params: {\n[252]     localVnetName: vnetSpoke.outputs.vnetName\n[253]     remoteSubscriptionId: hubSubscriptionId\n[254]     remoteRgName: hubResourceGroupName\n[255]     remoteVnetName: hubVNetName\n[256]   }\n[257] }\n[258] \n[259] @description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\n[260] module peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n[261]   name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n[262]   scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n[263]   params: {\n[264]     localVnetName: hubVNetName\n[265]     remoteSubscriptionId: last(split(subscription().id, '/'))!\n[266]     remoteRgName: spokeResourceGroup.name\n[267]     remoteVnetName: vnetSpoke.outputs.vnetName\n[268]   }\n[269] }\n[270] @description('The Route Table deployment')\n[271] module egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n[272]   name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n[273]   scope: spokeResourceGroup\n[274]   params: {\n[275]     name: naming.outputs.resourcesNames.routeTable\n[276]     location: location\n[277]     tags: tags\n[278]     routes: [\n[279]       {\n[280]         name: 'defaultEgressLockdown'\n[281]         properties: {\n[282]           addressPrefix: '0.0.0.0/0'\n[283]           nextHopType: 'VirtualAppliance'\n[284]           nextHopIpAddress: networkApplianceIpAddress\n[285]         }\n[286]       }\n[287]     ]\n[288]   }\n[289] }\n[290] \n[291] \n[292] @description('An optional Linux virtual machine deployment to act as a jump box.')\n[293] module jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n[294]   name: take('vm-linux-${deployment().name}', 64)\n[295]   scope: spokeResourceGroup\n[296]   params: {\n[297]     location: location\n[298]     tags: tags\n[299]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[300]     vmAdminUsername: vmAdminUsername\n[301]     vmAdminPassword: vmAdminPassword\n[302]     vmSshPublicKey: vmLinuxSshAuthorizedKeys\n[303]     vmSize: vmSize\n[304]     vmVnetName: vnetSpoke.outputs.vnetName\n[305]     vmSubnetName: vmSubnetName\n[306]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[307]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[308]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[309]   }\n[310] }\n[311] \n[312] @description('An optional Windows virtual machine deployment to act as a jump box.')\n[313] module jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n[314]   name: take('vm-windows-${deployment().name}', 64)\n[315]   scope: spokeResourceGroup\n[316]   params: {\n[317]     location: location\n[318]     tags: tags\n[319]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[320]     vmAdminUsername: vmAdminUsername\n[321]     vmAdminPassword: vmAdminPassword\n[322]     vmSize: vmSize\n[323]     vmVnetName: vnetSpoke.outputs.vnetName\n[324]     vmSubnetName: vmSubnetName\n[325]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[326]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[327]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[328]   }\n[329] }\n[330] \n[331] @description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\n[332] module policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n[333]   name: take('policyAssignments-${deployment().name}', 64)\n[334]   scope: spokeResourceGroup\n[335]   params: {\n[336]     location: location   \n[337]     containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n[338]   }\n[339] }\n[340] \n[341] // ------------------\n[342] // OUTPUTS\n[343] // ------------------\n[344] \n[345] resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n[346]   name: vnetSpoke.outputs.vnetName\n[347]   scope: spokeResourceGroup\n[348] \n[349]   resource spokeInfraSubnet 'subnets' existing = {\n[350]     name: spokeInfraSubnetName\n[351]   }\n[352] \n[353]   resource spokePrivateEndpointsSubnet 'subnets' existing = {\n[354]     name: spokePrivateEndpointsSubnetName\n[355]   }\n[356] \n[357]   resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[358]     name: spokeApplicationGatewaySubnetName\n[359]   }\n[360] }\n[361] \n[362] @description('The name of the spoke resource group.')\n[363] output spokeResourceGroupName string = spokeResourceGroup.name\n[364] \n[365] @description('The resource ID of the spoke virtual network.')\n[366] output spokeVNetId string = vnetSpokeCreated.id\n[367] \n[368] @description('The name of the spoke virtual network.')\n[369] output spokeVNetName string = vnetSpokeCreated.name\n[370] \n[371] @description('The resource ID of the spoke infrastructure subnet.')\n[372] output spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n[373] \n[374] @description('The name of the spoke infrastructure subnet.')\n[375] output spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n[376] \n[377] @description('The name of the spoke private endpoints subnet.')\n[378] output spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n[379] \n[380] @description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\n[381] output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n[382] \n[383] @description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\n[384] output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n[385] \n[386] @description('The resource ID of the Azure Log Analytics Workspace.')\n[387] output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmVnetName string\n[11] param vmSubnetName string\n[12] param vmSubnetAddressPrefix string\n[13] param vmNetworkSecurityGroupName string\n[14] param vmNetworkInterfaceName string\n[15] \n[16] param vmAdminUsername string\n[17] \n[18] @secure()\n[19] param vmAdminPassword string\n[20] \n[21] @secure()\n[22] param vmSshPublicKey string\n[23] \n[24] @description('Type of authentication to use on the Virtual Machine. SSH key is recommended.')\n[25] @allowed([\n[26]   'sshPublicKey'\n[27]   'password'\n[28] ])\n[29] param vmAuthenticationType string = 'password'\n[30] \n[31] @description('Optional. The tags to be assigned to the created resources.')\n[32] param tags object = {}\n[33] \n[34] param location string = resourceGroup().location\n[35] \n[36] // ------------------\n[37] // VARIABLES\n[38] // ------------------\n[39] \n[40] var linuxConfiguration = {\n[41]   disablePasswordAuthentication: true\n[42]   ssh: {\n[43]     publicKeys: [\n[44]       {\n[45]         path: '/home/${vmAdminUsername}/.ssh/authorized_keys'\n[46]         keyData: vmSshPublicKey\n[47]       }\n[48]     ]\n[49]   }\n[50] }\n[51] \n[52] // ------------------\n[53] // RESOURCES\n[54] // ------------------\n[55] \n[56] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[57]   name: vmNetworkSecurityGroupName\n[58]   location: location\n[59]   tags: tags\n[60]   properties: {\n[61]     securityRules: []\n[62]   }\n[63] }\n[64] \n[65] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[66]   name: '${vmVnetName}/${vmSubnetName}'\n[67]   properties: {\n[68]     addressPrefix: vmSubnetAddressPrefix\n[69]     networkSecurityGroup: {\n[70]       id: vmNetworkSecurityGroup.id\n[71]     }\n[72]   }\n[73] }\n[74] \n[75] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[76]   name: vmNetworkInterfaceName\n[77]   location: location\n[78]   tags: tags\n[79]   properties: {\n[80]     ipConfigurations: [\n[81]       {\n[82]         name: 'ipconfig1'\n[83]         properties: {\n[84]           subnet: {\n[85]             id: vmSubnet.id\n[86]           }\n[87]           privateIPAllocationMethod: 'Dynamic'\n[88]         }\n[89]       }\n[90]     ]\n[91]   }\n[92] }\n[93] \n[94] resource vm 'Microsoft.Compute/virtualMachines@2021-03-01' = {\n[95]   name: vmName\n[96]   location: location\n[97]   tags: tags\n[98]   properties: {\n[99]     osProfile: {\n[100]       computerName: vmName\n[101]       adminUsername: vmAdminUsername\n[102]       adminPassword: vmAdminPassword\n[103]       linuxConfiguration: ((vmAuthenticationType == 'password') ? null : linuxConfiguration)\n[104]     }\n[105]     hardwareProfile: {\n[106]       vmSize: vmSize\n[107]     }\n[108]     storageProfile: {\n[109]       osDisk: {\n[110]         createOption: 'FromImage'\n[111]         managedDisk: {\n[112]           storageAccountType: 'Standard_LRS'\n[113]         }\n[114]       }\n[115]       imageReference: {\n[116]         publisher: 'Canonical'\n[117]         offer: 'UbuntuServer'\n[118]         sku: '18.04-LTS'\n[119]         version: 'latest'\n[120]       }\n[121]     }\n[122]     networkProfile: {\n[123]       networkInterfaces: [\n[124]         {\n[125]           id: vmNetworkInterface.id\n[126]         }\n[127]       ]\n[128]     }\n[129]   }\n[130] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/windows-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmWindowsOSVersion string = '2016-Datacenter'\n[11] \n[12] param vmVnetName string\n[13] param vmSubnetName string\n[14] param vmSubnetAddressPrefix string\n[15] param vmNetworkSecurityGroupName string\n[16] param vmNetworkInterfaceName string\n[17] \n[18] param vmAdminUsername string\n[19] \n[20] @secure()\n[21] param vmAdminPassword string\n[22] \n[23] @description('Optional. The tags to be assigned to the created resources.')\n[24] param tags object = {}\n[25] \n[26] param location string = resourceGroup().location\n[27] \n[28] // ------------------\n[29] // RESOURCES\n[30] // ------------------\n[31] \n[32] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[33]   name: vmNetworkSecurityGroupName\n[34]   location: location\n[35]   tags: tags\n[36]   properties: {\n[37]     securityRules: []\n[38]   }\n[39] }\n[40] \n[41] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[42]   name: '${vmVnetName}/${vmSubnetName}'\n[43]   properties: {\n[44]     addressPrefix: vmSubnetAddressPrefix\n[45]     networkSecurityGroup: {\n[46]       id: vmNetworkSecurityGroup.id\n[47]     }\n[48]   }\n[49] }\n[50] \n[51] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[52]   name: vmNetworkInterfaceName\n[53]   location: location\n[54]   tags: tags\n[55]   properties: {\n[56]     ipConfigurations: [\n[57]       {\n[58]         name: 'ipconfig1'\n[59]         properties: {\n[60]           subnet: {\n[61]             id: vmSubnet.id\n[62]           }\n[63]           privateIPAllocationMethod: 'Dynamic'\n[64]         }\n[65]       }\n[66]     ]\n[67]   }\n[68] }\n[69] \n[70] resource vm 'Microsoft.Compute/virtualMachines@2021-04-01' =  {\n[71]   name: vmName\n[72]   location: location\n[73]   tags: tags\n[74]   zones: [\n[75]     '1'\n[76]   ]\n[77]   properties: {\n[78]     hardwareProfile: {\n[79]       vmSize: vmSize\n[80]     }\n[81]     storageProfile: {\n[82]       osDisk: {\n[83]         createOption: 'FromImage'\n[84]         managedDisk: {\n[85]           storageAccountType: 'Standard_LRS'\n[86]         }\n[87]       }\n[88]       imageReference: {\n[89]         publisher: 'MicrosoftWindowsServer'\n[90]         offer: 'WindowsServer'\n[91]         sku: vmWindowsOSVersion\n[92]         version: 'latest'\n[93]       }\n[94]     }\n[95]     osProfile: {\n[96]       computerName: vmName\n[97]       adminUsername: vmAdminUsername\n[98]       adminPassword: vmAdminPassword\n[99]     }\n[100]     networkProfile: {\n[101]       networkInterfaces: [\n[102]         {\n[103]           id: vmNetworkInterface.id\n[104]         }\n[105]       ]\n[106]     }\n[107]   }\n[108] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('The location where the resources will be created.')\n[6] param location string\n[7] \n[8] @description('The name of the Container Registry that will be allow-listed by the policy.')\n[9] param containerRegistryName string\n[10] \n[11] var namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n[12] \n[13] // Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\n[14] var builtInPolicies = [  \n[15]   {\n[16]     name: 'authentication-should-be-enabled-on-container-apps'\n[17]     definition: {\n[18]       properties: {\n[19]         displayName: 'Authentication should be enabled on container apps'\n[20]         description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n[21]       }\n[22]     }\n[23]     parameters: {\n[24]       effect: {\n[25]         value: 'AuditIfNotExists'\n[26]       }\n[27]     }\n[28]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n[29]   }\n[30]   {\n[31]     name: 'container-app-environments-should-use-network-injection'\n[32]     definition: {\n[33]       properties: {\n[34]         displayName: 'Container App environments should use network injection'\n[35]         description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n[36]       }\n[37]     }\n[38]     parameters: {\n[39]       effect: {\n[40]         value: 'Audit'\n[41]       }\n[42]     }\n[43]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n[44]   }\n[45]   {\n[46]     name: 'container-app-should-configure-with-volume-mount'\n[47]     definition: {\n[48]       properties: {\n[49]         displayName: 'Container App should configure with volume mount'\n[50]         description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n[51]       }\n[52]     }\n[53]     parameters: {\n[54]       effect: {\n[55]         value: 'Audit'\n[56]       }\n[57]     }\n[58]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n[59]   }\n[60]   {\n[61]     name: 'container-app-should-disable-public-network-access'\n[62]     definition: {\n[63]       properties: {\n[64]         displayName: 'Container Apps environment should disable public network access'\n[65]         description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n[66]       }\n[67]     }\n[68]     parameters: {\n[69]       effect: {\n[70]         value: 'Audit'\n[71]       }\n[72]     }\n[73]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n[74]   }\n[75]   {\n[76]     name: 'container-apps-should-disable-external-network-access'\n[77]     definition: {\n[78]       properties: {\n[79]         displayName: 'Container Apps should disable external network access'\n[80]         description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n[81]       }\n[82]     }\n[83]     parameters: {\n[84]       effect: {\n[85]         value: 'Audit'\n[86]       }\n[87]     }\n[88]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n[89]   }\n[90]   {\n[91]     name: 'containerapps-should-only-be-accessible-over-HTTPS'\n[92]     definition: {\n[93]       properties: {\n[94]         displayName: 'Container Apps should only be accessible over HTTPS'\n[95]         description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n[96]       }\n[97]     }\n[98]     parameters: {\n[99]       effect: {\n[100]         value: 'Audit'\n[101]       }\n[102]     }\n[103]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n[104]   }\n[105]   {\n[106]     name: 'managed-identity-should-be-enabled'\n[107]     definition: {\n[108]       properties: {\n[109]         displayName: 'Managed Identity should be enabled for Container Apps'\n[110]         description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n[111]       }\n[112]     }\n[113]     parameters: {\n[114]       effect: {\n[115]         value: 'Audit'\n[116]       }\n[117]     }\n[118]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n[119]   }\n[120]   \n[121] ]\n[122] \n[123] // credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n[124] // https://github.com/Azure-Samples/aca-azure-policy/tree/main\n[125] var customPolicies = [\n[126]   {\n[127]     name: 'aca-allowed-container-registries'\n[128]     definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n[129]     parameters: {\n[130]       listOfAllowedContainerRegistries: {\n[131]         value: [\n[132]           'mcr.microsoft.com'\n[133]           'docker.io'\n[134]           'ghcr.io'\n[135]           '${containerRegistryName}.azurecr.io'\n[136]         ]\n[137]       }\n[138]       effect: {\n[139]         value: 'Audit'\n[140]       }\n[141]     }\n[142]   }\n[143]   {\n[144]     name: 'aca-replica-count'\n[145]     definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n[146]     parameters: {\n[147]       minReplicas: {\n[148]         value: 0\n[149]       }\n[150]       maxReplicas: {\n[151]         value: 30\n[152]       }\n[153]       effect: {\n[154]         value: 'Audit'\n[155]       }\n[156]     }\n[157]     identity: false\n[158]   }\n[159]   {\n[160]     name: 'aca-no-liveness-probes'\n[161]     definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n[162]     parameters: {\n[163]       effect: {\n[164]         value: 'Audit'\n[165]       }\n[166]     }\n[167]     identity: false\n[168]   }\n[169]   {\n[170]     name: 'aca-no-readiness-probes'\n[171]     definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n[172]     parameters: {\n[173]       effect: {\n[174]         value: 'Audit'\n[175]       }\n[176]     }\n[177]     identity: false\n[178]   }\n[179]   {\n[180]     name: 'aca-no-startup-probes'\n[181]     definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n[182]     parameters: {\n[183]       effect: {\n[184]         value: 'Audit'\n[185]       }\n[186]     }\n[187]     identity: false\n[188]   }\n[189]   {\n[190]     name: 'aca-required-cpu-and-memory'\n[191]     definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n[192]     parameters: {\n[193]       maxCpu: {\n[194]         value: '1.0'\n[195]       }\n[196]       maxMemory: {\n[197]         value: '2.5'\n[198]       }\n[199]       effect: {\n[200]         value: 'Audit'\n[201]       }\n[202]     }\n[203]     identity: false\n[204]   }\n[205]   {\n[206]     name: 'aca-no-monitoring'\n[207]     definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n[208]     parameters: {\n[209]       effect: {\n[210]         value: 'Audit'\n[211]       }\n[212]     }\n[213]     identity: false\n[214]   }\n[215] ]\n[216] \n[217] module builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n[218]   name: 'poAssign_${take(policy.name, 40)}'\n[219]   params: {    \n[220]     location: location\n[221]     policy: policy\n[222]     policyDefinitionId: policy.policyDefinitionId    \n[223]   }  \n[224] }]\n[225] \n[226] \n[227] // resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n[228] //   name: guid(policy.name)\n[229] //   properties: {\n[230] //     description: policy.definition.properties.description\n[231] //     displayName: policy.definition.properties.displayName\n[232] //     metadata: policy.definition.properties.metadata\n[233] //     mode: policy.definition.properties.mode\n[234] //     parameters: policy.definition.properties.parameters\n[235] //     policyType: policy.definition.properties.policyType\n[236] //     policyRule: policy.definition.properties.policyRule\n[237] //   }\n[238] // }]\n[239] \n[240] module policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n[241]   name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n[242]   scope: subscription()\n[243]   params: {\n[244]     policy: policy\n[245]   }\n[246] }]\n[247] \n[248] module customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n[249]   name: 'poAssign_${take(policy.name, 40)}'\n[250]   params: {    \n[251]     location: location\n[252]     policy: policy\n[253]     policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n[254]   } \n[255]   dependsOn: [\n[256]     policyDefinition\n[257]   ] \n[258] }]\n```\n\n"}],"stream":true},"val":"::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=62,endLine=62::Hardcoded credentials\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=66,endLine=66::SSH public keys should not be hardcoded\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=19,endLine=20::Resource group name should not be passed as a parameter\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=88,endLine=88::Sensitive file content in source control\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=19,endLine=20::Resource group name should be derived from a naming module or pattern, not passed as a parameter\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=88,endLine=88::Loading content from a file path can lead to exposure of sensitive information if the file is not properly secured\n\nFor more information on security best practices, refer to the Azure Bicep documentation on security: [Azure Bicep Security Best Practices](https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/best-practices#security).\n\n```json\n[\n  {\n    \"name\": \"Resource Group\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Creates or updates a resource group to contain all related resources for the spoke scenario. This is the foundational action for organizing and securing resources within the Azure environment, aligning with governance and compliance requirements.\"\n  },\n  {\n    \"name\": \"Virtual Network (VNet)\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Deploys a spoke virtual network and configures its subnets. This action establishes the network topology for the workload, ensuring isolation and providing a boundary for network-level security controls.\"\n  },\n  {\n    \"name\": \"Log Analytics Workspace\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Deploys a Log Analytics Workspace for monitoring and logging. This action enables operational insights and analytics for the resources within the spoke, which is crucial for maintaining the health and security of the environment.\"\n  },\n  {\n    \"name\": \"Network Security Groups (NSGs)\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Deploys NSGs with predefined security rules for different components like Container Apps, Application Gateway, and private endpoints. This action applies security controls to regulate traffic to and from network interfaces, VMs, and subnets.\"\n  },\n  {\n    \"name\": \"Virtual Network Peering\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Establishes VNet peering between the spoke and hub networks. This action enables secure communication pathways between different segments of the network architecture, facilitating a hub-and-spoke model for network traffic management.\"\n  },\n  {\n    \"name\": \"Route Table\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Deploys a route table with a default route to a network appliance. This action directs traffic through a security appliance for inspection or filtering, enhancing the security posture by enforcing traffic to pass through security boundaries.\"\n  },\n  {\n    \"name\": \"Jump Box\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Conditionally deploys a Linux or Windows virtual machine to be used as a jump box. This action provides a secure, controlled entry point for administrators to manage the resources within the spoke environment.\"\n  },\n  {\n    \"name\": \"Policy Assignments\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Assigns built-in and custom Azure policies to the spoke resources. This action enforces compliance with organizational standards and regulatory requirements, ensuring that resources are configured according to best practices.\"\n  }\n]\n```\n\nDeployed:\n- Resource Group\n- Virtual Network (VNet) and its subnets\n- Log Analytics Workspace\n- Network Security Groups (NSGs)\n- Virtual Network Peering\n- Route Table\n- Jump Box (conditional)\n- Policy Assignments"}
{"sha":"52e9486da21e001bf91deaeab81bd04d34c4244caddcdc5b40aef3a0cca8cfb9","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Definitions\n### Action\nSomething being done by the SPECS file or its dependencies when used. Understanding the Action requires understanding the purpose of the script and its dependencies which requires deeper analysis than just describing the basic implementation of the name or steps in the script. The Action is the *why* of the script, not the *how*.\n\n### Target\nSpecific Azure service or cloud component that will be impacted by the Action. Example Targets include Application Insights, Application Gateway, Virtual Machines, and GitHub but could even include other clouds or custom components.\n\n### Deployed\nAny cloud resource that is deployed after this file is used that was not present before this file was used. Cloud resources that were already deployed before this file was used are not considered Deployed, and any cloud resources that are *always* deleted after this file is used are not considered Deployed.\n\n## Guidance on Actions\nIt is important to explain *why* the Action is being taken and *what* is being done in your description of the Action. Describing the purpose of the Action requires that you understand the value of the performed step. When you write the description of the Action, you should explain *why* and *what* is being done rather than just describing the implementation. For example, a script that clones a git repo doesn't exist to clone a git repo. It exists to download the source code that does something. Your description of the Action should explain what the script is doing with the source code that it downloads with as much detail as you can infer from the provided file contents.\n\n\n## Task 1\n\nIdentify security issues in SPECS files. Examine each SPECS file carefully.\nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n-  Do NOT report notice annotations, only error and warning.\n\n## Task 2\n\n1. Review the SPECS files and its dependencies that the user uploads\n2. Perform a very careful analysis of all the file contents that you receive to really understand what is happening\n3. Develop a lengthy list of actions that are being performed by the file and its dependencies. Make sure that you understand what is being done and why it is being done in creating this list using the approach from \"Guidance on Actions\" above.\n4. Double check your list of actions to make sure that you have a complete list of actions and add any that you missed\n5. Organize the actions by the target services or cloud components that are impacted by the actions\n6. Identify any cloud resources that are deployed after this file is used that were not present before this file was used and add them to the \"Deployed\" list. If nothing that you find directly within the provided file content meets this criteria, please leave the list empty.\n7. Generate a JSON file, targets.json, with the results following the JSON schema below:\n\n```\n{\"type\":\"array\",\"description\":\"An array of targets\",\"items\":{\"description\":\"A target that is impacted by the actions in the file\",\"type\":\"object\",\"properties\":{\"name\":{\"description\":\"Identifier of the target\",\"type\":\"string\"},\"source\":{\"description\":\"Path of the file defining the target\",\"type\":\"string\"},\"action\":{\"description\":\"What is being done on the cloud resource\",\"type\":\"string\"}}}}\n```\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created. This should be the same region as the hub.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param spokeResourceGroupName string\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] // Hub\n[26] @description('The resource ID of the existing hub virtual network.')\n[27] param hubVNetId string\n[28] \n[29] // Spoke\n[30] @description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\n[31] param spokeVNetAddressPrefixes array\n[32] \n[33] @description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\n[34] param spokeInfraSubnetName string = 'snet-infra'\n[35] \n[36] @description('CIDR of the spoke infrastructure subnet.')\n[37] param spokeInfraSubnetAddressPrefix string\n[38] \n[39] @description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\n[40] param spokePrivateEndpointsSubnetName string = 'snet-pep'\n[41] \n[42] @description('CIDR of the spoke private endpoints subnet.')\n[43] param spokePrivateEndpointsSubnetAddressPrefix string\n[44] \n[45] @description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\n[46] param spokeApplicationGatewaySubnetName string = 'snet-agw'\n[47] \n[48] @description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\n[49] param spokeApplicationGatewaySubnetAddressPrefix string\n[50] \n[51] @description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\n[52] param networkApplianceIpAddress string\n[53] \n[54] @description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\n[55] param vmSize string\n[56] \n[57] @description('The username to use for the jump box.')\n[58] param vmAdminUsername string\n[59] \n[60] @description('The password to use for the jump box.')\n[61] @secure()\n[62] param vmAdminPassword string\n[63] \n[64] @description('The SSH public key to use for the jump box. Only relevant for Linux.')\n[65] @secure()\n[66] param vmLinuxSshAuthorizedKeys string\n[67] \n[68] @description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n[69] @allowed([ 'linux', 'windows', 'none' ])\n[70] param vmJumpboxOSType string = 'none'\n[71] \n[72] @description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\n[73] param vmSubnetName string = 'snet-jumpbox'\n[74] \n[75] @description('CIDR to use for the jump box subnet.')\n[76] param vmJumpBoxSubnetAddressPrefix string\n[77] \n[78] @description('Optional, default value is true. If true, Azure Policies will be deployed')\n[79] param deployAzurePolicies bool = true\n[80] \n[81] // ------------------\n[82] // VARIABLES\n[83] // ------------------\n[84] \n[85] //Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\n[86] var locationVar = location == 'francecentral' ? 'centralfrance' : location\n[87] \n[88] // load as text (and not as Json) to replace <location> placeholder in the nsg rules\n[89] var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\n[90] var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\n[91] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[92] \n[93] var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[94] var hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n[95] \n[96] @description('The ID of the subscription containing the hub virtual network.')\n[97] var hubSubscriptionId = hubVNetResourceIdTokens[2]\n[98] \n[99] @description('The name of the resource group containing the hub virtual network.')\n[100] var hubResourceGroupName = hubVNetResourceIdTokens[4]\n[101] \n[102] @description('The name of the hub virtual network.')\n[103] var hubVNetName = hubVNetResourceIdTokens[8]\n[104] \n[105] // Subnet definition taking in consideration feature flags\n[106] var defaultSubnets = [\n[107]   {\n[108]     name: spokeInfraSubnetName\n[109]     properties: {\n[110]       addressPrefix: spokeInfraSubnetAddressPrefix\n[111]       networkSecurityGroup: {\n[112]         id: nsgContainerAppsEnvironment.outputs.nsgId\n[113]       }\n[114]       routeTable: {\n[115]         id: egressLockdownUdr.outputs.resourceId\n[116]       }\n[117]       delegations: [\n[118]         {\n[119]           name: 'envdelegation'\n[120]           properties: {\n[121]             serviceName: 'Microsoft.App/environments'\n[122]           }\n[123]         }\n[124]       ]\n[125]     }\n[126]   }\n[127]   {\n[128]     name: spokePrivateEndpointsSubnetName\n[129]     properties: {\n[130]       addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n[131]       networkSecurityGroup: {\n[132]         id: nsgPep.outputs.nsgId\n[133]       }\n[134]     }\n[135]   }\n[136] ]\n[137] \n[138] // Append optional application gateway subnet, if required\n[139] var appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n[140]     {\n[141]       name: spokeApplicationGatewaySubnetName\n[142]       properties: {\n[143]         addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n[144]         networkSecurityGroup: {\n[145]           id: nsgAppGw.outputs.nsgId\n[146]         }\n[147]       }\n[148]     }\n[149]   ]) : defaultSubnets\n[150] \n[151]   //Append optional jumpbox subnet, if required\n[152] var spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n[153]     {\n[154]       name: vmSubnetName\n[155]       properties: {\n[156]         addressPrefix: vmJumpBoxSubnetAddressPrefix\n[157]       }\n[158]     }\n[159]   ]) : appGwAndDefaultSubnets\n[160] \n[161] // ------------------\n[162] // RESOURCES\n[163] // ------------------\n[164] \n[165] \n[166] @description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\n[167] resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[168]   name: rgSpokeName\n[169]   location: location\n[170]   tags: tags\n[171] }\n[172] \n[173] @description('User-configured naming rules')\n[174] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[175]   scope: spokeResourceGroup\n[176]   name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n[177]   params: {\n[178]     uniqueId: uniqueString(spokeResourceGroup.id)\n[179]     environment: environment\n[180]     workloadName: workloadName\n[181]     location: location\n[182]   }\n[183] }\n[184] \n[185] @description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\n[186] module vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n[187]   name: take('vnetSpoke-${deployment().name}', 64)\n[188]   scope: spokeResourceGroup\n[189]   params: {\n[190]     name: naming.outputs.resourcesNames.vnetSpoke\n[191]     location: location\n[192]     tags: tags\n[193]     subnets: spokeSubnets\n[194]     vnetAddressPrefixes: spokeVNetAddressPrefixes\n[195]   }\n[196] }\n[197] \n[198] @description('The log sink for Azure Diagnostics')\n[199] module logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[200]   name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n[201]   scope: spokeResourceGroup\n[202]   params: {\n[203]     location: location\n[204]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[205]   }\n[206] }\n[207] \n[208] @description('Network security group rules for the Container Apps cluster.')\n[209] module nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n[210]   name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n[211]   scope: spokeResourceGroup\n[212]   params: {\n[213]     name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n[214]     location: location\n[215]     tags: tags\n[216]     securityRules: nsgCaeRules.securityRules\n[217]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[218]   }\n[219] }\n[220] \n[221] @description('NSG Rules for the Application Gateway.')\n[222] module nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[223]   name: take('nsgAppGw-${deployment().name}', 64)\n[224]   scope: spokeResourceGroup\n[225]   params: {\n[226]     name: naming.outputs.resourcesNames.applicationGatewayNsg\n[227]     location: location\n[228]     tags: tags\n[229]     securityRules: nsgAppGwRules\n[230]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[231]   }\n[232] }\n[233] \n[234] @description('NSG Rules for the private enpoint subnet.')\n[235] module nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n[236]   name: take('nsgPep-${deployment().name}', 64)\n[237]   scope: spokeResourceGroup\n[238]   params: {\n[239]     name: naming.outputs.resourcesNames.pepNsg\n[240]     location: location\n[241]     tags: tags\n[242]     securityRules: []\n[243]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[244]   }\n[245] }\n[246] \n[247] @description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\n[248] module peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n[249]   name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n[250]   scope: spokeResourceGroup\n[251]   params: {\n[252]     localVnetName: vnetSpoke.outputs.vnetName\n[253]     remoteSubscriptionId: hubSubscriptionId\n[254]     remoteRgName: hubResourceGroupName\n[255]     remoteVnetName: hubVNetName\n[256]   }\n[257] }\n[258] \n[259] @description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\n[260] module peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n[261]   name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n[262]   scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n[263]   params: {\n[264]     localVnetName: hubVNetName\n[265]     remoteSubscriptionId: last(split(subscription().id, '/'))!\n[266]     remoteRgName: spokeResourceGroup.name\n[267]     remoteVnetName: vnetSpoke.outputs.vnetName\n[268]   }\n[269] }\n[270] @description('The Route Table deployment')\n[271] module egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n[272]   name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n[273]   scope: spokeResourceGroup\n[274]   params: {\n[275]     name: naming.outputs.resourcesNames.routeTable\n[276]     location: location\n[277]     tags: tags\n[278]     routes: [\n[279]       {\n[280]         name: 'defaultEgressLockdown'\n[281]         properties: {\n[282]           addressPrefix: '0.0.0.0/0'\n[283]           nextHopType: 'VirtualAppliance'\n[284]           nextHopIpAddress: networkApplianceIpAddress\n[285]         }\n[286]       }\n[287]     ]\n[288]   }\n[289] }\n[290] \n[291] \n[292] @description('An optional Linux virtual machine deployment to act as a jump box.')\n[293] module jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n[294]   name: take('vm-linux-${deployment().name}', 64)\n[295]   scope: spokeResourceGroup\n[296]   params: {\n[297]     location: location\n[298]     tags: tags\n[299]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[300]     vmAdminUsername: vmAdminUsername\n[301]     vmAdminPassword: vmAdminPassword\n[302]     vmSshPublicKey: vmLinuxSshAuthorizedKeys\n[303]     vmSize: vmSize\n[304]     vmVnetName: vnetSpoke.outputs.vnetName\n[305]     vmSubnetName: vmSubnetName\n[306]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[307]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[308]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[309]   }\n[310] }\n[311] \n[312] @description('An optional Windows virtual machine deployment to act as a jump box.')\n[313] module jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n[314]   name: take('vm-windows-${deployment().name}', 64)\n[315]   scope: spokeResourceGroup\n[316]   params: {\n[317]     location: location\n[318]     tags: tags\n[319]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[320]     vmAdminUsername: vmAdminUsername\n[321]     vmAdminPassword: vmAdminPassword\n[322]     vmSize: vmSize\n[323]     vmVnetName: vnetSpoke.outputs.vnetName\n[324]     vmSubnetName: vmSubnetName\n[325]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[326]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[327]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[328]   }\n[329] }\n[330] \n[331] @description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\n[332] module policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n[333]   name: take('policyAssignments-${deployment().name}', 64)\n[334]   scope: spokeResourceGroup\n[335]   params: {\n[336]     location: location   \n[337]     containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n[338]   }\n[339] }\n[340] \n[341] // ------------------\n[342] // OUTPUTS\n[343] // ------------------\n[344] \n[345] resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n[346]   name: vnetSpoke.outputs.vnetName\n[347]   scope: spokeResourceGroup\n[348] \n[349]   resource spokeInfraSubnet 'subnets' existing = {\n[350]     name: spokeInfraSubnetName\n[351]   }\n[352] \n[353]   resource spokePrivateEndpointsSubnet 'subnets' existing = {\n[354]     name: spokePrivateEndpointsSubnetName\n[355]   }\n[356] \n[357]   resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[358]     name: spokeApplicationGatewaySubnetName\n[359]   }\n[360] }\n[361] \n[362] @description('The name of the spoke resource group.')\n[363] output spokeResourceGroupName string = spokeResourceGroup.name\n[364] \n[365] @description('The resource ID of the spoke virtual network.')\n[366] output spokeVNetId string = vnetSpokeCreated.id\n[367] \n[368] @description('The name of the spoke virtual network.')\n[369] output spokeVNetName string = vnetSpokeCreated.name\n[370] \n[371] @description('The resource ID of the spoke infrastructure subnet.')\n[372] output spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n[373] \n[374] @description('The name of the spoke infrastructure subnet.')\n[375] output spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n[376] \n[377] @description('The name of the spoke private endpoints subnet.')\n[378] output spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n[379] \n[380] @description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\n[381] output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n[382] \n[383] @description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\n[384] output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n[385] \n[386] @description('The resource ID of the Azure Log Analytics Workspace.')\n[387] output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmVnetName string\n[11] param vmSubnetName string\n[12] param vmSubnetAddressPrefix string\n[13] param vmNetworkSecurityGroupName string\n[14] param vmNetworkInterfaceName string\n[15] \n[16] param vmAdminUsername string\n[17] \n[18] @secure()\n[19] param vmAdminPassword string\n[20] \n[21] @secure()\n[22] param vmSshPublicKey string\n[23] \n[24] @description('Type of authentication to use on the Virtual Machine. SSH key is recommended.')\n[25] @allowed([\n[26]   'sshPublicKey'\n[27]   'password'\n[28] ])\n[29] param vmAuthenticationType string = 'password'\n[30] \n[31] @description('Optional. The tags to be assigned to the created resources.')\n[32] param tags object = {}\n[33] \n[34] param location string = resourceGroup().location\n[35] \n[36] // ------------------\n[37] // VARIABLES\n[38] // ------------------\n[39] \n[40] var linuxConfiguration = {\n[41]   disablePasswordAuthentication: true\n[42]   ssh: {\n[43]     publicKeys: [\n[44]       {\n[45]         path: '/home/${vmAdminUsername}/.ssh/authorized_keys'\n[46]         keyData: vmSshPublicKey\n[47]       }\n[48]     ]\n[49]   }\n[50] }\n[51] \n[52] // ------------------\n[53] // RESOURCES\n[54] // ------------------\n[55] \n[56] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[57]   name: vmNetworkSecurityGroupName\n[58]   location: location\n[59]   tags: tags\n[60]   properties: {\n[61]     securityRules: []\n[62]   }\n[63] }\n[64] \n[65] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[66]   name: '${vmVnetName}/${vmSubnetName}'\n[67]   properties: {\n[68]     addressPrefix: vmSubnetAddressPrefix\n[69]     networkSecurityGroup: {\n[70]       id: vmNetworkSecurityGroup.id\n[71]     }\n[72]   }\n[73] }\n[74] \n[75] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[76]   name: vmNetworkInterfaceName\n[77]   location: location\n[78]   tags: tags\n[79]   properties: {\n[80]     ipConfigurations: [\n[81]       {\n[82]         name: 'ipconfig1'\n[83]         properties: {\n[84]           subnet: {\n[85]             id: vmSubnet.id\n[86]           }\n[87]           privateIPAllocationMethod: 'Dynamic'\n[88]         }\n[89]       }\n[90]     ]\n[91]   }\n[92] }\n[93] \n[94] resource vm 'Microsoft.Compute/virtualMachines@2021-03-01' = {\n[95]   name: vmName\n[96]   location: location\n[97]   tags: tags\n[98]   properties: {\n[99]     osProfile: {\n[100]       computerName: vmName\n[101]       adminUsername: vmAdminUsername\n[102]       adminPassword: vmAdminPassword\n[103]       linuxConfiguration: ((vmAuthenticationType == 'password') ? null : linuxConfiguration)\n[104]     }\n[105]     hardwareProfile: {\n[106]       vmSize: vmSize\n[107]     }\n[108]     storageProfile: {\n[109]       osDisk: {\n[110]         createOption: 'FromImage'\n[111]         managedDisk: {\n[112]           storageAccountType: 'Standard_LRS'\n[113]         }\n[114]       }\n[115]       imageReference: {\n[116]         publisher: 'Canonical'\n[117]         offer: 'UbuntuServer'\n[118]         sku: '18.04-LTS'\n[119]         version: 'latest'\n[120]       }\n[121]     }\n[122]     networkProfile: {\n[123]       networkInterfaces: [\n[124]         {\n[125]           id: vmNetworkInterface.id\n[126]         }\n[127]       ]\n[128]     }\n[129]   }\n[130] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/windows-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmWindowsOSVersion string = '2016-Datacenter'\n[11] \n[12] param vmVnetName string\n[13] param vmSubnetName string\n[14] param vmSubnetAddressPrefix string\n[15] param vmNetworkSecurityGroupName string\n[16] param vmNetworkInterfaceName string\n[17] \n[18] param vmAdminUsername string\n[19] \n[20] @secure()\n[21] param vmAdminPassword string\n[22] \n[23] @description('Optional. The tags to be assigned to the created resources.')\n[24] param tags object = {}\n[25] \n[26] param location string = resourceGroup().location\n[27] \n[28] // ------------------\n[29] // RESOURCES\n[30] // ------------------\n[31] \n[32] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[33]   name: vmNetworkSecurityGroupName\n[34]   location: location\n[35]   tags: tags\n[36]   properties: {\n[37]     securityRules: []\n[38]   }\n[39] }\n[40] \n[41] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[42]   name: '${vmVnetName}/${vmSubnetName}'\n[43]   properties: {\n[44]     addressPrefix: vmSubnetAddressPrefix\n[45]     networkSecurityGroup: {\n[46]       id: vmNetworkSecurityGroup.id\n[47]     }\n[48]   }\n[49] }\n[50] \n[51] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[52]   name: vmNetworkInterfaceName\n[53]   location: location\n[54]   tags: tags\n[55]   properties: {\n[56]     ipConfigurations: [\n[57]       {\n[58]         name: 'ipconfig1'\n[59]         properties: {\n[60]           subnet: {\n[61]             id: vmSubnet.id\n[62]           }\n[63]           privateIPAllocationMethod: 'Dynamic'\n[64]         }\n[65]       }\n[66]     ]\n[67]   }\n[68] }\n[69] \n[70] resource vm 'Microsoft.Compute/virtualMachines@2021-04-01' =  {\n[71]   name: vmName\n[72]   location: location\n[73]   tags: tags\n[74]   zones: [\n[75]     '1'\n[76]   ]\n[77]   properties: {\n[78]     hardwareProfile: {\n[79]       vmSize: vmSize\n[80]     }\n[81]     storageProfile: {\n[82]       osDisk: {\n[83]         createOption: 'FromImage'\n[84]         managedDisk: {\n[85]           storageAccountType: 'Standard_LRS'\n[86]         }\n[87]       }\n[88]       imageReference: {\n[89]         publisher: 'MicrosoftWindowsServer'\n[90]         offer: 'WindowsServer'\n[91]         sku: vmWindowsOSVersion\n[92]         version: 'latest'\n[93]       }\n[94]     }\n[95]     osProfile: {\n[96]       computerName: vmName\n[97]       adminUsername: vmAdminUsername\n[98]       adminPassword: vmAdminPassword\n[99]     }\n[100]     networkProfile: {\n[101]       networkInterfaces: [\n[102]         {\n[103]           id: vmNetworkInterface.id\n[104]         }\n[105]       ]\n[106]     }\n[107]   }\n[108] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('The location where the resources will be created.')\n[6] param location string\n[7] \n[8] @description('The name of the Container Registry that will be allow-listed by the policy.')\n[9] param containerRegistryName string\n[10] \n[11] var namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n[12] \n[13] // Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\n[14] var builtInPolicies = [  \n[15]   {\n[16]     name: 'authentication-should-be-enabled-on-container-apps'\n[17]     definition: {\n[18]       properties: {\n[19]         displayName: 'Authentication should be enabled on container apps'\n[20]         description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n[21]       }\n[22]     }\n[23]     parameters: {\n[24]       effect: {\n[25]         value: 'AuditIfNotExists'\n[26]       }\n[27]     }\n[28]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n[29]   }\n[30]   {\n[31]     name: 'container-app-environments-should-use-network-injection'\n[32]     definition: {\n[33]       properties: {\n[34]         displayName: 'Container App environments should use network injection'\n[35]         description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n[36]       }\n[37]     }\n[38]     parameters: {\n[39]       effect: {\n[40]         value: 'Audit'\n[41]       }\n[42]     }\n[43]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n[44]   }\n[45]   {\n[46]     name: 'container-app-should-configure-with-volume-mount'\n[47]     definition: {\n[48]       properties: {\n[49]         displayName: 'Container App should configure with volume mount'\n[50]         description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n[51]       }\n[52]     }\n[53]     parameters: {\n[54]       effect: {\n[55]         value: 'Audit'\n[56]       }\n[57]     }\n[58]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n[59]   }\n[60]   {\n[61]     name: 'container-app-should-disable-public-network-access'\n[62]     definition: {\n[63]       properties: {\n[64]         displayName: 'Container Apps environment should disable public network access'\n[65]         description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n[66]       }\n[67]     }\n[68]     parameters: {\n[69]       effect: {\n[70]         value: 'Audit'\n[71]       }\n[72]     }\n[73]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n[74]   }\n[75]   {\n[76]     name: 'container-apps-should-disable-external-network-access'\n[77]     definition: {\n[78]       properties: {\n[79]         displayName: 'Container Apps should disable external network access'\n[80]         description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n[81]       }\n[82]     }\n[83]     parameters: {\n[84]       effect: {\n[85]         value: 'Audit'\n[86]       }\n[87]     }\n[88]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n[89]   }\n[90]   {\n[91]     name: 'containerapps-should-only-be-accessible-over-HTTPS'\n[92]     definition: {\n[93]       properties: {\n[94]         displayName: 'Container Apps should only be accessible over HTTPS'\n[95]         description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n[96]       }\n[97]     }\n[98]     parameters: {\n[99]       effect: {\n[100]         value: 'Audit'\n[101]       }\n[102]     }\n[103]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n[104]   }\n[105]   {\n[106]     name: 'managed-identity-should-be-enabled'\n[107]     definition: {\n[108]       properties: {\n[109]         displayName: 'Managed Identity should be enabled for Container Apps'\n[110]         description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n[111]       }\n[112]     }\n[113]     parameters: {\n[114]       effect: {\n[115]         value: 'Audit'\n[116]       }\n[117]     }\n[118]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n[119]   }\n[120]   \n[121] ]\n[122] \n[123] // credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n[124] // https://github.com/Azure-Samples/aca-azure-policy/tree/main\n[125] var customPolicies = [\n[126]   {\n[127]     name: 'aca-allowed-container-registries'\n[128]     definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n[129]     parameters: {\n[130]       listOfAllowedContainerRegistries: {\n[131]         value: [\n[132]           'mcr.microsoft.com'\n[133]           'docker.io'\n[134]           'ghcr.io'\n[135]           '${containerRegistryName}.azurecr.io'\n[136]         ]\n[137]       }\n[138]       effect: {\n[139]         value: 'Audit'\n[140]       }\n[141]     }\n[142]   }\n[143]   {\n[144]     name: 'aca-replica-count'\n[145]     definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n[146]     parameters: {\n[147]       minReplicas: {\n[148]         value: 0\n[149]       }\n[150]       maxReplicas: {\n[151]         value: 30\n[152]       }\n[153]       effect: {\n[154]         value: 'Audit'\n[155]       }\n[156]     }\n[157]     identity: false\n[158]   }\n[159]   {\n[160]     name: 'aca-no-liveness-probes'\n[161]     definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n[162]     parameters: {\n[163]       effect: {\n[164]         value: 'Audit'\n[165]       }\n[166]     }\n[167]     identity: false\n[168]   }\n[169]   {\n[170]     name: 'aca-no-readiness-probes'\n[171]     definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n[172]     parameters: {\n[173]       effect: {\n[174]         value: 'Audit'\n[175]       }\n[176]     }\n[177]     identity: false\n[178]   }\n[179]   {\n[180]     name: 'aca-no-startup-probes'\n[181]     definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n[182]     parameters: {\n[183]       effect: {\n[184]         value: 'Audit'\n[185]       }\n[186]     }\n[187]     identity: false\n[188]   }\n[189]   {\n[190]     name: 'aca-required-cpu-and-memory'\n[191]     definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n[192]     parameters: {\n[193]       maxCpu: {\n[194]         value: '1.0'\n[195]       }\n[196]       maxMemory: {\n[197]         value: '2.5'\n[198]       }\n[199]       effect: {\n[200]         value: 'Audit'\n[201]       }\n[202]     }\n[203]     identity: false\n[204]   }\n[205]   {\n[206]     name: 'aca-no-monitoring'\n[207]     definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n[208]     parameters: {\n[209]       effect: {\n[210]         value: 'Audit'\n[211]       }\n[212]     }\n[213]     identity: false\n[214]   }\n[215] ]\n[216] \n[217] module builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n[218]   name: 'poAssign_${take(policy.name, 40)}'\n[219]   params: {    \n[220]     location: location\n[221]     policy: policy\n[222]     policyDefinitionId: policy.policyDefinitionId    \n[223]   }  \n[224] }]\n[225] \n[226] \n[227] // resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n[228] //   name: guid(policy.name)\n[229] //   properties: {\n[230] //     description: policy.definition.properties.description\n[231] //     displayName: policy.definition.properties.displayName\n[232] //     metadata: policy.definition.properties.metadata\n[233] //     mode: policy.definition.properties.mode\n[234] //     parameters: policy.definition.properties.parameters\n[235] //     policyType: policy.definition.properties.policyType\n[236] //     policyRule: policy.definition.properties.policyRule\n[237] //   }\n[238] // }]\n[239] \n[240] module policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n[241]   name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n[242]   scope: subscription()\n[243]   params: {\n[244]     policy: policy\n[245]   }\n[246] }]\n[247] \n[248] module customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n[249]   name: 'poAssign_${take(policy.name, 40)}'\n[250]   params: {    \n[251]     location: location\n[252]     policy: policy\n[253]     policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n[254]   } \n[255]   dependsOn: [\n[256]     policyDefinition\n[257]   ] \n[258] }]\n```\n\n"}],"stream":true},"val":"## Task 1: Security Issues in SPECS\n\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=62,endLine=62::Hardcoded sensitive information should not be present in Bicep files. Use Azure Key Vault for storing secrets. [Learn more](https://learn.microsoft.com/azure/governance/policy/concepts/definition-structure#parameters)\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=66,endLine=66::Hardcoded sensitive information should not be present in Bicep files. Use Azure Key Vault for storing secrets. [Learn more](https://learn.microsoft.com/azure/governance/policy/concepts/definition-structure#parameters)\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=88,endLine=88::Loading external content with 'loadTextContent' can introduce a risk if the content is not controlled or properly secured. Ensure the content is from a trusted source. [Learn more](https://learn.microsoft.com/azure/azure-resource-manager/bicep/file#loadtextcontent)\n\n## Task 2: Analysis and JSON Generation\n\n### Actions and Targets\n\n- **Azure Resource Group**: The SPECS file creates a new resource group for the spoke infrastructure, which is a logical container for Azure resources. This is done to organize and manage the resources related to the spoke network in a centralized manner.\n- **Azure Virtual Network (VNet)**: A new virtual network is created within the spoke resource group to provide a private network space for Azure resources. This is essential for the isolation and secure communication between the resources that will be deployed within the spoke.\n- **Subnets**: Multiple subnets are defined within the spoke VNet, including infrastructure, private endpoints, application gateway, and optionally a jump box subnet. These subnets are created to segregate the network and apply specific security and routing policies to different types of resources.\n- **Network Security Groups (NSGs)**: NSGs are deployed to define security rules for the subnets, controlling the inbound and outbound network traffic. This is crucial for protecting the Azure resources within the subnets from unauthorized access.\n- **Log Analytics Workspace**: A Log Analytics Workspace is provisioned to collect and analyze data generated by resources in the spoke. This enables monitoring, alerting, and troubleshooting capabilities.\n- **Virtual Network Peering**: Peering connections are established between the spoke and hub virtual networks to enable direct network connectivity. This is important for allowing resources in different VNets to communicate with each other securely.\n- **Route Table**: A route table with a default route to a network appliance is created to control the flow of network traffic. This is used to ensure that traffic is routed according to the security and compliance requirements of the organization.\n- **Virtual Machines (Jump Boxes)**: Depending on the OS type specified, a Linux or Windows virtual machine is deployed to act as a jump box. This VM provides a secure way for administrators to manage the resources within the spoke.\n- **Policy Assignments**: Azure Policy definitions and assignments are created to enforce compliance and governance standards across the resources in the spoke. This helps in maintaining the security posture and ensuring that the resources are in line with organizational policies.\n\n### Deployed Resources\n\n- Azure Resource Group\n- Azure Virtual Network (VNet) and Subnets\n- Network Security Groups (NSGs)\n- Log Analytics Workspace\n- Virtual Network Peering\n- Route Table\n- Virtual Machines (Jump Boxes)\n- Policy Assignments\n\nFile ./targets.json:\n```json\n[\n  {\n    \"name\": \"Resource Group\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Creates a new resource group for organizing spoke-related Azure resources.\"\n  },\n  {\n    \"name\": \"Virtual Network\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Deploys a virtual network within the spoke resource group for private networking.\"\n  },\n  {\n    \"name\": \"Subnets\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Defines multiple subnets within the virtual network for resource segregation and security.\"\n  },\n  {\n    \"name\": \"Network Security Groups\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Implements NSGs to manage network traffic rules for the subnets.\"\n  },\n  {\n    \"name\": \"Log Analytics Workspace\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Provisions a workspace for monitoring and analyzing resource logs.\"\n  },\n  {\n    \"name\": \"Virtual Network Peering\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Establishes peering connections for direct network connectivity between spoke and hub VNets.\"\n  },\n  {\n    \"name\": \"Route Table\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Creates a route table to direct network traffic via a network appliance.\"\n  },\n  {\n    \"name\": \"Virtual Machines\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Deploys a jump box VM to securely manage the spoke resources.\"\n  },\n  {\n    \"name\": \"Policy Assignments\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Applies Azure Policy definitions and assignments for compliance and governance.\"\n  }\n]\n```"}
{"sha":"d2e6e8a6ab865ebd9c665bd7d3ac4bf5e8b3ebbeed7bb8e873a2d9e0e6de7844","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Files\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created. This should be the same region as the hub.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param spokeResourceGroupName string\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] // Hub\n[26] @description('The resource ID of the existing hub virtual network.')\n[27] param hubVNetId string\n[28] \n[29] // Spoke\n[30] @description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\n[31] param spokeVNetAddressPrefixes array\n[32] \n[33] @description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\n[34] param spokeInfraSubnetName string = 'snet-infra'\n[35] \n[36] @description('CIDR of the spoke infrastructure subnet.')\n[37] param spokeInfraSubnetAddressPrefix string\n[38] \n[39] @description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\n[40] param spokePrivateEndpointsSubnetName string = 'snet-pep'\n[41] \n[42] @description('CIDR of the spoke private endpoints subnet.')\n[43] param spokePrivateEndpointsSubnetAddressPrefix string\n[44] \n[45] @description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\n[46] param spokeApplicationGatewaySubnetName string = 'snet-agw'\n[47] \n[48] @description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\n[49] param spokeApplicationGatewaySubnetAddressPrefix string\n[50] \n[51] @description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\n[52] param networkApplianceIpAddress string\n[53] \n[54] @description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\n[55] param vmSize string\n[56] \n[57] @description('The username to use for the jump box.')\n[58] param vmAdminUsername string\n[59] \n[60] @description('The password to use for the jump box.')\n[61] @secure()\n[62] param vmAdminPassword string\n[63] \n[64] @description('The SSH public key to use for the jump box. Only relevant for Linux.')\n[65] @secure()\n[66] param vmLinuxSshAuthorizedKeys string\n[67] \n[68] @description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n[69] @allowed([ 'linux', 'windows', 'none' ])\n[70] param vmJumpboxOSType string = 'none'\n[71] \n[72] @description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\n[73] param vmSubnetName string = 'snet-jumpbox'\n[74] \n[75] @description('CIDR to use for the jump box subnet.')\n[76] param vmJumpBoxSubnetAddressPrefix string\n[77] \n[78] @description('Optional, default value is true. If true, Azure Policies will be deployed')\n[79] param deployAzurePolicies bool = true\n[80] \n[81] // ------------------\n[82] // VARIABLES\n[83] // ------------------\n[84] \n[85] //Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\n[86] var locationVar = location == 'francecentral' ? 'centralfrance' : location\n[87] \n[88] // load as text (and not as Json) to replace <location> placeholder in the nsg rules\n[89] var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\n[90] var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\n[91] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[92] \n[93] var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[94] var hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n[95] \n[96] @description('The ID of the subscription containing the hub virtual network.')\n[97] var hubSubscriptionId = hubVNetResourceIdTokens[2]\n[98] \n[99] @description('The name of the resource group containing the hub virtual network.')\n[100] var hubResourceGroupName = hubVNetResourceIdTokens[4]\n[101] \n[102] @description('The name of the hub virtual network.')\n[103] var hubVNetName = hubVNetResourceIdTokens[8]\n[104] \n[105] // Subnet definition taking in consideration feature flags\n[106] var defaultSubnets = [\n[107]   {\n[108]     name: spokeInfraSubnetName\n[109]     properties: {\n[110]       addressPrefix: spokeInfraSubnetAddressPrefix\n[111]       networkSecurityGroup: {\n[112]         id: nsgContainerAppsEnvironment.outputs.nsgId\n[113]       }\n[114]       routeTable: {\n[115]         id: egressLockdownUdr.outputs.resourceId\n[116]       }\n[117]       delegations: [\n[118]         {\n[119]           name: 'envdelegation'\n[120]           properties: {\n[121]             serviceName: 'Microsoft.App/environments'\n[122]           }\n[123]         }\n[124]       ]\n[125]     }\n[126]   }\n[127]   {\n[128]     name: spokePrivateEndpointsSubnetName\n[129]     properties: {\n[130]       addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n[131]       networkSecurityGroup: {\n[132]         id: nsgPep.outputs.nsgId\n[133]       }\n[134]     }\n[135]   }\n[136] ]\n[137] \n[138] // Append optional application gateway subnet, if required\n[139] var appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n[140]     {\n[141]       name: spokeApplicationGatewaySubnetName\n[142]       properties: {\n[143]         addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n[144]         networkSecurityGroup: {\n[145]           id: nsgAppGw.outputs.nsgId\n[146]         }\n[147]       }\n[148]     }\n[149]   ]) : defaultSubnets\n[150] \n[151]   //Append optional jumpbox subnet, if required\n[152] var spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n[153]     {\n[154]       name: vmSubnetName\n[155]       properties: {\n[156]         addressPrefix: vmJumpBoxSubnetAddressPrefix\n[157]       }\n[158]     }\n[159]   ]) : appGwAndDefaultSubnets\n[160] \n[161] // ------------------\n[162] // RESOURCES\n[163] // ------------------\n[164] \n[165] \n[166] @description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\n[167] resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[168]   name: rgSpokeName\n[169]   location: location\n[170]   tags: tags\n[171] }\n[172] \n[173] @description('User-configured naming rules')\n[174] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[175]   scope: spokeResourceGroup\n[176]   name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n[177]   params: {\n[178]     uniqueId: uniqueString(spokeResourceGroup.id)\n[179]     environment: environment\n[180]     workloadName: workloadName\n[181]     location: location\n[182]   }\n[183] }\n[184] \n[185] @description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\n[186] module vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n[187]   name: take('vnetSpoke-${deployment().name}', 64)\n[188]   scope: spokeResourceGroup\n[189]   params: {\n[190]     name: naming.outputs.resourcesNames.vnetSpoke\n[191]     location: location\n[192]     tags: tags\n[193]     subnets: spokeSubnets\n[194]     vnetAddressPrefixes: spokeVNetAddressPrefixes\n[195]   }\n[196] }\n[197] \n[198] @description('The log sink for Azure Diagnostics')\n[199] module logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[200]   name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n[201]   scope: spokeResourceGroup\n[202]   params: {\n[203]     location: location\n[204]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[205]   }\n[206] }\n[207] \n[208] @description('Network security group rules for the Container Apps cluster.')\n[209] module nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n[210]   name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n[211]   scope: spokeResourceGroup\n[212]   params: {\n[213]     name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n[214]     location: location\n[215]     tags: tags\n[216]     securityRules: nsgCaeRules.securityRules\n[217]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[218]   }\n[219] }\n[220] \n[221] @description('NSG Rules for the Application Gateway.')\n[222] module nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[223]   name: take('nsgAppGw-${deployment().name}', 64)\n[224]   scope: spokeResourceGroup\n[225]   params: {\n[226]     name: naming.outputs.resourcesNames.applicationGatewayNsg\n[227]     location: location\n[228]     tags: tags\n[229]     securityRules: nsgAppGwRules\n[230]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[231]   }\n[232] }\n[233] \n[234] @description('NSG Rules for the private enpoint subnet.')\n[235] module nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n[236]   name: take('nsgPep-${deployment().name}', 64)\n[237]   scope: spokeResourceGroup\n[238]   params: {\n[239]     name: naming.outputs.resourcesNames.pepNsg\n[240]     location: location\n[241]     tags: tags\n[242]     securityRules: []\n[243]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[244]   }\n[245] }\n[246] \n[247] @description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\n[248] module peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n[249]   name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n[250]   scope: spokeResourceGroup\n[251]   params: {\n[252]     localVnetName: vnetSpoke.outputs.vnetName\n[253]     remoteSubscriptionId: hubSubscriptionId\n[254]     remoteRgName: hubResourceGroupName\n[255]     remoteVnetName: hubVNetName\n[256]   }\n[257] }\n[258] \n[259] @description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\n[260] module peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n[261]   name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n[262]   scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n[263]   params: {\n[264]     localVnetName: hubVNetName\n[265]     remoteSubscriptionId: last(split(subscription().id, '/'))!\n[266]     remoteRgName: spokeResourceGroup.name\n[267]     remoteVnetName: vnetSpoke.outputs.vnetName\n[268]   }\n[269] }\n[270] @description('The Route Table deployment')\n[271] module egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n[272]   name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n[273]   scope: spokeResourceGroup\n[274]   params: {\n[275]     name: naming.outputs.resourcesNames.routeTable\n[276]     location: location\n[277]     tags: tags\n[278]     routes: [\n[279]       {\n[280]         name: 'defaultEgressLockdown'\n[281]         properties: {\n[282]           addressPrefix: '0.0.0.0/0'\n[283]           nextHopType: 'VirtualAppliance'\n[284]           nextHopIpAddress: networkApplianceIpAddress\n[285]         }\n[286]       }\n[287]     ]\n[288]   }\n[289] }\n[290] \n[291] \n[292] @description('An optional Linux virtual machine deployment to act as a jump box.')\n[293] module jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n[294]   name: take('vm-linux-${deployment().name}', 64)\n[295]   scope: spokeResourceGroup\n[296]   params: {\n[297]     location: location\n[298]     tags: tags\n[299]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[300]     vmAdminUsername: vmAdminUsername\n[301]     vmAdminPassword: vmAdminPassword\n[302]     vmSshPublicKey: vmLinuxSshAuthorizedKeys\n[303]     vmSize: vmSize\n[304]     vmVnetName: vnetSpoke.outputs.vnetName\n[305]     vmSubnetName: vmSubnetName\n[306]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[307]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[308]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[309]   }\n[310] }\n[311] \n[312] @description('An optional Windows virtual machine deployment to act as a jump box.')\n[313] module jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n[314]   name: take('vm-windows-${deployment().name}', 64)\n[315]   scope: spokeResourceGroup\n[316]   params: {\n[317]     location: location\n[318]     tags: tags\n[319]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[320]     vmAdminUsername: vmAdminUsername\n[321]     vmAdminPassword: vmAdminPassword\n[322]     vmSize: vmSize\n[323]     vmVnetName: vnetSpoke.outputs.vnetName\n[324]     vmSubnetName: vmSubnetName\n[325]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[326]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[327]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[328]   }\n[329] }\n[330] \n[331] @description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\n[332] module policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n[333]   name: take('policyAssignments-${deployment().name}', 64)\n[334]   scope: spokeResourceGroup\n[335]   params: {\n[336]     location: location   \n[337]     containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n[338]   }\n[339] }\n[340] \n[341] // ------------------\n[342] // OUTPUTS\n[343] // ------------------\n[344] \n[345] resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n[346]   name: vnetSpoke.outputs.vnetName\n[347]   scope: spokeResourceGroup\n[348] \n[349]   resource spokeInfraSubnet 'subnets' existing = {\n[350]     name: spokeInfraSubnetName\n[351]   }\n[352] \n[353]   resource spokePrivateEndpointsSubnet 'subnets' existing = {\n[354]     name: spokePrivateEndpointsSubnetName\n[355]   }\n[356] \n[357]   resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[358]     name: spokeApplicationGatewaySubnetName\n[359]   }\n[360] }\n[361] \n[362] @description('The name of the spoke resource group.')\n[363] output spokeResourceGroupName string = spokeResourceGroup.name\n[364] \n[365] @description('The resource ID of the spoke virtual network.')\n[366] output spokeVNetId string = vnetSpokeCreated.id\n[367] \n[368] @description('The name of the spoke virtual network.')\n[369] output spokeVNetName string = vnetSpokeCreated.name\n[370] \n[371] @description('The resource ID of the spoke infrastructure subnet.')\n[372] output spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n[373] \n[374] @description('The name of the spoke infrastructure subnet.')\n[375] output spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n[376] \n[377] @description('The name of the spoke private endpoints subnet.')\n[378] output spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n[379] \n[380] @description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\n[381] output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n[382] \n[383] @description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\n[384] output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n[385] \n[386] @description('The resource ID of the Azure Log Analytics Workspace.')\n[387] output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmVnetName string\n[11] param vmSubnetName string\n[12] param vmSubnetAddressPrefix string\n[13] param vmNetworkSecurityGroupName string\n[14] param vmNetworkInterfaceName string\n[15] \n[16] param vmAdminUsername string\n[17] \n[18] @secure()\n[19] param vmAdminPassword string\n[20] \n[21] @secure()\n[22] param vmSshPublicKey string\n[23] \n[24] @description('Type of authentication to use on the Virtual Machine. SSH key is recommended.')\n[25] @allowed([\n[26]   'sshPublicKey'\n[27]   'password'\n[28] ])\n[29] param vmAuthenticationType string = 'password'\n[30] \n[31] @description('Optional. The tags to be assigned to the created resources.')\n[32] param tags object = {}\n[33] \n[34] param location string = resourceGroup().location\n[35] \n[36] // ------------------\n[37] // VARIABLES\n[38] // ------------------\n[39] \n[40] var linuxConfiguration = {\n[41]   disablePasswordAuthentication: true\n[42]   ssh: {\n[43]     publicKeys: [\n[44]       {\n[45]         path: '/home/${vmAdminUsername}/.ssh/authorized_keys'\n[46]         keyData: vmSshPublicKey\n[47]       }\n[48]     ]\n[49]   }\n[50] }\n[51] \n[52] // ------------------\n[53] // RESOURCES\n[54] // ------------------\n[55] \n[56] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[57]   name: vmNetworkSecurityGroupName\n[58]   location: location\n[59]   tags: tags\n[60]   properties: {\n[61]     securityRules: []\n[62]   }\n[63] }\n[64] \n[65] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[66]   name: '${vmVnetName}/${vmSubnetName}'\n[67]   properties: {\n[68]     addressPrefix: vmSubnetAddressPrefix\n[69]     networkSecurityGroup: {\n[70]       id: vmNetworkSecurityGroup.id\n[71]     }\n[72]   }\n[73] }\n[74] \n[75] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[76]   name: vmNetworkInterfaceName\n[77]   location: location\n[78]   tags: tags\n[79]   properties: {\n[80]     ipConfigurations: [\n[81]       {\n[82]         name: 'ipconfig1'\n[83]         properties: {\n[84]           subnet: {\n[85]             id: vmSubnet.id\n[86]           }\n[87]           privateIPAllocationMethod: 'Dynamic'\n[88]         }\n[89]       }\n[90]     ]\n[91]   }\n[92] }\n[93] \n[94] resource vm 'Microsoft.Compute/virtualMachines@2021-03-01' = {\n[95]   name: vmName\n[96]   location: location\n[97]   tags: tags\n[98]   properties: {\n[99]     osProfile: {\n[100]       computerName: vmName\n[101]       adminUsername: vmAdminUsername\n[102]       adminPassword: vmAdminPassword\n[103]       linuxConfiguration: ((vmAuthenticationType == 'password') ? null : linuxConfiguration)\n[104]     }\n[105]     hardwareProfile: {\n[106]       vmSize: vmSize\n[107]     }\n[108]     storageProfile: {\n[109]       osDisk: {\n[110]         createOption: 'FromImage'\n[111]         managedDisk: {\n[112]           storageAccountType: 'Standard_LRS'\n[113]         }\n[114]       }\n[115]       imageReference: {\n[116]         publisher: 'Canonical'\n[117]         offer: 'UbuntuServer'\n[118]         sku: '18.04-LTS'\n[119]         version: 'latest'\n[120]       }\n[121]     }\n[122]     networkProfile: {\n[123]       networkInterfaces: [\n[124]         {\n[125]           id: vmNetworkInterface.id\n[126]         }\n[127]       ]\n[128]     }\n[129]   }\n[130] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/windows-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmWindowsOSVersion string = '2016-Datacenter'\n[11] \n[12] param vmVnetName string\n[13] param vmSubnetName string\n[14] param vmSubnetAddressPrefix string\n[15] param vmNetworkSecurityGroupName string\n[16] param vmNetworkInterfaceName string\n[17] \n[18] param vmAdminUsername string\n[19] \n[20] @secure()\n[21] param vmAdminPassword string\n[22] \n[23] @description('Optional. The tags to be assigned to the created resources.')\n[24] param tags object = {}\n[25] \n[26] param location string = resourceGroup().location\n[27] \n[28] // ------------------\n[29] // RESOURCES\n[30] // ------------------\n[31] \n[32] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[33]   name: vmNetworkSecurityGroupName\n[34]   location: location\n[35]   tags: tags\n[36]   properties: {\n[37]     securityRules: []\n[38]   }\n[39] }\n[40] \n[41] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[42]   name: '${vmVnetName}/${vmSubnetName}'\n[43]   properties: {\n[44]     addressPrefix: vmSubnetAddressPrefix\n[45]     networkSecurityGroup: {\n[46]       id: vmNetworkSecurityGroup.id\n[47]     }\n[48]   }\n[49] }\n[50] \n[51] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[52]   name: vmNetworkInterfaceName\n[53]   location: location\n[54]   tags: tags\n[55]   properties: {\n[56]     ipConfigurations: [\n[57]       {\n[58]         name: 'ipconfig1'\n[59]         properties: {\n[60]           subnet: {\n[61]             id: vmSubnet.id\n[62]           }\n[63]           privateIPAllocationMethod: 'Dynamic'\n[64]         }\n[65]       }\n[66]     ]\n[67]   }\n[68] }\n[69] \n[70] resource vm 'Microsoft.Compute/virtualMachines@2021-04-01' =  {\n[71]   name: vmName\n[72]   location: location\n[73]   tags: tags\n[74]   zones: [\n[75]     '1'\n[76]   ]\n[77]   properties: {\n[78]     hardwareProfile: {\n[79]       vmSize: vmSize\n[80]     }\n[81]     storageProfile: {\n[82]       osDisk: {\n[83]         createOption: 'FromImage'\n[84]         managedDisk: {\n[85]           storageAccountType: 'Standard_LRS'\n[86]         }\n[87]       }\n[88]       imageReference: {\n[89]         publisher: 'MicrosoftWindowsServer'\n[90]         offer: 'WindowsServer'\n[91]         sku: vmWindowsOSVersion\n[92]         version: 'latest'\n[93]       }\n[94]     }\n[95]     osProfile: {\n[96]       computerName: vmName\n[97]       adminUsername: vmAdminUsername\n[98]       adminPassword: vmAdminPassword\n[99]     }\n[100]     networkProfile: {\n[101]       networkInterfaces: [\n[102]         {\n[103]           id: vmNetworkInterface.id\n[104]         }\n[105]       ]\n[106]     }\n[107]   }\n[108] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('The location where the resources will be created.')\n[6] param location string\n[7] \n[8] @description('The name of the Container Registry that will be allow-listed by the policy.')\n[9] param containerRegistryName string\n[10] \n[11] var namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n[12] \n[13] // Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\n[14] var builtInPolicies = [  \n[15]   {\n[16]     name: 'authentication-should-be-enabled-on-container-apps'\n[17]     definition: {\n[18]       properties: {\n[19]         displayName: 'Authentication should be enabled on container apps'\n[20]         description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n[21]       }\n[22]     }\n[23]     parameters: {\n[24]       effect: {\n[25]         value: 'AuditIfNotExists'\n[26]       }\n[27]     }\n[28]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n[29]   }\n[30]   {\n[31]     name: 'container-app-environments-should-use-network-injection'\n[32]     definition: {\n[33]       properties: {\n[34]         displayName: 'Container App environments should use network injection'\n[35]         description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n[36]       }\n[37]     }\n[38]     parameters: {\n[39]       effect: {\n[40]         value: 'Audit'\n[41]       }\n[42]     }\n[43]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n[44]   }\n[45]   {\n[46]     name: 'container-app-should-configure-with-volume-mount'\n[47]     definition: {\n[48]       properties: {\n[49]         displayName: 'Container App should configure with volume mount'\n[50]         description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n[51]       }\n[52]     }\n[53]     parameters: {\n[54]       effect: {\n[55]         value: 'Audit'\n[56]       }\n[57]     }\n[58]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n[59]   }\n[60]   {\n[61]     name: 'container-app-should-disable-public-network-access'\n[62]     definition: {\n[63]       properties: {\n[64]         displayName: 'Container Apps environment should disable public network access'\n[65]         description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n[66]       }\n[67]     }\n[68]     parameters: {\n[69]       effect: {\n[70]         value: 'Audit'\n[71]       }\n[72]     }\n[73]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n[74]   }\n[75]   {\n[76]     name: 'container-apps-should-disable-external-network-access'\n[77]     definition: {\n[78]       properties: {\n[79]         displayName: 'Container Apps should disable external network access'\n[80]         description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n[81]       }\n[82]     }\n[83]     parameters: {\n[84]       effect: {\n[85]         value: 'Audit'\n[86]       }\n[87]     }\n[88]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n[89]   }\n[90]   {\n[91]     name: 'containerapps-should-only-be-accessible-over-HTTPS'\n[92]     definition: {\n[93]       properties: {\n[94]         displayName: 'Container Apps should only be accessible over HTTPS'\n[95]         description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n[96]       }\n[97]     }\n[98]     parameters: {\n[99]       effect: {\n[100]         value: 'Audit'\n[101]       }\n[102]     }\n[103]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n[104]   }\n[105]   {\n[106]     name: 'managed-identity-should-be-enabled'\n[107]     definition: {\n[108]       properties: {\n[109]         displayName: 'Managed Identity should be enabled for Container Apps'\n[110]         description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n[111]       }\n[112]     }\n[113]     parameters: {\n[114]       effect: {\n[115]         value: 'Audit'\n[116]       }\n[117]     }\n[118]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n[119]   }\n[120]   \n[121] ]\n[122] \n[123] // credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n[124] // https://github.com/Azure-Samples/aca-azure-policy/tree/main\n[125] var customPolicies = [\n[126]   {\n[127]     name: 'aca-allowed-container-registries'\n[128]     definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n[129]     parameters: {\n[130]       listOfAllowedContainerRegistries: {\n[131]         value: [\n[132]           'mcr.microsoft.com'\n[133]           'docker.io'\n[134]           'ghcr.io'\n[135]           '${containerRegistryName}.azurecr.io'\n[136]         ]\n[137]       }\n[138]       effect: {\n[139]         value: 'Audit'\n[140]       }\n[141]     }\n[142]   }\n[143]   {\n[144]     name: 'aca-replica-count'\n[145]     definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n[146]     parameters: {\n[147]       minReplicas: {\n[148]         value: 0\n[149]       }\n[150]       maxReplicas: {\n[151]         value: 30\n[152]       }\n[153]       effect: {\n[154]         value: 'Audit'\n[155]       }\n[156]     }\n[157]     identity: false\n[158]   }\n[159]   {\n[160]     name: 'aca-no-liveness-probes'\n[161]     definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n[162]     parameters: {\n[163]       effect: {\n[164]         value: 'Audit'\n[165]       }\n[166]     }\n[167]     identity: false\n[168]   }\n[169]   {\n[170]     name: 'aca-no-readiness-probes'\n[171]     definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n[172]     parameters: {\n[173]       effect: {\n[174]         value: 'Audit'\n[175]       }\n[176]     }\n[177]     identity: false\n[178]   }\n[179]   {\n[180]     name: 'aca-no-startup-probes'\n[181]     definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n[182]     parameters: {\n[183]       effect: {\n[184]         value: 'Audit'\n[185]       }\n[186]     }\n[187]     identity: false\n[188]   }\n[189]   {\n[190]     name: 'aca-required-cpu-and-memory'\n[191]     definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n[192]     parameters: {\n[193]       maxCpu: {\n[194]         value: '1.0'\n[195]       }\n[196]       maxMemory: {\n[197]         value: '2.5'\n[198]       }\n[199]       effect: {\n[200]         value: 'Audit'\n[201]       }\n[202]     }\n[203]     identity: false\n[204]   }\n[205]   {\n[206]     name: 'aca-no-monitoring'\n[207]     definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n[208]     parameters: {\n[209]       effect: {\n[210]         value: 'Audit'\n[211]       }\n[212]     }\n[213]     identity: false\n[214]   }\n[215] ]\n[216] \n[217] module builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n[218]   name: 'poAssign_${take(policy.name, 40)}'\n[219]   params: {    \n[220]     location: location\n[221]     policy: policy\n[222]     policyDefinitionId: policy.policyDefinitionId    \n[223]   }  \n[224] }]\n[225] \n[226] \n[227] // resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n[228] //   name: guid(policy.name)\n[229] //   properties: {\n[230] //     description: policy.definition.properties.description\n[231] //     displayName: policy.definition.properties.displayName\n[232] //     metadata: policy.definition.properties.metadata\n[233] //     mode: policy.definition.properties.mode\n[234] //     parameters: policy.definition.properties.parameters\n[235] //     policyType: policy.definition.properties.policyType\n[236] //     policyRule: policy.definition.properties.policyRule\n[237] //   }\n[238] // }]\n[239] \n[240] module policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n[241]   name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n[242]   scope: subscription()\n[243]   params: {\n[244]     policy: policy\n[245]   }\n[246] }]\n[247] \n[248] module customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n[249]   name: 'poAssign_${take(policy.name, 40)}'\n[250]   params: {    \n[251]     location: location\n[252]     policy: policy\n[253]     policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n[254]   } \n[255]   dependsOn: [\n[256]     policyDefinition\n[257]   ] \n[258] }]\n```\n\n## Definitions\n### Action\nSomething being done by the SPECS file or its dependencies when used. Understanding the Action requires understanding the purpose of the script and its dependencies which requires deeper analysis than just describing the basic implementation of the name or steps in the script. The Action is the *why* of the script, not the *how*.\n\n### Target\nSpecific Azure service or cloud component that will be impacted by the Action. Example Targets include Application Insights, Application Gateway, Virtual Machines, and GitHub but could even include other clouds or custom components.\n\n### Deployed\nAny cloud resource that is deployed after this file is used that was not present before this file was used. Cloud resources that were already deployed before this file was used are not considered Deployed, and any cloud resources that are *always* deleted after this file is used are not considered Deployed.\n\n## Guidance on Actions\nIt is important to explain *why* the Action is being taken and *what* is being done in your description of the Action. Describing the purpose of the Action requires that you understand the value of the performed step. When you write the description of the Action, you should explain *why* and *what* is being done rather than just describing the implementation. For example, a script that clones a git repo doesn't exist to clone a git repo. It exists to download the source code that does something. Your description of the Action should explain what the script is doing with the source code that it downloads with as much detail as you can infer from the provided file contents.\n\n\n## Task 1\n\nIdentify security issues in SPECS files. Examine each SPECS file carefully.\nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n-  Do NOT report notice annotations, only error and warning.\n\n## Task 2\n\n1. Review the SPECS files and its dependencies that the user uploads\n2. Perform a very careful analysis of all the file contents that you receive to really understand what is happening\n3. Develop a lengthy list of actions that are being performed by the file and its dependencies. Make sure that you understand what is being done and why it is being done in creating this list using the approach from \"Guidance on Actions\" above.\n4. Double check your list of actions to make sure that you have a complete list of actions and add any that you missed\n5. Organize the actions by the target services or cloud components that are impacted by the actions\n6. Identify any cloud resources that are deployed after this file is used that were not present before this file was used and add them to the \"Deployed\" list. If nothing that you find directly within the provided file content meets this criteria, please leave the list empty.\n7. Generate a JSON file, targets.json, with the results following the TARGET_SCHEMA JSON schema:\n\nTARGET_SCHEMA:\n```\n{\n  \"type\": \"array\",\n  \"description\": \"An array of targets\",\n  \"items\": {\n    \"description\": \"A target that is impacted by the actions in the file\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"description\": \"Identifier of the target\",\n        \"type\": \"string\"\n      },\n      \"source\": {\n        \"description\": \"Path of the file defining the target\",\n        \"type\": \"string\"\n      },\n      \"action\": {\n        \"description\": \"What is being done on the cloud resource\",\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n"}],"stream":true},"val":"## Task 1 Annotations\n\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=61,endLine=62::Hardcoded credentials are a security risk. Use managed identities or secret management systems instead. [Learn more](https://docs.microsoft.com/azure/security/fundamentals/identity-management-best-practices)\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=66,endLine=66::SSH keys should not be hardcoded in templates. Use Key Vault to store SSH keys securely. [Learn more](https://docs.microsoft.com/azure/key-vault/secrets/quick-create-portal)\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=19,endLine=20::Resource group names should not be hardcoded or constructed in the template. Consider passing the full resource group name as a parameter.\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=85,endLine=86::Hardcoded location mapping can lead to maintenance issues and errors if Azure regions are updated or added. Consider using a more dynamic approach to handle location mappings.\n\n## Task 2 Analysis and JSON Generation\n\n### Analysis\n\nThe SPECS file `deploy.spoke.bicep` and its dependencies define the deployment of a spoke architecture within an Azure environment. The spoke architecture is a part of a larger hub-and-spoke network topology, which is commonly used in enterprise environments to manage network traffic and provide security boundaries between different workloads.\n\nThe SPECS file performs the following actions:\n\n- **Resource Group Creation**: A new resource group is created or an existing name is used based on the provided parameters. This resource group serves as a container for all resources related to the spoke.\n- **Naming Convention Application**: A naming module is used to apply consistent naming conventions across all resources.\n- **Virtual Network (VNet) Setup**: A virtual network is set up with subnets for infrastructure, private endpoints, application gateway, and optionally a jump box, depending on the parameters provided.\n- **Network Security Groups (NSG) Configuration**: NSGs are defined and associated with the subnets to control inbound and outbound network traffic.\n- **Log Analytics Workspace Deployment**: A workspace is deployed for logging and monitoring of the resources within the spoke.\n- **Peering Configuration**: Network peering is established between the spoke and hub virtual networks, allowing for secure communication between them.\n- **Conditional Resource Deployment**: Depending on the parameters, optional resources such as an Application Gateway, jump box VMs (Linux or Windows), and policy assignments are deployed.\n- **Policy Assignments**: Azure policies are assigned to enforce best practices and compliance within the spoke subscription.\n\nThe dependencies `linux-vm.bicep` and `windows-vm.bicep` define the deployment of Linux and Windows virtual machines, respectively, which can be used as jump boxes for secure administrative access to the spoke environment.\n\nThe dependency `policy-definition.module.bicep` defines the assignment of built-in and custom Azure policies to the spoke subscription, focusing on security and compliance for Azure Container Apps.\n\n### Deployed\n\nThe following resources are deployed by the SPECS file:\n\n- Resource Group\n- Virtual Network with subnets\n- Network Security Groups\n- Log Analytics Workspace\n- Virtual Machines (conditional)\n- Azure Policy Assignments\n\n### targets.json Generation\n\nFile ./targets.json:\n```json\n[\n  {\n    \"name\": \"Resource Group\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"A new resource group is created to contain all resources related to the spoke, providing a management boundary.\"\n  },\n  {\n    \"name\": \"Virtual Network\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"A virtual network is set up with various subnets to support the infrastructure, private endpoints, and application gateway, facilitating network segmentation and traffic management.\"\n  },\n  {\n    \"name\": \"Network Security Groups\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Network Security Groups are configured for each subnet to control inbound and outbound network traffic, enhancing security.\"\n  },\n  {\n    \"name\": \"Log Analytics Workspace\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"A Log Analytics Workspace is deployed for centralized logging and monitoring of the spoke resources.\"\n  },\n  {\n    \"name\": \"Virtual Machines\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Conditional deployment of Linux or Windows virtual machines to act as jump boxes for secure administrative access.\"\n  },\n  {\n    \"name\": \"Azure Policy Assignments\",\n    \"source\": \"deploy.spoke.bicep\",\n    \"action\": \"Azure policies are assigned to enforce security best practices and compliance within the spoke subscription.\"\n  }\n]\n```"}
{"sha":"8dcc9f34c5c64f0e42257d221f18d22d99fcbeaefec863615aede75e4a33a0a9","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Files\n\nSPECS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created. This should be the same region as the hub.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param spokeResourceGroupName string\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] // Hub\n[26] @description('The resource ID of the existing hub virtual network.')\n[27] param hubVNetId string\n[28] \n[29] // Spoke\n[30] @description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\n[31] param spokeVNetAddressPrefixes array\n[32] \n[33] @description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\n[34] param spokeInfraSubnetName string = 'snet-infra'\n[35] \n[36] @description('CIDR of the spoke infrastructure subnet.')\n[37] param spokeInfraSubnetAddressPrefix string\n[38] \n[39] @description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\n[40] param spokePrivateEndpointsSubnetName string = 'snet-pep'\n[41] \n[42] @description('CIDR of the spoke private endpoints subnet.')\n[43] param spokePrivateEndpointsSubnetAddressPrefix string\n[44] \n[45] @description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\n[46] param spokeApplicationGatewaySubnetName string = 'snet-agw'\n[47] \n[48] @description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\n[49] param spokeApplicationGatewaySubnetAddressPrefix string\n[50] \n[51] @description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\n[52] param networkApplianceIpAddress string\n[53] \n[54] @description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\n[55] param vmSize string\n[56] \n[57] @description('The username to use for the jump box.')\n[58] param vmAdminUsername string\n[59] \n[60] @description('The password to use for the jump box.')\n[61] @secure()\n[62] param vmAdminPassword string\n[63] \n[64] @description('The SSH public key to use for the jump box. Only relevant for Linux.')\n[65] @secure()\n[66] param vmLinuxSshAuthorizedKeys string\n[67] \n[68] @description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n[69] @allowed([ 'linux', 'windows', 'none' ])\n[70] param vmJumpboxOSType string = 'none'\n[71] \n[72] @description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\n[73] param vmSubnetName string = 'snet-jumpbox'\n[74] \n[75] @description('CIDR to use for the jump box subnet.')\n[76] param vmJumpBoxSubnetAddressPrefix string\n[77] \n[78] @description('Optional, default value is true. If true, Azure Policies will be deployed')\n[79] param deployAzurePolicies bool = true\n[80] \n[81] // ------------------\n[82] // VARIABLES\n[83] // ------------------\n[84] \n[85] //Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\n[86] var locationVar = location == 'francecentral' ? 'centralfrance' : location\n[87] \n[88] // load as text (and not as Json) to replace <location> placeholder in the nsg rules\n[89] var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\n[90] var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\n[91] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[92] \n[93] var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[94] var hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n[95] \n[96] @description('The ID of the subscription containing the hub virtual network.')\n[97] var hubSubscriptionId = hubVNetResourceIdTokens[2]\n[98] \n[99] @description('The name of the resource group containing the hub virtual network.')\n[100] var hubResourceGroupName = hubVNetResourceIdTokens[4]\n[101] \n[102] @description('The name of the hub virtual network.')\n[103] var hubVNetName = hubVNetResourceIdTokens[8]\n[104] \n[105] // Subnet definition taking in consideration feature flags\n[106] var defaultSubnets = [\n[107]   {\n[108]     name: spokeInfraSubnetName\n[109]     properties: {\n[110]       addressPrefix: spokeInfraSubnetAddressPrefix\n[111]       networkSecurityGroup: {\n[112]         id: nsgContainerAppsEnvironment.outputs.nsgId\n[113]       }\n[114]       routeTable: {\n[115]         id: egressLockdownUdr.outputs.resourceId\n[116]       }\n[117]       delegations: [\n[118]         {\n[119]           name: 'envdelegation'\n[120]           properties: {\n[121]             serviceName: 'Microsoft.App/environments'\n[122]           }\n[123]         }\n[124]       ]\n[125]     }\n[126]   }\n[127]   {\n[128]     name: spokePrivateEndpointsSubnetName\n[129]     properties: {\n[130]       addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n[131]       networkSecurityGroup: {\n[132]         id: nsgPep.outputs.nsgId\n[133]       }\n[134]     }\n[135]   }\n[136] ]\n[137] \n[138] // Append optional application gateway subnet, if required\n[139] var appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n[140]     {\n[141]       name: spokeApplicationGatewaySubnetName\n[142]       properties: {\n[143]         addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n[144]         networkSecurityGroup: {\n[145]           id: nsgAppGw.outputs.nsgId\n[146]         }\n[147]       }\n[148]     }\n[149]   ]) : defaultSubnets\n[150] \n[151]   //Append optional jumpbox subnet, if required\n[152] var spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n[153]     {\n[154]       name: vmSubnetName\n[155]       properties: {\n[156]         addressPrefix: vmJumpBoxSubnetAddressPrefix\n[157]       }\n[158]     }\n[159]   ]) : appGwAndDefaultSubnets\n[160] \n[161] // ------------------\n[162] // RESOURCES\n[163] // ------------------\n[164] \n[165] \n[166] @description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\n[167] resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[168]   name: rgSpokeName\n[169]   location: location\n[170]   tags: tags\n[171] }\n[172] \n[173] @description('User-configured naming rules')\n[174] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[175]   scope: spokeResourceGroup\n[176]   name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n[177]   params: {\n[178]     uniqueId: uniqueString(spokeResourceGroup.id)\n[179]     environment: environment\n[180]     workloadName: workloadName\n[181]     location: location\n[182]   }\n[183] }\n[184] \n[185] @description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\n[186] module vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n[187]   name: take('vnetSpoke-${deployment().name}', 64)\n[188]   scope: spokeResourceGroup\n[189]   params: {\n[190]     name: naming.outputs.resourcesNames.vnetSpoke\n[191]     location: location\n[192]     tags: tags\n[193]     subnets: spokeSubnets\n[194]     vnetAddressPrefixes: spokeVNetAddressPrefixes\n[195]   }\n[196] }\n[197] \n[198] @description('The log sink for Azure Diagnostics')\n[199] module logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[200]   name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n[201]   scope: spokeResourceGroup\n[202]   params: {\n[203]     location: location\n[204]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[205]   }\n[206] }\n[207] \n[208] @description('Network security group rules for the Container Apps cluster.')\n[209] module nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n[210]   name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n[211]   scope: spokeResourceGroup\n[212]   params: {\n[213]     name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n[214]     location: location\n[215]     tags: tags\n[216]     securityRules: nsgCaeRules.securityRules\n[217]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[218]   }\n[219] }\n[220] \n[221] @description('NSG Rules for the Application Gateway.')\n[222] module nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[223]   name: take('nsgAppGw-${deployment().name}', 64)\n[224]   scope: spokeResourceGroup\n[225]   params: {\n[226]     name: naming.outputs.resourcesNames.applicationGatewayNsg\n[227]     location: location\n[228]     tags: tags\n[229]     securityRules: nsgAppGwRules\n[230]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[231]   }\n[232] }\n[233] \n[234] @description('NSG Rules for the private enpoint subnet.')\n[235] module nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n[236]   name: take('nsgPep-${deployment().name}', 64)\n[237]   scope: spokeResourceGroup\n[238]   params: {\n[239]     name: naming.outputs.resourcesNames.pepNsg\n[240]     location: location\n[241]     tags: tags\n[242]     securityRules: []\n[243]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[244]   }\n[245] }\n[246] \n[247] @description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\n[248] module peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n[249]   name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n[250]   scope: spokeResourceGroup\n[251]   params: {\n[252]     localVnetName: vnetSpoke.outputs.vnetName\n[253]     remoteSubscriptionId: hubSubscriptionId\n[254]     remoteRgName: hubResourceGroupName\n[255]     remoteVnetName: hubVNetName\n[256]   }\n[257] }\n[258] \n[259] @description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\n[260] module peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n[261]   name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n[262]   scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n[263]   params: {\n[264]     localVnetName: hubVNetName\n[265]     remoteSubscriptionId: last(split(subscription().id, '/'))!\n[266]     remoteRgName: spokeResourceGroup.name\n[267]     remoteVnetName: vnetSpoke.outputs.vnetName\n[268]   }\n[269] }\n[270] @description('The Route Table deployment')\n[271] module egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n[272]   name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n[273]   scope: spokeResourceGroup\n[274]   params: {\n[275]     name: naming.outputs.resourcesNames.routeTable\n[276]     location: location\n[277]     tags: tags\n[278]     routes: [\n[279]       {\n[280]         name: 'defaultEgressLockdown'\n[281]         properties: {\n[282]           addressPrefix: '0.0.0.0/0'\n[283]           nextHopType: 'VirtualAppliance'\n[284]           nextHopIpAddress: networkApplianceIpAddress\n[285]         }\n[286]       }\n[287]     ]\n[288]   }\n[289] }\n[290] \n[291] \n[292] @description('An optional Linux virtual machine deployment to act as a jump box.')\n[293] module jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n[294]   name: take('vm-linux-${deployment().name}', 64)\n[295]   scope: spokeResourceGroup\n[296]   params: {\n[297]     location: location\n[298]     tags: tags\n[299]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[300]     vmAdminUsername: vmAdminUsername\n[301]     vmAdminPassword: vmAdminPassword\n[302]     vmSshPublicKey: vmLinuxSshAuthorizedKeys\n[303]     vmSize: vmSize\n[304]     vmVnetName: vnetSpoke.outputs.vnetName\n[305]     vmSubnetName: vmSubnetName\n[306]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[307]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[308]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[309]   }\n[310] }\n[311] \n[312] @description('An optional Windows virtual machine deployment to act as a jump box.')\n[313] module jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n[314]   name: take('vm-windows-${deployment().name}', 64)\n[315]   scope: spokeResourceGroup\n[316]   params: {\n[317]     location: location\n[318]     tags: tags\n[319]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[320]     vmAdminUsername: vmAdminUsername\n[321]     vmAdminPassword: vmAdminPassword\n[322]     vmSize: vmSize\n[323]     vmVnetName: vnetSpoke.outputs.vnetName\n[324]     vmSubnetName: vmSubnetName\n[325]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[326]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[327]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[328]   }\n[329] }\n[330] \n[331] @description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\n[332] module policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n[333]   name: take('policyAssignments-${deployment().name}', 64)\n[334]   scope: spokeResourceGroup\n[335]   params: {\n[336]     location: location   \n[337]     containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n[338]   }\n[339] }\n[340] \n[341] // ------------------\n[342] // OUTPUTS\n[343] // ------------------\n[344] \n[345] resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n[346]   name: vnetSpoke.outputs.vnetName\n[347]   scope: spokeResourceGroup\n[348] \n[349]   resource spokeInfraSubnet 'subnets' existing = {\n[350]     name: spokeInfraSubnetName\n[351]   }\n[352] \n[353]   resource spokePrivateEndpointsSubnet 'subnets' existing = {\n[354]     name: spokePrivateEndpointsSubnetName\n[355]   }\n[356] \n[357]   resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[358]     name: spokeApplicationGatewaySubnetName\n[359]   }\n[360] }\n[361] \n[362] @description('The name of the spoke resource group.')\n[363] output spokeResourceGroupName string = spokeResourceGroup.name\n[364] \n[365] @description('The resource ID of the spoke virtual network.')\n[366] output spokeVNetId string = vnetSpokeCreated.id\n[367] \n[368] @description('The name of the spoke virtual network.')\n[369] output spokeVNetName string = vnetSpokeCreated.name\n[370] \n[371] @description('The resource ID of the spoke infrastructure subnet.')\n[372] output spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n[373] \n[374] @description('The name of the spoke infrastructure subnet.')\n[375] output spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n[376] \n[377] @description('The name of the spoke private endpoints subnet.')\n[378] output spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n[379] \n[380] @description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\n[381] output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n[382] \n[383] @description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\n[384] output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n[385] \n[386] @description('The resource ID of the Azure Log Analytics Workspace.')\n[387] output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/linux-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmVnetName string\n[11] param vmSubnetName string\n[12] param vmSubnetAddressPrefix string\n[13] param vmNetworkSecurityGroupName string\n[14] param vmNetworkInterfaceName string\n[15] \n[16] param vmAdminUsername string\n[17] \n[18] @secure()\n[19] param vmAdminPassword string\n[20] \n[21] @secure()\n[22] param vmSshPublicKey string\n[23] \n[24] @description('Type of authentication to use on the Virtual Machine. SSH key is recommended.')\n[25] @allowed([\n[26]   'sshPublicKey'\n[27]   'password'\n[28] ])\n[29] param vmAuthenticationType string = 'password'\n[30] \n[31] @description('Optional. The tags to be assigned to the created resources.')\n[32] param tags object = {}\n[33] \n[34] param location string = resourceGroup().location\n[35] \n[36] // ------------------\n[37] // VARIABLES\n[38] // ------------------\n[39] \n[40] var linuxConfiguration = {\n[41]   disablePasswordAuthentication: true\n[42]   ssh: {\n[43]     publicKeys: [\n[44]       {\n[45]         path: '/home/${vmAdminUsername}/.ssh/authorized_keys'\n[46]         keyData: vmSshPublicKey\n[47]       }\n[48]     ]\n[49]   }\n[50] }\n[51] \n[52] // ------------------\n[53] // RESOURCES\n[54] // ------------------\n[55] \n[56] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[57]   name: vmNetworkSecurityGroupName\n[58]   location: location\n[59]   tags: tags\n[60]   properties: {\n[61]     securityRules: []\n[62]   }\n[63] }\n[64] \n[65] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[66]   name: '${vmVnetName}/${vmSubnetName}'\n[67]   properties: {\n[68]     addressPrefix: vmSubnetAddressPrefix\n[69]     networkSecurityGroup: {\n[70]       id: vmNetworkSecurityGroup.id\n[71]     }\n[72]   }\n[73] }\n[74] \n[75] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[76]   name: vmNetworkInterfaceName\n[77]   location: location\n[78]   tags: tags\n[79]   properties: {\n[80]     ipConfigurations: [\n[81]       {\n[82]         name: 'ipconfig1'\n[83]         properties: {\n[84]           subnet: {\n[85]             id: vmSubnet.id\n[86]           }\n[87]           privateIPAllocationMethod: 'Dynamic'\n[88]         }\n[89]       }\n[90]     ]\n[91]   }\n[92] }\n[93] \n[94] resource vm 'Microsoft.Compute/virtualMachines@2021-03-01' = {\n[95]   name: vmName\n[96]   location: location\n[97]   tags: tags\n[98]   properties: {\n[99]     osProfile: {\n[100]       computerName: vmName\n[101]       adminUsername: vmAdminUsername\n[102]       adminPassword: vmAdminPassword\n[103]       linuxConfiguration: ((vmAuthenticationType == 'password') ? null : linuxConfiguration)\n[104]     }\n[105]     hardwareProfile: {\n[106]       vmSize: vmSize\n[107]     }\n[108]     storageProfile: {\n[109]       osDisk: {\n[110]         createOption: 'FromImage'\n[111]         managedDisk: {\n[112]           storageAccountType: 'Standard_LRS'\n[113]         }\n[114]       }\n[115]       imageReference: {\n[116]         publisher: 'Canonical'\n[117]         offer: 'UbuntuServer'\n[118]         sku: '18.04-LTS'\n[119]         version: 'latest'\n[120]       }\n[121]     }\n[122]     networkProfile: {\n[123]       networkInterfaces: [\n[124]         {\n[125]           id: vmNetworkInterface.id\n[126]         }\n[127]       ]\n[128]     }\n[129]   }\n[130] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/vm/windows-vm.bicep\n[1] targetScope = 'resourceGroup'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] param vmName string\n[8] param vmSize string\n[9] \n[10] param vmWindowsOSVersion string = '2016-Datacenter'\n[11] \n[12] param vmVnetName string\n[13] param vmSubnetName string\n[14] param vmSubnetAddressPrefix string\n[15] param vmNetworkSecurityGroupName string\n[16] param vmNetworkInterfaceName string\n[17] \n[18] param vmAdminUsername string\n[19] \n[20] @secure()\n[21] param vmAdminPassword string\n[22] \n[23] @description('Optional. The tags to be assigned to the created resources.')\n[24] param tags object = {}\n[25] \n[26] param location string = resourceGroup().location\n[27] \n[28] // ------------------\n[29] // RESOURCES\n[30] // ------------------\n[31] \n[32] resource vmNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2020-06-01' = {\n[33]   name: vmNetworkSecurityGroupName\n[34]   location: location\n[35]   tags: tags\n[36]   properties: {\n[37]     securityRules: []\n[38]   }\n[39] }\n[40] \n[41] resource vmSubnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' = {\n[42]   name: '${vmVnetName}/${vmSubnetName}'\n[43]   properties: {\n[44]     addressPrefix: vmSubnetAddressPrefix\n[45]     networkSecurityGroup: {\n[46]       id: vmNetworkSecurityGroup.id\n[47]     }\n[48]   }\n[49] }\n[50] \n[51] resource vmNetworkInterface 'Microsoft.Network/networkInterfaces@2021-02-01' = {\n[52]   name: vmNetworkInterfaceName\n[53]   location: location\n[54]   tags: tags\n[55]   properties: {\n[56]     ipConfigurations: [\n[57]       {\n[58]         name: 'ipconfig1'\n[59]         properties: {\n[60]           subnet: {\n[61]             id: vmSubnet.id\n[62]           }\n[63]           privateIPAllocationMethod: 'Dynamic'\n[64]         }\n[65]       }\n[66]     ]\n[67]   }\n[68] }\n[69] \n[70] resource vm 'Microsoft.Compute/virtualMachines@2021-04-01' =  {\n[71]   name: vmName\n[72]   location: location\n[73]   tags: tags\n[74]   zones: [\n[75]     '1'\n[76]   ]\n[77]   properties: {\n[78]     hardwareProfile: {\n[79]       vmSize: vmSize\n[80]     }\n[81]     storageProfile: {\n[82]       osDisk: {\n[83]         createOption: 'FromImage'\n[84]         managedDisk: {\n[85]           storageAccountType: 'Standard_LRS'\n[86]         }\n[87]       }\n[88]       imageReference: {\n[89]         publisher: 'MicrosoftWindowsServer'\n[90]         offer: 'WindowsServer'\n[91]         sku: vmWindowsOSVersion\n[92]         version: 'latest'\n[93]       }\n[94]     }\n[95]     osProfile: {\n[96]       computerName: vmName\n[97]       adminUsername: vmAdminUsername\n[98]       adminPassword: vmAdminPassword\n[99]     }\n[100]     networkProfile: {\n[101]       networkInterfaces: [\n[102]         {\n[103]           id: vmNetworkInterface.id\n[104]         }\n[105]       ]\n[106]     }\n[107]   }\n[108] }\n```\n\nDEPS:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/./modules/policy/policy-definition.module.bicep\n[1] // ------------------\n[2] //    PARAMETERS\n[3] // ------------------\n[4] \n[5] @description('The location where the resources will be created.')\n[6] param location string\n[7] \n[8] @description('The name of the Container Registry that will be allow-listed by the policy.')\n[9] param containerRegistryName string\n[10] \n[11] var namingRules = json(loadTextContent('../../../../../../shared/bicep/naming/naming-rules.jsonc'))\n[12] \n[13] // Azure Container Apps Built-in Policy Definitions: https://learn.microsoft.com/azure/container-apps/policy-reference#policy-definitions\n[14] var builtInPolicies = [  \n[15]   {\n[16]     name: 'authentication-should-be-enabled-on-container-apps'\n[17]     definition: {\n[18]       properties: {\n[19]         displayName: 'Authentication should be enabled on container apps'\n[20]         description: 'Container Apps Authentication is a feature that can prevent anonymous HTTP requests from reaching the Container App, or authenticate those that have tokens before they reach the Container App'\n[21]       }\n[22]     }\n[23]     parameters: {\n[24]       effect: {\n[25]         value: 'AuditIfNotExists'\n[26]       }\n[27]     }\n[28]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/2b585559-a78e-4cc4-b1aa-fb169d2f6b96'\n[29]   }\n[30]   {\n[31]     name: 'container-app-environments-should-use-network-injection'\n[32]     definition: {\n[33]       properties: {\n[34]         displayName: 'Container App environments should use network injection'\n[35]         description: 'Container Apps environments should use virtual network injection to: 1.Isolate Container Apps from the public internet 2.Enable network integration with resources on-premises or in other Azure virtual networks 3.Achieve more granular control over network traffic flowing to and from the environment'    \n[36]       }\n[37]     }\n[38]     parameters: {\n[39]       effect: {\n[40]         value: 'Audit'\n[41]       }\n[42]     }\n[43]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/8b346db6-85af-419b-8557-92cee2c0f9bb'\n[44]   }\n[45]   {\n[46]     name: 'container-app-should-configure-with-volume-mount'\n[47]     definition: {\n[48]       properties: {\n[49]         displayName: 'Container App should configure with volume mount'\n[50]         description: 'Enforce the use of volume mounts for Container Apps to ensure availability of persistent storage capacity'    \n[51]       }\n[52]     }\n[53]     parameters: {\n[54]       effect: {\n[55]         value: 'Audit'\n[56]       }\n[57]     }\n[58]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c9f3fbb-739d-4844-8e42-97e3be6450e0'\n[59]   }\n[60]   {\n[61]     name: 'container-app-should-disable-public-network-access'\n[62]     definition: {\n[63]       properties: {\n[64]         displayName: 'Container Apps environment should disable public network access'\n[65]         description: 'Disable public network access to improve security by exposing the Container Apps environment through an internal load balancer. This removes the need for a public IP address and prevents internet access to all Container Apps within the environment.'    \n[66]       }\n[67]     }\n[68]     parameters: {\n[69]       effect: {\n[70]         value: 'Audit'\n[71]       }\n[72]     }\n[73]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/d074ddf8-01a5-4b5e-a2b8-964aed452c0a'\n[74]   }\n[75]   {\n[76]     name: 'container-apps-should-disable-external-network-access'\n[77]     definition: {\n[78]       properties: {\n[79]         displayName: 'Container Apps should disable external network access'\n[80]         description: 'Disable external network access to your Container Apps by enforcing internal-only ingress. This will ensure inbound communication for Container Apps is limited to callers within the Container Apps environment'    \n[81]       }\n[82]     }\n[83]     parameters: {\n[84]       effect: {\n[85]         value: 'Audit'\n[86]       }\n[87]     }\n[88]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/783ea2a8-b8fd-46be-896a-9ae79643a0b1'\n[89]   }\n[90]   {\n[91]     name: 'containerapps-should-only-be-accessible-over-HTTPS'\n[92]     definition: {\n[93]       properties: {\n[94]         displayName: 'Container Apps should only be accessible over HTTPS'\n[95]         description: 'Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. Disabling \"allowInsecur\" will result in the automatic redirection of requests from HTTP to HTTPS connections for container apps.'    \n[96]       }\n[97]     }\n[98]     parameters: {\n[99]       effect: {\n[100]         value: 'Audit'\n[101]       }\n[102]     }\n[103]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/0e80e269-43a4-4ae9-b5bc-178126b8a5cb'\n[104]   }\n[105]   {\n[106]     name: 'managed-identity-should-be-enabled'\n[107]     definition: {\n[108]       properties: {\n[109]         displayName: 'Managed Identity should be enabled for Container Apps'\n[110]         description: 'Enforcing managed identity ensures Container Apps can securely authenticate to any resource that supports Azure AD authentication'    \n[111]       }\n[112]     }\n[113]     parameters: {\n[114]       effect: {\n[115]         value: 'Audit'\n[116]       }\n[117]     }\n[118]     policyDefinitionId: '/providers/Microsoft.Authorization/policyDefinitions/b874ab2d-72dd-47f1-8cb5-4a306478a4e7'\n[119]   }\n[120]   \n[121] ]\n[122] \n[123] // credits: https://techcommunity.microsoft.com/t5/fasttrack-for-azure/azure-policy-for-azure-container-apps-yes-please/ba-p/3775200\n[124] // https://github.com/Azure-Samples/aca-azure-policy/tree/main\n[125] var customPolicies = [\n[126]   {\n[127]     name: 'aca-allowed-container-registries'\n[128]     definition: json(loadTextContent('policy-definitions/aca-allowed-container-registries.json'))\n[129]     parameters: {\n[130]       listOfAllowedContainerRegistries: {\n[131]         value: [\n[132]           'mcr.microsoft.com'\n[133]           'docker.io'\n[134]           'ghcr.io'\n[135]           '${containerRegistryName}.azurecr.io'\n[136]         ]\n[137]       }\n[138]       effect: {\n[139]         value: 'Audit'\n[140]       }\n[141]     }\n[142]   }\n[143]   {\n[144]     name: 'aca-replica-count'\n[145]     definition: json(loadTextContent('policy-definitions/aca-replica-count.json'))\n[146]     parameters: {\n[147]       minReplicas: {\n[148]         value: 0\n[149]       }\n[150]       maxReplicas: {\n[151]         value: 30\n[152]       }\n[153]       effect: {\n[154]         value: 'Audit'\n[155]       }\n[156]     }\n[157]     identity: false\n[158]   }\n[159]   {\n[160]     name: 'aca-no-liveness-probes'\n[161]     definition: json(loadTextContent('policy-definitions/aca-no-liveness-probes.json'))\n[162]     parameters: {\n[163]       effect: {\n[164]         value: 'Audit'\n[165]       }\n[166]     }\n[167]     identity: false\n[168]   }\n[169]   {\n[170]     name: 'aca-no-readiness-probes'\n[171]     definition: json(loadTextContent('policy-definitions/aca-no-readiness-probes.json'))\n[172]     parameters: {\n[173]       effect: {\n[174]         value: 'Audit'\n[175]       }\n[176]     }\n[177]     identity: false\n[178]   }\n[179]   {\n[180]     name: 'aca-no-startup-probes'\n[181]     definition: json(loadTextContent('policy-definitions/aca-no-startup-probes.json'))\n[182]     parameters: {\n[183]       effect: {\n[184]         value: 'Audit'\n[185]       }\n[186]     }\n[187]     identity: false\n[188]   }\n[189]   {\n[190]     name: 'aca-required-cpu-and-memory'\n[191]     definition: json(loadTextContent('policy-definitions/aca-required-cpu-and-memory.json'))\n[192]     parameters: {\n[193]       maxCpu: {\n[194]         value: '1.0'\n[195]       }\n[196]       maxMemory: {\n[197]         value: '2.5'\n[198]       }\n[199]       effect: {\n[200]         value: 'Audit'\n[201]       }\n[202]     }\n[203]     identity: false\n[204]   }\n[205]   {\n[206]     name: 'aca-no-monitoring'\n[207]     definition: json(loadTextContent('policy-definitions/aca-no-monitoring.json'))\n[208]     parameters: {\n[209]       effect: {\n[210]         value: 'Audit'\n[211]       }\n[212]     }\n[213]     identity: false\n[214]   }\n[215] ]\n[216] \n[217] module builtInPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in builtInPolicies: {\n[218]   name: 'poAssign_${take(policy.name, 40)}'\n[219]   params: {    \n[220]     location: location\n[221]     policy: policy\n[222]     policyDefinitionId: policy.policyDefinitionId    \n[223]   }  \n[224] }]\n[225] \n[226] \n[227] // resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = [for policy in customPolicies: {\n[228] //   name: guid(policy.name)\n[229] //   properties: {\n[230] //     description: policy.definition.properties.description\n[231] //     displayName: policy.definition.properties.displayName\n[232] //     metadata: policy.definition.properties.metadata\n[233] //     mode: policy.definition.properties.mode\n[234] //     parameters: policy.definition.properties.parameters\n[235] //     policyType: policy.definition.properties.policyType\n[236] //     policyRule: policy.definition.properties.policyRule\n[237] //   }\n[238] // }]\n[239] \n[240] module policyDefinition 'policy-definition.bicep' = [for policy in customPolicies: {\n[241]   name: 'poDef_${namingRules.regionAbbreviations[toLower(location)]}_${guid(policy.name)}'\n[242]   scope: subscription()\n[243]   params: {\n[244]     policy: policy\n[245]   }\n[246] }]\n[247] \n[248] module customPolicyAssignment 'policy-assignment.bicep' = [for (policy, i) in customPolicies: {\n[249]   name: 'poAssign_${take(policy.name, 40)}'\n[250]   params: {    \n[251]     location: location\n[252]     policy: policy\n[253]     policyDefinitionId: policyDefinition[i].outputs.policyDefinitionId  \n[254]   } \n[255]   dependsOn: [\n[256]     policyDefinition\n[257]   ] \n[258] }]\n```\n\n## Definitions\n### Action\nSomething being done by the SPECS file or its dependencies when used. Understanding the Action requires understanding the purpose of the script and its dependencies which requires deeper analysis than just describing the basic implementation of the name or steps in the script. The Action is the *why* of the script, not the *how*.\n\n### Target\nSpecific Azure service or cloud component that will be impacted by the Action. Example Targets include Application Insights, Application Gateway, Virtual Machines, and GitHub but could even include other clouds or custom components.\n\n### Deployed\nAny cloud resource that is deployed after this file is used that was not present before this file was used. Cloud resources that were already deployed before this file was used are not considered Deployed, and any cloud resources that are *always* deleted after this file is used are not considered Deployed.\n\n## Guidance on Actions\nIt is important to explain *why* the Action is being taken and *what* is being done in your description of the Action. Describing the purpose of the Action requires that you understand the value of the performed step. When you write the description of the Action, you should explain *why* and *what* is being done rather than just describing the implementation. For example, a script that clones a git repo doesn't exist to clone a git repo. It exists to download the source code that does something. Your description of the Action should explain what the script is doing with the source code that it downloads with as much detail as you can infer from the provided file contents.\n\n\n## Task 1\n\nIdentify security issues in SPECS files. Examine each SPECS file carefully.\nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n-  Do NOT report notice annotations, only error and warning.\n\n## Task 2\n\n1. Review the SPECS files and its dependencies that the user uploads\n2. Perform a very careful analysis of all the file contents that you receive to really understand what is happening\n3. Develop a lengthy list of actions that are being performed by the file and its dependencies. Make sure that you understand what is being done and why it is being done in creating this list using the approach from \"Guidance on Actions\" above.\n4. Double check your list of actions to make sure that you have a complete list of actions and add any that you missed\n5. Organize the actions by the target services or cloud components that are impacted by the actions\n6. Identify any cloud resources that are deployed after this file is used that were not present before this file was used and add them to the \"Deployed\" list. If nothing that you find directly within the provided file content meets this criteria, please leave the list empty.\n7. Generate a YAML file, targets.yaml, with the results following the TARGET_SCHEMA JSON schema:\n\nTARGET_SCHEMA:\n```\n{\n  \"type\": \"array\",\n  \"description\": \"An array of targets\",\n  \"items\": {\n    \"description\": \"A target that is impacted by the actions in the file\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"description\": \"Identifier of the target\",\n        \"type\": \"string\"\n      },\n      \"source\": {\n        \"description\": \"Path of the file defining the target\",\n        \"type\": \"string\"\n      },\n      \"action\": {\n        \"description\": \"What is being done on the cloud resource\",\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n"}],"stream":true},"val":"::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=61,endLine=62::Sensitive information such as passwords should not be included in plain text in Bicep files. Consider using Azure Key Vault to manage and reference secrets securely. [Learn more about Azure Key Vault](https://docs.microsoft.com/azure/key-vault/general/basic-concepts)\n\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=66,endLine=66::SSH public keys should not be hardcoded in Bicep files. Instead, consider referencing them from a secure location or parameter file. [Learn more about SSH key management](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed)\n\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=88,endLine=88::Loading and replacing text content in Bicep files can lead to potential misconfigurations if the placeholder values are not correctly replaced. Ensure that the replacement logic is thoroughly tested. [Learn more about Bicep text loading](https://docs.microsoft.com/azure/azure-resource-manager/bicep/file)\n\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=93,endLine=93::Resource names are being constructed dynamically using a concatenation pattern that includes environment and location. Ensure that these names adhere to Azure naming conventions and limitations. [Learn more about Azure naming conventions](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules)\n\nFile ./targets.yaml:\n```yaml\n- name: \"Resource Group\"\n  source: \"./aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\"\n  action: \"Create or update a resource group with optional tags, which acts as a container for Azure resources.\"\n- name: \"Virtual Network\"\n  source: \"./aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\"\n  action: \"Provision a virtual network with a set of subnets and network security groups, enabling network isolation and control over traffic flow.\"\n- name: \"Network Security Group\"\n  source: \"./aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\"\n  action: \"Define network security groups with specific rules to control inbound and outbound traffic for subnets.\"\n- name: \"Log Analytics Workspace\"\n  source: \"./aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\"\n  action: \"Deploy a Log Analytics Workspace for monitoring, storing, and querying large amounts of operational data.\"\n- name: \"Virtual Machine\"\n  source: \"./aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\"\n  action: \"Deploy optional Linux or Windows virtual machines to act as jump boxes for secure administrative access.\"\n- name: \"Azure Policy Assignments\"\n  source: \"./aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\"\n  action: \"Assign built-in and custom Azure policies to enforce compliance and governance standards across the Azure resources.\"\n- name: \"Network Peering\"\n  source: \"./aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\"\n  action: \"Establish virtual network peering between the spoke and hub networks for interconnected traffic routing.\"\n- name: \"Route Table\"\n  source: \"./aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\"\n  action: \"Create a route table with routes to direct traffic flow, including a default route to a network appliance.\"\n```\n"}
{"sha":"0a2bdb21cd805f296d388c888fff00f0ddeaca7c2389f69de83df6ce1c597175","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\n## Files\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```typescript\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```python\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````markdown\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n### JSON Schema\nWhen you generate JSON or YAML according to a named schema. Add the schema identifier in the code fence header.\n\nFile ./data.json:\n```json schema=CITY_SCHEMA\n...\n```\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Files\n\n## Definitions\n### Action\nSomething being done by the SPECS file or its dependencies when used. Understanding the Action requires understanding the purpose of the script and its dependencies which requires deeper analysis than just describing the basic implementation of the name or steps in the script. The Action is the *why* of the script, not the *how*.\n\n### Target\nSpecific Azure service or cloud component that will be impacted by the Action. Example Targets include Application Insights, Application Gateway, Virtual Machines, and GitHub but could even include other clouds or custom components.\n\n### Deployed\nAny cloud resource that is deployed after this file is used that was not present before this file was used. Cloud resources that were already deployed before this file was used are not considered Deployed, and any cloud resources that are *always* deleted after this file is used are not considered Deployed.\n\n## Guidance on Actions\nIt is important to explain *why* the Action is being taken and *what* is being done in your description of the Action. Describing the purpose of the Action requires that you understand the value of the performed step. When you write the description of the Action, you should explain *why* and *what* is being done rather than just describing the implementation. For example, a script that clones a git repo doesn't exist to clone a git repo. It exists to download the source code that does something. Your description of the Action should explain what the script is doing with the source code that it downloads with as much detail as you can infer from the provided file contents.\n\n\n## Task 1\n\nIdentify security issues in SPECS files. Examine each SPECS file carefully.\nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n-  Do NOT report notice annotations, only error and warning.\n\n## Task 2\n\n1. Review the SPECS files and its dependencies that the user uploads\n2. Perform a very careful analysis of all the file contents that you receive to really understand what is happening\n3. Develop a lengthy list of actions that are being performed by the file and its dependencies. Make sure that you understand what is being done and why it is being done in creating this list using the approach from \"Guidance on Actions\" above.\n4. Double check your list of actions to make sure that you have a complete list of actions and add any that you missed\n5. Organize the actions by the target services or cloud components that are impacted by the actions\n6. Identify any cloud resources that are deployed after this file is used that were not present before this file was used and add them to the \"Deployed\" list. If nothing that you find directly within the provided file content meets this criteria, please leave the list empty.\n7. Generate a YAML file, targets.yaml, with the results following the TARGET_SCHEMA JSON schema:\n\nTARGET_SCHEMA:\n```json-schema\n{\n  \"type\": \"array\",\n  \"description\": \"An array of targets\",\n  \"items\": {\n    \"description\": \"A target that is impacted by the actions in the file\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"description\": \"Identifier of the target\",\n        \"type\": \"string\"\n      },\n      \"source\": {\n        \"description\": \"Path of the file defining the target\",\n        \"type\": \"string\"\n      },\n      \"action\": {\n        \"description\": \"What is being done on the cloud resource\",\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n"}],"stream":true},"val":"To proceed with the tasks, please provide the SPEC files from the Azure Landing Zone Accelerator repository that you would like to have analyzed."}
{"sha":"0a2bdb21cd805f296d388c888fff00f0ddeaca7c2389f69de83df6ce1c597175","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\n## Files\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```typescript\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```python\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````markdown\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n### JSON Schema\nWhen you generate JSON or YAML according to a named schema. Add the schema identifier in the code fence header.\n\nFile ./data.json:\n```json schema=CITY_SCHEMA\n...\n```\n\n\n---\nAlso, you are an expert technical document writer.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"# Context\n\nYou are a Azure Bicep language expert.\nYou will analyze the contents of SPEC files \nfrom a git repository of a Microsoft Azure Landing Zone Accelerator (LZA) \nfor an enterprise software company.\n\n## Files\n\n## Definitions\n### Action\nSomething being done by the SPECS file or its dependencies when used. Understanding the Action requires understanding the purpose of the script and its dependencies which requires deeper analysis than just describing the basic implementation of the name or steps in the script. The Action is the *why* of the script, not the *how*.\n\n### Target\nSpecific Azure service or cloud component that will be impacted by the Action. Example Targets include Application Insights, Application Gateway, Virtual Machines, and GitHub but could even include other clouds or custom components.\n\n### Deployed\nAny cloud resource that is deployed after this file is used that was not present before this file was used. Cloud resources that were already deployed before this file was used are not considered Deployed, and any cloud resources that are *always* deleted after this file is used are not considered Deployed.\n\n## Guidance on Actions\nIt is important to explain *why* the Action is being taken and *what* is being done in your description of the Action. Describing the purpose of the Action requires that you understand the value of the performed step. When you write the description of the Action, you should explain *why* and *what* is being done rather than just describing the implementation. For example, a script that clones a git repo doesn't exist to clone a git repo. It exists to download the source code that does something. Your description of the Action should explain what the script is doing with the source code that it downloads with as much detail as you can infer from the provided file contents.\n\n\n## Task 1\n\nIdentify security issues in SPECS files. Examine each SPECS file carefully.\nUse ANNOTATIONS to highlight the issues, best practices or improvements in SPECS. \n\n-  Look for bad practices.\n-  Look for weak secrets and passwords\n-  Look for any pattern that would to a security issue.\n-  Add link to documentation about security issues.\n-  Do NOT generate annotations for DEPS files.\n-  Do NOT generate a bullet point list.\n-  Do NOT report notice annotations, only error and warning.\n\n## Task 2\n\n1. Review the SPECS files and its dependencies that the user uploads\n2. Perform a very careful analysis of all the file contents that you receive to really understand what is happening\n3. Develop a lengthy list of actions that are being performed by the file and its dependencies. Make sure that you understand what is being done and why it is being done in creating this list using the approach from \"Guidance on Actions\" above.\n4. Double check your list of actions to make sure that you have a complete list of actions and add any that you missed\n5. Organize the actions by the target services or cloud components that are impacted by the actions\n6. Identify any cloud resources that are deployed after this file is used that were not present before this file was used and add them to the \"Deployed\" list. If nothing that you find directly within the provided file content meets this criteria, please leave the list empty.\n7. Generate a YAML file, targets.yaml, with the results following the TARGET_SCHEMA JSON schema:\n\nTARGET_SCHEMA:\n```json-schema\n{\n  \"type\": \"array\",\n  \"description\": \"An array of targets\",\n  \"items\": {\n    \"description\": \"A target that is impacted by the actions in the file\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"description\": \"Identifier of the target\",\n        \"type\": \"string\"\n      },\n      \"source\": {\n        \"description\": \"Path of the file defining the target\",\n        \"type\": \"string\"\n      },\n      \"action\": {\n        \"description\": \"What is being done on the cloud resource\",\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n"}],"stream":true},"val":"To proceed with the tasks, please upload the SPECS files from the Azure Landing Zone Accelerator repository that you would like to be analyzed."}
{"sha":"1e454ac032911b874216e5dab7791cfaa48dc8f6ed121f2d05ebdf2d9b6f3058","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"You are an expert Azure DevOps engineer with excellent Bicep language knownledge.\n\nAnalyze the bicep FILE and report security issues.\n\n-  apply best practices\n-  follow security recommendations\n-  link to documentation\n\nOnly report the 3 most critical issues.\n\nFILE:\n```js file=gptools/bicep-analyzer.gptool.js\ngptool({\n    title: \"bicep-analyzer\",\n    system: [\"system\", \"system.annotations\"]\n})\n\n// use $ to output formatted text to the prompt\n$`You are an expert Azure DevOps engineer with excellent Bicep language knownledge.\n\nAnalyze the bicep FILE and report security issues.\n\n-  apply best practices\n-  follow security recommendations\n-  link to documentation\n\nOnly report the 3 most critical issues.\n`\n\n// use def to emit and reference chunks of text\ndef(\"FILE\", env.files)\n                \n```\n\n"}],"stream":true},"val":"::error file=gptools/bicep-analyzer.gptool.js,line=1,endLine=9::The provided file does not contain Bicep language code, but rather a JavaScript snippet for a tool configuration. Please provide a Bicep file (*.bicep) for analysis.\n::warning file=gptools/bicep-analyzer.gptool.js,line=1,endLine=1::The file extension should be .bicep for Bicep language files, not .gptool.js which indicates a JavaScript file.\n::notice file=gptools/bicep-analyzer.gptool.js,line=1,endLine=9::Ensure that the Bicep code adheres to the Azure Bicep best practices and security guidelines as outlined in the [Azure Bicep documentation](https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview)."}
{"sha":"cc68d75b569fd35c294f9fde50d82bf990d74a5a4036541a674f79cd1ea428aa","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"You are an expert Azure DevOps engineer with excellent Bicep language knownledge.\n\nAnalyze the bicep FILE and report security issues.\n\n-  apply best practices\n-  follow security recommendations\n-  link to documentation\n\nOnly report the 3 most critical issues.\n\nFILE:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\ntargetScope = 'subscription'\n\n// ------------------\n//    PARAMETERS\n// ------------------\n\n@description('The name of the workload that is being deployed. Up to 10 characters long.')\n@minLength(2)\n@maxLength(10)\nparam workloadName string\n\n@description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n@maxLength(8)\nparam environment string\n\n@description('The location where the resources will be created. This should be the same region as the hub.')\nparam location string = deployment().location\n\n@description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\nparam spokeResourceGroupName string\n\n@description('Optional. The tags to be assigned to the created resources.')\nparam tags object = {}\n\n// Hub\n@description('The resource ID of the existing hub virtual network.')\nparam hubVNetId string\n\n// Spoke\n@description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\nparam spokeVNetAddressPrefixes array\n\n@description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\nparam spokeInfraSubnetName string = 'snet-infra'\n\n@description('CIDR of the spoke infrastructure subnet.')\nparam spokeInfraSubnetAddressPrefix string\n\n@description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\nparam spokePrivateEndpointsSubnetName string = 'snet-pep'\n\n@description('CIDR of the spoke private endpoints subnet.')\nparam spokePrivateEndpointsSubnetAddressPrefix string\n\n@description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\nparam spokeApplicationGatewaySubnetName string = 'snet-agw'\n\n@description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\nparam spokeApplicationGatewaySubnetAddressPrefix string\n\n@description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\nparam networkApplianceIpAddress string\n\n@description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\nparam vmSize string\n\n@description('The username to use for the jump box.')\nparam vmAdminUsername string\n\n@description('The password to use for the jump box.')\n@secure()\nparam vmAdminPassword string\n\n@description('The SSH public key to use for the jump box. Only relevant for Linux.')\n@secure()\nparam vmLinuxSshAuthorizedKeys string\n\n@description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n@allowed([ 'linux', 'windows', 'none' ])\nparam vmJumpboxOSType string = 'none'\n\n@description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\nparam vmSubnetName string = 'snet-jumpbox'\n\n@description('CIDR to use for the jump box subnet.')\nparam vmJumpBoxSubnetAddressPrefix string\n\n@description('Optional, default value is true. If true, Azure Policies will be deployed')\nparam deployAzurePolicies bool = true\n\n// ------------------\n// VARIABLES\n// ------------------\n\n//Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\nvar locationVar = location == 'francecentral' ? 'centralfrance' : location\n\n// load as text (and not as Json) to replace <location> placeholder in the nsg rules\nvar nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\nvar nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\nvar namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n\nvar rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\nvar hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n\n@description('The ID of the subscription containing the hub virtual network.')\nvar hubSubscriptionId = hubVNetResourceIdTokens[2]\n\n@description('The name of the resource group containing the hub virtual network.')\nvar hubResourceGroupName = hubVNetResourceIdTokens[4]\n\n@description('The name of the hub virtual network.')\nvar hubVNetName = hubVNetResourceIdTokens[8]\n\n// Subnet definition taking in consideration feature flags\nvar defaultSubnets = [\n  {\n    name: spokeInfraSubnetName\n    properties: {\n      addressPrefix: spokeInfraSubnetAddressPrefix\n      networkSecurityGroup: {\n        id: nsgContainerAppsEnvironment.outputs.nsgId\n      }\n      routeTable: {\n        id: egressLockdownUdr.outputs.resourceId\n      }\n      delegations: [\n        {\n          name: 'envdelegation'\n          properties: {\n            serviceName: 'Microsoft.App/environments'\n          }\n        }\n      ]\n    }\n  }\n  {\n    name: spokePrivateEndpointsSubnetName\n    properties: {\n      addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n      networkSecurityGroup: {\n        id: nsgPep.outputs.nsgId\n      }\n    }\n  }\n]\n\n// Append optional application gateway subnet, if required\nvar appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n    {\n      name: spokeApplicationGatewaySubnetName\n      properties: {\n        addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n        networkSecurityGroup: {\n          id: nsgAppGw.outputs.nsgId\n        }\n      }\n    }\n  ]) : defaultSubnets\n\n  //Append optional jumpbox subnet, if required\nvar spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n    {\n      name: vmSubnetName\n      properties: {\n        addressPrefix: vmJumpBoxSubnetAddressPrefix\n      }\n    }\n  ]) : appGwAndDefaultSubnets\n\n// ------------------\n// RESOURCES\n// ------------------\n\n\n@description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\nresource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n  name: rgSpokeName\n  location: location\n  tags: tags\n}\n\n@description('User-configured naming rules')\nmodule naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n  scope: spokeResourceGroup\n  name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n  params: {\n    uniqueId: uniqueString(spokeResourceGroup.id)\n    environment: environment\n    workloadName: workloadName\n    location: location\n  }\n}\n\n@description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\nmodule vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n  name: take('vnetSpoke-${deployment().name}', 64)\n  scope: spokeResourceGroup\n  params: {\n    name: naming.outputs.resourcesNames.vnetSpoke\n    location: location\n    tags: tags\n    subnets: spokeSubnets\n    vnetAddressPrefixes: spokeVNetAddressPrefixes\n  }\n}\n\n@description('The log sink for Azure Diagnostics')\nmodule logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n  name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n  scope: spokeResourceGroup\n  params: {\n    location: location\n    name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n  }\n}\n\n@description('Network security group rules for the Container Apps cluster.')\nmodule nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n  name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n  scope: spokeResourceGroup\n  params: {\n    name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n    location: location\n    tags: tags\n    securityRules: nsgCaeRules.securityRules\n    diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n  }\n}\n\n@description('NSG Rules for the Application Gateway.')\nmodule nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n  name: take('nsgAppGw-${deployment().name}', 64)\n  scope: spokeResourceGroup\n  params: {\n    name: naming.outputs.resourcesNames.applicationGatewayNsg\n    location: location\n    tags: tags\n    securityRules: nsgAppGwRules\n    diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n  }\n}\n\n@description('NSG Rules for the private enpoint subnet.')\nmodule nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n  name: take('nsgPep-${deployment().name}', 64)\n  scope: spokeResourceGroup\n  params: {\n    name: naming.outputs.resourcesNames.pepNsg\n    location: location\n    tags: tags\n    securityRules: []\n    diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n  }\n}\n\n@description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\nmodule peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n  name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n  scope: spokeResourceGroup\n  params: {\n    localVnetName: vnetSpoke.outputs.vnetName\n    remoteSubscriptionId: hubSubscriptionId\n    remoteRgName: hubResourceGroupName\n    remoteVnetName: hubVNetName\n  }\n}\n\n@description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\nmodule peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n  name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n  scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n  params: {\n    localVnetName: hubVNetName\n    remoteSubscriptionId: last(split(subscription().id, '/'))!\n    remoteRgName: spokeResourceGroup.name\n    remoteVnetName: vnetSpoke.outputs.vnetName\n  }\n}\n@description('The Route Table deployment')\nmodule egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n  name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n  scope: spokeResourceGroup\n  params: {\n    name: naming.outputs.resourcesNames.routeTable\n    location: location\n    tags: tags\n    routes: [\n      {\n        name: 'defaultEgressLockdown'\n        properties: {\n          addressPrefix: '0.0.0.0/0'\n          nextHopType: 'VirtualAppliance'\n          nextHopIpAddress: networkApplianceIpAddress\n        }\n      }\n    ]\n  }\n}\n\n\n@description('An optional Linux virtual machine deployment to act as a jump box.')\nmodule jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n  name: take('vm-linux-${deployment().name}', 64)\n  scope: spokeResourceGroup\n  params: {\n    location: location\n    tags: tags\n    vmName: naming.outputs.resourcesNames.vmJumpBox\n    vmAdminUsername: vmAdminUsername\n    vmAdminPassword: vmAdminPassword\n    vmSshPublicKey: vmLinuxSshAuthorizedKeys\n    vmSize: vmSize\n    vmVnetName: vnetSpoke.outputs.vnetName\n    vmSubnetName: vmSubnetName\n    vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n    vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n    vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n  }\n}\n\n@description('An optional Windows virtual machine deployment to act as a jump box.')\nmodule jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n  name: take('vm-windows-${deployment().name}', 64)\n  scope: spokeResourceGroup\n  params: {\n    location: location\n    tags: tags\n    vmName: naming.outputs.resourcesNames.vmJumpBox\n    vmAdminUsername: vmAdminUsername\n    vmAdminPassword: vmAdminPassword\n    vmSize: vmSize\n    vmVnetName: vnetSpoke.outputs.vnetName\n    vmSubnetName: vmSubnetName\n    vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n    vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n    vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n  }\n}\n\n@description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\nmodule policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n  name: take('policyAssignments-${deployment().name}', 64)\n  scope: spokeResourceGroup\n  params: {\n    location: location   \n    containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n  }\n}\n\n// ------------------\n// OUTPUTS\n// ------------------\n\nresource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n  name: vnetSpoke.outputs.vnetName\n  scope: spokeResourceGroup\n\n  resource spokeInfraSubnet 'subnets' existing = {\n    name: spokeInfraSubnetName\n  }\n\n  resource spokePrivateEndpointsSubnet 'subnets' existing = {\n    name: spokePrivateEndpointsSubnetName\n  }\n\n  resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n    name: spokeApplicationGatewaySubnetName\n  }\n}\n\n@description('The name of the spoke resource group.')\noutput spokeResourceGroupName string = spokeResourceGroup.name\n\n@description('The resource ID of the spoke virtual network.')\noutput spokeVNetId string = vnetSpokeCreated.id\n\n@description('The name of the spoke virtual network.')\noutput spokeVNetName string = vnetSpokeCreated.name\n\n@description('The resource ID of the spoke infrastructure subnet.')\noutput spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n\n@description('The name of the spoke infrastructure subnet.')\noutput spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n\n@description('The name of the spoke private endpoints subnet.')\noutput spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n\n@description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\noutput spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n\n@description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\noutput spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n\n@description('The resource ID of the Azure Log Analytics Workspace.')\noutput logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\n"}],"stream":true},"val":"::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=29,endLine=29::Resource group name should not be passed as a parameter. Use a naming convention module or generate the name within the Bicep file to ensure consistency and predictability. [Resource naming documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules)\n\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=78,endLine=78::Hardcoded IP addresses for network appliances can lead to configuration drift and potential security issues. Consider using a managed service or dynamically obtaining IP addresses. [Network security best practices](https://docs.microsoft.com/azure/security/fundamentals/network-best-practices)\n\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=86,endLine=86::Using plain text credentials as parameters can lead to security risks. Use managed identities or Key Vault references for handling credentials securely. [Secure credentials in Bicep](https://docs.microsoft.com/azure/azure-resource-manager/bicep/secure-parameter)"}
{"sha":"7fcf5fb364469a2eeb9b080d56991f9fc8368c22a9371db966a7d73189c33775","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"---\nYou are concise. Answer in markdown.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow).\n\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\n::warning file=main.py,line=3,endLine=3::typo\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n\nDo NOT indent or place annontation in a code fence.\n\n\n"},{"role":"user","content":"You are an expert Azure DevOps engineer with excellent Bicep language knownledge.\n\nAnalyze the bicep FILE and report security issues.\n\n-  apply best practices\n-  follow security recommendations\n-  link to documentation\n\nOnly report the 3 most critical issues.\n\nFILE:\n```bicep file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep\n[1] targetScope = 'subscription'\n[2] \n[3] // ------------------\n[4] //    PARAMETERS\n[5] // ------------------\n[6] \n[7] @description('The name of the workload that is being deployed. Up to 10 characters long.')\n[8] @minLength(2)\n[9] @maxLength(10)\n[10] param workloadName string\n[11] \n[12] @description('The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long.')\n[13] @maxLength(8)\n[14] param environment string\n[15] \n[16] @description('The location where the resources will be created. This should be the same region as the hub.')\n[17] param location string = deployment().location\n[18] \n[19] @description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')\n[20] param spokeResourceGroupName string\n[21] \n[22] @description('Optional. The tags to be assigned to the created resources.')\n[23] param tags object = {}\n[24] \n[25] // Hub\n[26] @description('The resource ID of the existing hub virtual network.')\n[27] param hubVNetId string\n[28] \n[29] // Spoke\n[30] @description('CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team.')\n[31] param spokeVNetAddressPrefixes array\n[32] \n[33] @description('Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template.')\n[34] param spokeInfraSubnetName string = 'snet-infra'\n[35] \n[36] @description('CIDR of the spoke infrastructure subnet.')\n[37] param spokeInfraSubnetAddressPrefix string\n[38] \n[39] @description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')\n[40] param spokePrivateEndpointsSubnetName string = 'snet-pep'\n[41] \n[42] @description('CIDR of the spoke private endpoints subnet.')\n[43] param spokePrivateEndpointsSubnetAddressPrefix string\n[44] \n[45] @description('Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template.')\n[46] param spokeApplicationGatewaySubnetName string = 'snet-agw'\n[47] \n[48] @description('CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created.')\n[49] param spokeApplicationGatewaySubnetAddressPrefix string\n[50] \n[51] @description('The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet.')\n[52] param networkApplianceIpAddress string\n[53] \n[54] @description('The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')\n[55] param vmSize string\n[56] \n[57] @description('The username to use for the jump box.')\n[58] param vmAdminUsername string\n[59] \n[60] @description('The password to use for the jump box.')\n[61] @secure()\n[62] param vmAdminPassword string\n[63] \n[64] @description('The SSH public key to use for the jump box. Only relevant for Linux.')\n[65] @secure()\n[66] param vmLinuxSshAuthorizedKeys string\n[67] \n[68] @description('The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created.')\n[69] @allowed([ 'linux', 'windows', 'none' ])\n[70] param vmJumpboxOSType string = 'none'\n[71] \n[72] @description('Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template.')\n[73] param vmSubnetName string = 'snet-jumpbox'\n[74] \n[75] @description('CIDR to use for the jump box subnet.')\n[76] param vmJumpBoxSubnetAddressPrefix string\n[77] \n[78] @description('Optional, default value is true. If true, Azure Policies will be deployed')\n[79] param deployAzurePolicies bool = true\n[80] \n[81] // ------------------\n[82] // VARIABLES\n[83] // ------------------\n[84] \n[85] //Destination Service Tag for AzureCloud for Central France is centralfrance, but location is francecentral\n[86] var locationVar = location == 'francecentral' ? 'centralfrance' : location\n[87] \n[88] // load as text (and not as Json) to replace <location> placeholder in the nsg rules\n[89] var nsgCaeRules = json( replace( loadTextContent('./nsgContainerAppsEnvironment.jsonc') , '<location>', locationVar) )\n[90] var nsgAppGwRules = loadJsonContent('./nsgAppGwRules.jsonc', 'securityRules')\n[91] var namingRules = json(loadTextContent('../../../../shared/bicep/naming/naming-rules.jsonc'))\n[92] \n[93] var rgSpokeName = !empty(spokeResourceGroupName) ? spokeResourceGroupName : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'\n[94] var hubVNetResourceIdTokens = !empty(hubVNetId) ? split(hubVNetId, '/') : array('')\n[95] \n[96] @description('The ID of the subscription containing the hub virtual network.')\n[97] var hubSubscriptionId = hubVNetResourceIdTokens[2]\n[98] \n[99] @description('The name of the resource group containing the hub virtual network.')\n[100] var hubResourceGroupName = hubVNetResourceIdTokens[4]\n[101] \n[102] @description('The name of the hub virtual network.')\n[103] var hubVNetName = hubVNetResourceIdTokens[8]\n[104] \n[105] // Subnet definition taking in consideration feature flags\n[106] var defaultSubnets = [\n[107]   {\n[108]     name: spokeInfraSubnetName\n[109]     properties: {\n[110]       addressPrefix: spokeInfraSubnetAddressPrefix\n[111]       networkSecurityGroup: {\n[112]         id: nsgContainerAppsEnvironment.outputs.nsgId\n[113]       }\n[114]       routeTable: {\n[115]         id: egressLockdownUdr.outputs.resourceId\n[116]       }\n[117]       delegations: [\n[118]         {\n[119]           name: 'envdelegation'\n[120]           properties: {\n[121]             serviceName: 'Microsoft.App/environments'\n[122]           }\n[123]         }\n[124]       ]\n[125]     }\n[126]   }\n[127]   {\n[128]     name: spokePrivateEndpointsSubnetName\n[129]     properties: {\n[130]       addressPrefix: spokePrivateEndpointsSubnetAddressPrefix\n[131]       networkSecurityGroup: {\n[132]         id: nsgPep.outputs.nsgId\n[133]       }\n[134]     }\n[135]   }\n[136] ]\n[137] \n[138] // Append optional application gateway subnet, if required\n[139] var appGwAndDefaultSubnets = !empty(spokeApplicationGatewaySubnetAddressPrefix) ? concat(defaultSubnets, [\n[140]     {\n[141]       name: spokeApplicationGatewaySubnetName\n[142]       properties: {\n[143]         addressPrefix: spokeApplicationGatewaySubnetAddressPrefix\n[144]         networkSecurityGroup: {\n[145]           id: nsgAppGw.outputs.nsgId\n[146]         }\n[147]       }\n[148]     }\n[149]   ]) : defaultSubnets\n[150] \n[151]   //Append optional jumpbox subnet, if required\n[152] var spokeSubnets = vmJumpboxOSType != 'none' ? concat(appGwAndDefaultSubnets, [\n[153]     {\n[154]       name: vmSubnetName\n[155]       properties: {\n[156]         addressPrefix: vmJumpBoxSubnetAddressPrefix\n[157]       }\n[158]     }\n[159]   ]) : appGwAndDefaultSubnets\n[160] \n[161] // ------------------\n[162] // RESOURCES\n[163] // ------------------\n[164] \n[165] \n[166] @description('The spoke resource group. This would normally be already provisioned by your subscription vending process.')\n[167] resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {\n[168]   name: rgSpokeName\n[169]   location: location\n[170]   tags: tags\n[171] }\n[172] \n[173] @description('User-configured naming rules')\n[174] module naming '../../../../shared/bicep/naming/naming.module.bicep' = {\n[175]   scope: spokeResourceGroup\n[176]   name: take('02-sharedNamingDeployment-${deployment().name}', 64)\n[177]   params: {\n[178]     uniqueId: uniqueString(spokeResourceGroup.id)\n[179]     environment: environment\n[180]     workloadName: workloadName\n[181]     location: location\n[182]   }\n[183] }\n[184] \n[185] @description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')\n[186] module vnetSpoke '../../../../shared/bicep/network/vnet.bicep' = {\n[187]   name: take('vnetSpoke-${deployment().name}', 64)\n[188]   scope: spokeResourceGroup\n[189]   params: {\n[190]     name: naming.outputs.resourcesNames.vnetSpoke\n[191]     location: location\n[192]     tags: tags\n[193]     subnets: spokeSubnets\n[194]     vnetAddressPrefixes: spokeVNetAddressPrefixes\n[195]   }\n[196] }\n[197] \n[198] @description('The log sink for Azure Diagnostics')\n[199] module logAnalyticsWorkspace '../../../../shared/bicep/log-analytics-ws.bicep' = {\n[200]   name: take('logAnalyticsWs-${uniqueString(spokeResourceGroup.id)}', 64)\n[201]   scope: spokeResourceGroup\n[202]   params: {\n[203]     location: location\n[204]     name: naming.outputs.resourcesNames.logAnalyticsWorkspace\n[205]   }\n[206] }\n[207] \n[208] @description('Network security group rules for the Container Apps cluster.')\n[209] module nsgContainerAppsEnvironment '../../../../shared/bicep/network/nsg.bicep' = {\n[210]   name: take('nsgContainerAppsEnvironment-${deployment().name}', 64)\n[211]   scope: spokeResourceGroup\n[212]   params: {\n[213]     name: naming.outputs.resourcesNames.containerAppsEnvironmentNsg\n[214]     location: location\n[215]     tags: tags\n[216]     securityRules: nsgCaeRules.securityRules\n[217]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[218]   }\n[219] }\n[220] \n[221] @description('NSG Rules for the Application Gateway.')\n[222] module nsgAppGw '../../../../shared/bicep/network/nsg.bicep' = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[223]   name: take('nsgAppGw-${deployment().name}', 64)\n[224]   scope: spokeResourceGroup\n[225]   params: {\n[226]     name: naming.outputs.resourcesNames.applicationGatewayNsg\n[227]     location: location\n[228]     tags: tags\n[229]     securityRules: nsgAppGwRules\n[230]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[231]   }\n[232] }\n[233] \n[234] @description('NSG Rules for the private enpoint subnet.')\n[235] module nsgPep '../../../../shared/bicep/network/nsg.bicep' = {\n[236]   name: take('nsgPep-${deployment().name}', 64)\n[237]   scope: spokeResourceGroup\n[238]   params: {\n[239]     name: naming.outputs.resourcesNames.pepNsg\n[240]     location: location\n[241]     tags: tags\n[242]     securityRules: []\n[243]     diagnosticWorkspaceId: logAnalyticsWorkspace.outputs.logAnalyticsWsId\n[244]   }\n[245] }\n[246] \n[247] @description('Spoke peering to regional hub network. This peering would normally already be provisioned by your subscription vending process.')\n[248] module peerSpokeToHub '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId))  {\n[249]   name: take('${deployment().name}-peerSpokeToHubDeployment', 64)\n[250]   scope: spokeResourceGroup\n[251]   params: {\n[252]     localVnetName: vnetSpoke.outputs.vnetName\n[253]     remoteSubscriptionId: hubSubscriptionId\n[254]     remoteRgName: hubResourceGroupName\n[255]     remoteVnetName: hubVNetName\n[256]   }\n[257] }\n[258] \n[259] @description('Regional hub peering to this spoke network. This peering would normally already be provisioned by your subscription vending process.')\n[260] module peerHubToSpoke '../../../../shared/bicep/network/peering.bicep' = if (!empty(hubVNetId)) {\n[261]   name: take('${deployment().name}-peerHubToSpokeDeployment', 64)\n[262]   scope: resourceGroup(hubSubscriptionId, hubResourceGroupName)\n[263]   params: {\n[264]     localVnetName: hubVNetName\n[265]     remoteSubscriptionId: last(split(subscription().id, '/'))!\n[266]     remoteRgName: spokeResourceGroup.name\n[267]     remoteVnetName: vnetSpoke.outputs.vnetName\n[268]   }\n[269] }\n[270] @description('The Route Table deployment')\n[271] module egressLockdownUdr '../../../../shared/bicep/routeTables/main.bicep' = {\n[272]   name: take('egressLockdownUdr-${uniqueString(spokeResourceGroup.id)}', 64)\n[273]   scope: spokeResourceGroup\n[274]   params: {\n[275]     name: naming.outputs.resourcesNames.routeTable\n[276]     location: location\n[277]     tags: tags\n[278]     routes: [\n[279]       {\n[280]         name: 'defaultEgressLockdown'\n[281]         properties: {\n[282]           addressPrefix: '0.0.0.0/0'\n[283]           nextHopType: 'VirtualAppliance'\n[284]           nextHopIpAddress: networkApplianceIpAddress\n[285]         }\n[286]       }\n[287]     ]\n[288]   }\n[289] }\n[290] \n[291] \n[292] @description('An optional Linux virtual machine deployment to act as a jump box.')\n[293] module jumpboxLinuxVM './modules/vm/linux-vm.bicep' = if (vmJumpboxOSType == 'linux') {\n[294]   name: take('vm-linux-${deployment().name}', 64)\n[295]   scope: spokeResourceGroup\n[296]   params: {\n[297]     location: location\n[298]     tags: tags\n[299]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[300]     vmAdminUsername: vmAdminUsername\n[301]     vmAdminPassword: vmAdminPassword\n[302]     vmSshPublicKey: vmLinuxSshAuthorizedKeys\n[303]     vmSize: vmSize\n[304]     vmVnetName: vnetSpoke.outputs.vnetName\n[305]     vmSubnetName: vmSubnetName\n[306]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[307]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[308]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[309]   }\n[310] }\n[311] \n[312] @description('An optional Windows virtual machine deployment to act as a jump box.')\n[313] module jumpboxWindowsVM './modules/vm/windows-vm.bicep' = if (vmJumpboxOSType == 'windows') {\n[314]   name: take('vm-windows-${deployment().name}', 64)\n[315]   scope: spokeResourceGroup\n[316]   params: {\n[317]     location: location\n[318]     tags: tags\n[319]     vmName: naming.outputs.resourcesNames.vmJumpBox\n[320]     vmAdminUsername: vmAdminUsername\n[321]     vmAdminPassword: vmAdminPassword\n[322]     vmSize: vmSize\n[323]     vmVnetName: vnetSpoke.outputs.vnetName\n[324]     vmSubnetName: vmSubnetName\n[325]     vmSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix\n[326]     vmNetworkInterfaceName: naming.outputs.resourcesNames.vmJumpBoxNic\n[327]     vmNetworkSecurityGroupName: naming.outputs.resourcesNames.vmJumpBoxNsg\n[328]   }\n[329] }\n[330] \n[331] @description('Assign built-in and custom (container-apps related) policies to the spoke subscription.')\n[332] module policyAssignments './modules/policy/policy-definition.module.bicep' = if (deployAzurePolicies) {\n[333]   name: take('policyAssignments-${deployment().name}', 64)\n[334]   scope: spokeResourceGroup\n[335]   params: {\n[336]     location: location   \n[337]     containerRegistryName: naming.outputs.resourcesNames.containerRegistry \n[338]   }\n[339] }\n[340] \n[341] // ------------------\n[342] // OUTPUTS\n[343] // ------------------\n[344] \n[345] resource vnetSpokeCreated 'Microsoft.Network/virtualNetworks@2022-07-01' existing = {\n[346]   name: vnetSpoke.outputs.vnetName\n[347]   scope: spokeResourceGroup\n[348] \n[349]   resource spokeInfraSubnet 'subnets' existing = {\n[350]     name: spokeInfraSubnetName\n[351]   }\n[352] \n[353]   resource spokePrivateEndpointsSubnet 'subnets' existing = {\n[354]     name: spokePrivateEndpointsSubnetName\n[355]   }\n[356] \n[357]   resource spokeApplicationGatewaySubnet 'subnets' existing = if (!empty(spokeApplicationGatewaySubnetAddressPrefix)) {\n[358]     name: spokeApplicationGatewaySubnetName\n[359]   }\n[360] }\n[361] \n[362] @description('The name of the spoke resource group.')\n[363] output spokeResourceGroupName string = spokeResourceGroup.name\n[364] \n[365] @description('The resource ID of the spoke virtual network.')\n[366] output spokeVNetId string = vnetSpokeCreated.id\n[367] \n[368] @description('The name of the spoke virtual network.')\n[369] output spokeVNetName string = vnetSpokeCreated.name\n[370] \n[371] @description('The resource ID of the spoke infrastructure subnet.')\n[372] output spokeInfraSubnetId string = vnetSpokeCreated::spokeInfraSubnet.id\n[373] \n[374] @description('The name of the spoke infrastructure subnet.')\n[375] output spokeInfraSubnetName string = vnetSpokeCreated::spokeInfraSubnet.name\n[376] \n[377] @description('The name of the spoke private endpoints subnet.')\n[378] output spokePrivateEndpointsSubnetName string = vnetSpokeCreated::spokePrivateEndpointsSubnet.name\n[379] \n[380] @description('The resource ID of the spoke Application Gateway subnet. This is \\'\\' if the subnet was not created.')\n[381] output spokeApplicationGatewaySubnetId string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.id : ''\n[382] \n[383] @description('The name of the spoke Application Gateway subnet.  This is \\'\\' if the subnet was not created.')\n[384] output spokeApplicationGatewaySubnetName string = (!empty(spokeApplicationGatewaySubnetAddressPrefix)) ? vnetSpokeCreated::spokeApplicationGatewaySubnet.name : ''\n[385] \n[386] @description('The resource ID of the Azure Log Analytics Workspace.')\n[387] output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.outputs.logAnalyticsWsId\n```\n\n"}],"stream":true},"val":"::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=19,endLine=20::Resource Group name should not be passed as a parameter for security reasons. It should be generated within the Bicep file to ensure naming consistency and to avoid the risk of deploying resources into an incorrect or unauthorized resource group. [Resource Group best practices](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftresources)\n\n::error file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=88,endLine=89::Loading NSG rules from an external file can lead to potential security misconfigurations if the file is tampered with or contains incorrect rules. It is recommended to define security rules within the Bicep file or use a trusted and secure external source. [Security rules best practices](https://docs.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview)\n\n::warning file=aca-landing-zone-accelerator/scenarios/aca-internal/bicep/modules/02-spoke/deploy.spoke.bicep,line=60,endLine=62::Hardcoded credentials should not be used. Instead, use Azure Key Vault to store and reference secrets securely. [Use Azure Key Vault for passwords](https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/parameter-files#secure-values)"}
