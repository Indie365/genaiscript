{"sha":"6f4dbc2669aca3db5ff319ffae38e44e57245257e2242faf3545c5f601212f7a","key":{"model":"gpt-4","temperature":0.01,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile another_folder/file1.ts:\n```\nWhat goes in\nanother_folder/file1.ts.\n```\n\nFile another_folder/file1.py:\n```\nWhat goes in\nanother_folder/file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nWhen generating new files, place files in folder \"another_folder\".\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"\nYou are an expert system designer that writes Python code.\n\nSUMMARY:\n````` file=src/counting.gpspec.md\n# Counting {#RG35}\n\nProgram that shows numbers from 1 to 44 and then letters from a to z.\nFinally prints \"Finished\".\n\n-   [python](./counting.py)\n\n<!-- @outputFolder\n\nanother_folder\n\n-->\n`````\n\nGenerate python code to match SUMMARY. Save the generated python in the src/counting.gptools.py file.\n\n"}]},"val":"File src/counting.gptools.py:\n```python\n# Program that shows numbers from 1 to 44 and then letters from a to z.\n# Finally prints \"Finished\".\n\nfor i in range(1, 45):\n    print(i)\n\nfor char in range(97, 123):\n    print(chr(char))\n\nprint(\"Finished\")\n```\n\nSUMMARY:\n```\nA new Python file, src/counting.gptools.py, was created. This file contains a program that prints numbers from 1 to 44, letters from a to z, and finally prints \"Finished\".\n```"}
{"sha":"f2d172e02a9c10e595ff0f1b4e449b5e0fedb843c41150c44e36defd11aae006","key":{"model":"gpt-4","temperature":0.1,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SOURCE:\n````` file=README.md.gpspec.md\n# README.md\n\n-   [README.md](./README.md)\n`````\n\nSOURCE:\n````` file=README.md\n# GPTools - AI-Enhanced Workflows for Teams\n\nGPTools (formerly CoArch) is a framework that empowers teams, including non-developers, to create and use AI-enhanced scripts (gptools) to support their workflows. The framework leverages foundation models (specifically LLMs) to enable a new kind of scripting that combines traditional code and natural language.\n\n> Don't forget to turn on the sound.\n\nhttps://github.com/microsoft/gptools/assets/4175913/74517b81-4b9c-47d9-8a5c-a15362b0d4db\n\n## Key Objectives and Technical Elements\n\nThe main objectives of gptools are to improve automation, collaboration, and accessibility in the creation, understanding, and maintenance of complex GPT artifacts.\nThe key elements of the gptools framework are:\n\n-   [gptools](./docs/gptools.md): Scripts that integrate traditional code and natural language, leveraging foundation models in their execution.\n-   [gpspecs](./docs/gpspecs.md): Natural language documents that instantiate gptools in a particular context.\n-   [VS Code extension](./packages/vscode/README.md): Supporting seamless user interaction with gptools.\n-   **gpvm**: A framework and runtime system that executes gpspecs and gptools.\n\nGPTools access AI foundation models (OpenAI, Azure OpenAI, Llama, ...) using a [user-provided token](./docs/token.md).\n\n## Install manually\n\nThese are the instructions to install the latest build of the extension manually in Visual Studio Code.\n\n-   open the [latest release](https://github.com/microsoft/gptools/releases/latest/),\n-   download the `gptools.vsix` file\n-   open Visual Studio Code\n-   open the command palette and type **Extensions: Install from VSIX...**\n-   load the `gptools.vsix` file\n\nUntil this extension is in the Marketplace, you will have to repeat these steps each time you want to upgrade the extension.\n\n### GPTool scripts\n\nGPTool scripts use stylized JavaScript with minimal syntax. They are stored as files (`gptools/*.gptool.js`) in your project.\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a technical document writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n```\n\nGPTools comes with builtin tools and allows you to fork and customize the AI prompts to your project specific needs.\nThis leverages VSCode language support (completion, coloring, error checking)\nwhile remaining friendly to people not very familiar with JavaScript.\nGPTools also provides detailed expansion logs to help you debug your templates.\n\nSince gptool scripts are stored as files in the project, they can be shared, versioned, collaborated on by the entire development team\nusing the existing team development cycle.\n\nIn the future, we foresee that developers will create libraries of gptools and share them as libraries on their favorite package manager.\n\n-   [Read more about gptools](./docs/gptools.md).\n\n## GPSpec specifications\n\nNatural language documents that instantiate gptools in a particular context. GPTools parses `*.gpspec.md` markdown files as specification.\n\n```markdown A sample GPSpec document.\n# email address recognizer\n\nWrite a function that takes a string argument\nand returns true if the whole string is a valid email address, false otherwise.\n```\n\n-   [Read more about gpspecs](./docs/gpspecs.md).\n\n## User experience\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\nThe AI-generated output is used to update the workspace, and the user interacts with the updated workspace through the gptools extension to VS code.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n## Contributing\n\nWe accept contributions! Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n`````\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file README.md.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n\n"}]},"val":"File ./README.md.slides.md:\n`````\n### GPTools - AI-Enhanced Workflows for Teams\n\n- GPTools is a framework that empowers teams to create and use AI-enhanced scripts.\n- It combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### Install manually\n\n- Open the latest release.\n- Download the `gptools.vsix` file.\n- Install the extension in Visual Studio Code.\n\n---\n\n### GPTool scripts\n\n- GPTool scripts use stylized JavaScript.\n- They are stored as files in your project.\n\n---\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a technical document writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT to fix grammatical errors, fix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- GPTools parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string argument\nand returns true if the whole string is a valid email address, false otherwise.\n```\n\n---\n\n### User experience\n\n- The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\n- The AI-generated output is used to update the workspace.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Contributing\n\n- We accept contributions!\n- Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n---\n\n### Trademarks\n\n- This project may contain trademarks or logos for projects, products, or services.\n- Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\n\n`````\n\nSUMMARY:\n```\nThe README.md file was converted into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck includes brief summaries of each section in the README.md file, along with relevant code snippets and diagrams.\n```"}
{"sha":"d4100ebbdf3a163b43c206cf7e47464cb144baef6e385294b9008b48351f207b","key":{"model":"gpt-4","temperature":0.1,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SOURCE:\n````` file=README.md.gpspec.md\n# README.md\n\n-   [README.md](./README.md)\n`````\n\nSOURCE:\n````` file=README.md\n# GPTools - AI-Enhanced Workflows for Teams\n\nGPTools (formerly CoArch) allows teams, including non-developers, to create and use AI-enhanced scripts (gptools). The framework leverages LLMs to enable a new kind of scripting that combines traditional code and natural language.\n\n> Don't forget to turn on the sound.\n\nhttps://github.com/microsoft/gptools/assets/4175913/74517b81-4b9c-47d9-8a5c-a15362b0d4db\n\n## Key Objectives and Technical Elements\n\nThe main objectives of gptools are to improve automation, collaboration, and accessibility in the creation, understanding, and maintenance of complex GPT artifacts. The key elements of the gptools framework are:\n\n-   [gptools](./docs/gptools.md): Scripts that integrate traditional code and natural language, leveraging foundation models in their execution.\n-   [gpspecs](./docs/gpspecs.md): Natural language documents that instantiate gptools in a particular context.\n-   [VS Code extension](./packages/vscode/README.md): Supporting seamless user interaction with gptools.\n-   **gpvm**: A framework and runtime system that executes gpspecs and gptools.\n\nGPTools uses hosted AI foundation models (OpenAI, Azure OpenAI, Llama, ...) using a [user-provided token](./docs/token.md).\n\n### GPTool scripts\n\nGPTool scripts use stylized JavaScript with minimal syntax. They are stored as files (`gptools/*.gptool.js`) in your project.\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.`\n```\n\nGPTools comes with builtin tools and allows you to fork and customize the AI prompts to your project specific needs.\nThis leverages VSCode language support (completion, coloring, error checking)\nwhile remaining friendly to people not very familiar with JavaScript.\nGPTools also provides detailed expansion logs to help you debug your templates.\n\nSince gptool scripts are stored as files in the project, they can be shared, versioned, collaborated on by the entire development team\nusing the existing team development cycle.\n\nIn the future, we foresee that developers will create libraries of gptools and share them as libraries on their favorite package manager.\n\n-   [Read more about gptools](./docs/gptools.md).\n\n## GPSpec specifications\n\nNatural language documents that instantiate gptools in a particular context. GPTools parses `*.gpspec.md` markdown files as specification.\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n-   [Read more about gpspecs](./docs/gpspecs.md).\n\n## User experience\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\nThe AI-generated output is used to update the workspace, and the user interacts with the updated workspace through the gptools extension to VS code.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n## Getting started\n\n### Install in Visual Studio Code\n\nThese are the instructions to install the latest build of the extension manually in Visual Studio Code.\n\n-   install [Visual Studio Code](https://code.visualstudio.com/Download)\n-   open the [latest release](https://github.com/microsoft/gptools/releases/latest/),\n-   download the `gptools.vsix` file\n-   open Visual Studio Code\n-   open the command palette and type **Extensions: Install from VSIX...**\n-   load the `gptools.vsix` file\n\nUntil this extension is in the Marketplace, you will have to repeat these steps each time you want to upgrade the extension.\n\n### Try a builtin tool\n\nGPTools comes with sample tools and you don't need a gpspec to run those tools on any file. The easiest way to start playing with GPTools is to:\n\n-   open a folder in Visual Studio Code\n-   open any file, open the context menu and run \"Run GPTool...\"\n-   select one of the builtin tools in the dropdown\n\n### Create a gpspec\n\nThe default gpspec generated by GPTools is rather simplistic. You can improve the performance of the LLM\nby creating a new gpspec with more instructions.\n\n### Fork a tool\n\n-   open the command palette\n-   type \"Fork a GPTool...\" and select the tool you want to fork\n-   pick a new name and start editing the tool\n\nThe tool will be available in the dropdown of the \"Run GPTool...\" command.\n\n## Contributing\n\nWe accept contributions! Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n`````\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file README.md.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  Ignore Copyright and Trademarks sections.\n\n"}]},"val":"File ./README.md.slides.md:\n`````\n### GPTools - AI-Enhanced Workflows for Teams\n- GPTools allows teams to create and use AI-enhanced scripts.\n- The framework leverages LLMs to enable a new kind of scripting that combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n- Improve automation, collaboration, and accessibility in the creation, understanding, and maintenance of complex GPT artifacts.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### GPTool Scripts\n- GPTool scripts use stylized JavaScript with minimal syntax.\n- Stored as files (`gptools/*.gptool.js`) in your project.\n\n---\n\n### GPTool Script Example\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec Specifications\n- Natural language documents that instantiate gptools in a particular context.\n- GPTools parses `*.gpspec.md` markdown files as specification.\n\n---\n\n### GPSpec Specification Example\n```markdown\n# email address recognizer\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n- The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\n- The AI-generated output is used to update the workspace, and the user interacts with the updated workspace through the gptools extension to VS code.\n\n---\n\n### User Experience Diagram\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n\n---\n\n### Contributing\n- We accept contributions! Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n`````\n\nSUMMARY:\n```\nConverted the README.md file into a slidedeck in markdown format, README.md.slides.md. The slidedeck provides a concise overview of GPTools, its key objectives and technical elements, examples of GPTool scripts and GPSpec specifications, the user experience, and how to get started and contribute.\n```"}
{"sha":"45d353b63d38101bbce7e2cfe67f02c4c570b47e52eabf041fc1862b2423a300","key":{"model":"gpt-4","temperature":0.1,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SOURCE:\n````` file=README.md.gpspec.md\n# README.md\n\n-   [README.md](./README.md)\n`````\n\nSOURCE:\n````` file=README.md\n# GPTools - AI-Enhanced Workflows for Teams\n\nGPTools (formerly CoArch) allows teams, including non-developers, to create and use AI-enhanced scripts (gptools). The framework leverages LLMs to enable a new kind of scripting that combines traditional code and natural language.\n\n> Don't forget to turn on the sound.\n\nhttps://github.com/microsoft/gptools/assets/4175913/74517b81-4b9c-47d9-8a5c-a15362b0d4db\n\n## Key Objectives and Technical Elements\n\nThe main objectives of gptools are to improve automation, collaboration, and accessibility in the creation, understanding, and maintenance of complex GPT artifacts. The key elements of the gptools framework are:\n\n-   [gptools](./docs/gptools.md): Scripts that integrate traditional code and natural language, leveraging foundation models in their execution.\n-   [gpspecs](./docs/gpspecs.md): Natural language documents that instantiate gptools in a particular context.\n-   [VS Code extension](./packages/vscode/README.md): Supporting seamless user interaction with gptools.\n-   **gpvm**: A framework and runtime system that executes gpspecs and gptools.\n\nGPTools uses hosted AI foundation models (OpenAI, Azure OpenAI, Llama, ...) using a [user-provided token](./docs/token.md).\n\n### GPTool scripts\n\nGPTool scripts use stylized JavaScript with minimal syntax. They are stored as files (`gptools/*.gptool.js`) in your project.\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.`\n```\n\nGPTools comes with builtin tools and allows you to fork and customize the AI prompts to your project specific needs.\nThis leverages VSCode language support (completion, coloring, error checking)\nwhile remaining friendly to people not very familiar with JavaScript.\nGPTools also provides detailed expansion logs to help you debug your templates.\n\nSince gptool scripts are stored as files in the project, they can be shared, versioned, collaborated on by the entire development team\nusing the existing team development cycle.\n\nIn the future, we foresee that developers will create libraries of gptools and share them as libraries on their favorite package manager.\n\n-   [Read more about gptools](./docs/gptools.md).\n\n## GPSpec specifications\n\nNatural language documents that instantiate gptools in a particular context. GPTools parses `*.gpspec.md` markdown files as specification.\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n-   [Read more about gpspecs](./docs/gpspecs.md).\n\n## User experience\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\nThe AI-generated output is used to update the workspace, and the user interacts with the updated workspace through the gptools extension to VS code.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n## Getting started\n\n### Install in Visual Studio Code\n\nThese are the instructions to install the latest build of the extension manually in Visual Studio Code.\n\n-   install [Visual Studio Code](https://code.visualstudio.com/Download)\n-   open the [latest release](https://github.com/microsoft/gptools/releases/latest/),\n-   download the `gptools.vsix` file\n-   open Visual Studio Code\n-   open the command palette and type **Extensions: Install from VSIX...**\n-   load the `gptools.vsix` file\n\nUntil this extension is in the Marketplace, you will have to repeat these steps each time you want to upgrade the extension.\n\n### Try a builtin tool\n\nGPTools comes with sample tools and you don't need a gpspec to run those tools on any file. The easiest way to start playing with GPTools is to:\n\n-   open a folder in Visual Studio Code\n-   open any file, open the context menu and run \"Run GPTool...\"\n-   select one of the builtin tools in the dropdown\n\n### Create a gpspec\n\nThe default gpspec generated by GPTools is rather simplistic. You can improve the performance of the LLM\nby creating a new gpspec with more instructions.\n\n### Fork a tool\n\n-   open the command palette\n-   type \"Fork a GPTool...\" and select the tool you want to fork\n-   pick a new name and start editing the tool\n\nThe tool will be available in the dropdown of the \"Run GPTool...\" command.\n\n## Contributing\n\nWe accept contributions! Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n`````\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file README.md.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  Ignore Contributing, Copyright and Trademarks sections.\n\n"}]},"val":"File ./README.md.slides.md:\n`````\n### GPTools - AI-Enhanced Workflows for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- The framework leverages LLMs to combine traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility in GPT artifacts.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### GPTool Scripts\n\n- GPTool scripts use stylized JavaScript with minimal syntax.\n- Stored as files (`gptools/*.gptool.js`) in your project.\n\n---\n\n### GPTool Script Example\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- GPTools parses `*.gpspec.md` markdown files as specification.\n\n---\n\n### GPSpec Example\n\n```markdown\n# email address recognizer\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\n- The AI-generated output is used to update the workspace.\n\n---\n\n### User Experience Diagram\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n`````\n\nSUMMARY:\n```\nConverted README.md to a slidedeck in markdown format in README.md.slides.md.\n```"}
{"sha":"e8a1f2dd2c753970fd536ce53590a20c231706608a3854bcc9ae07a8bcf25ede","key":{"model":"gpt-4","temperature":0.1,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SOURCE:\n````` file=README.md.gpspec.md\n# README.md\n\n-   [README.md](./README.md)\n`````\n\nSOURCE:\n````` file=README.md\n# GPTools - AI-Scripting for Teams\n\nGPTools (formerly CoArch) allows teams, including non-developers, to create and use AI-enhanced scripts. GPTools uses LLMs to enable a new kind of scripting that combines traditional code and natural language.\n\n> Don't forget to turn on the sound.\n\nhttps://github.com/microsoft/gptools/assets/4175913/74517b81-4b9c-47d9-8a5c-a15362b0d4db\n\n## Key Objectives and Technical Elements\n\nThe main objectives of gptools are to improve automation, collaboration, and accessibility in the creation, understanding, and maintenance of complex GPT artifacts. The key elements of the gptools framework are:\n\n-   [gptools](./docs/gptools.md): Scripts that integrate traditional code and natural language, leveraging foundation models in their execution.\n-   [gpspecs](./docs/gpspecs.md): Natural language documents that instantiate gptools in a particular context.\n-   [VS Code extension](./packages/vscode/README.md): Supporting seamless user interaction with gptools.\n-   **gpvm**: A framework and runtime system that executes gpspecs and gptools.\n\nGPTools uses hosted AI foundation models (OpenAI, Azure OpenAI, Llama, ...) using a [user-provided token](./docs/token.md).\n\n### GPTool scripts\n\nGPTool scripts use stylized JavaScript with minimal syntax. They are stored as files (`gptools/*.gptool.js`) in your project.\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.`\n```\n\nGPTools comes with builtin tools and allows you to fork and customize the AI prompts to your project specific needs.\nThis leverages VSCode language support (completion, coloring, error checking)\nwhile remaining friendly to people not very familiar with JavaScript.\nGPTools also provides detailed expansion logs to help you debug your templates.\n\nSince gptool scripts are stored as files in the project, they can be shared, versioned, collaborated on by the entire development team\nusing the existing team development cycle.\n\nIn the future, we foresee that developers will create libraries of gptools and share them as libraries on their favorite package manager.\n\n-   [Read more about gptools](./docs/gptools.md).\n\n## GPSpec specifications\n\nNatural language documents that instantiate gptools in a particular context. GPTools parses `*.gpspec.md` markdown files as specification. Links define the content.\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n-   [Read more about gpspecs](./docs/gpspecs.md).\n\n## User experience\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\nThe AI-generated output is used to update the workspace, and the user interacts with the updated workspace through the gptools extension to VS code.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n## Getting started\n\n### Install in Visual Studio Code\n\nThese are the instructions to install the latest build of the extension manually in Visual Studio Code.\n\n-   install [Visual Studio Code](https://code.visualstudio.com/Download)\n-   open the [latest release](https://github.com/microsoft/gptools/releases/latest/),\n-   download the `gptools.vsix` file\n-   open Visual Studio Code\n-   open the command palette and type **Extensions: Install from VSIX...**\n-   load the `gptools.vsix` file\n\nUntil this extension is in the Marketplace, you will have to repeat these steps each time you want to upgrade the extension.\n\n### Try a builtin tool\n\nGPTools comes with sample tools and you don't need a gpspec to run those tools on any file. The easiest way to start playing with GPTools is to:\n\n-   open a folder in Visual Studio Code\n-   open any file, open the context menu and run \"Run GPTool...\"\n-   select one of the builtin tools in the dropdown\n\n### Create a gpspec\n\nThe default gpspec generated by GPTools is rather simplistic. You can improve the performance of the LLM\nby creating a new gpspec with more instructions.\n\n### Fork a tool\n\n-   open the command palette\n-   type \"Fork a GPTool...\" and select the tool you want to fork\n-   pick a new name and start editing the tool\n\nThe tool will be available in the dropdown of the \"Run GPTool...\" command.\n\n## Contributing\n\nWe accept contributions! Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n`````\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file README.md.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  IGNORE Contributing, Copyright and Trademarks sections.\n\n"}]},"val":"File README.md.slides.md:\n`````\n### GPTools - AI-Scripting for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- Combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### GPTool Scripts\n\n- Use stylized JavaScript with minimal syntax.\n- Stored as files (`gptools/*.gptool.js`) in your project.\n\n---\n\n### GPTool Script Example\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a context.\n- Parses `*.gpspec.md` markdown files as specification.\n\n---\n\n### GPSpec Example\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- AI-enhanced workflow process in gptools.\n- gpspec starts the `gptool`, interacts with the gpvm and foundation model.\n\n---\n\n### Workflow Diagram\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n`````\n\nSUMMARY:\n```\nGenerated a slidedeck in markdown format for the content in README.md.\n```"}
{"sha":"cf976a8aea9de9b38b20ac609e9c5550b5dc0adccf6bf1f06915c3809c5a918c","key":{"model":"gpt-4","temperature":0.1,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SOURCE:\n````` file=README.md.gpspec.md\n# README.md\n\n-   [README.md](./README.md)\n`````\n\nSOURCE:\n````` file=README.md\n# GPTools - AI-Scripting for Teams\n\nGPTools (formerly CoArch) allows teams, including non-developers, to create and use AI-enhanced scripts. GPTools uses LLMs to enable a new kind of scripting that combines traditional code and natural language.\n\n> Don't forget to turn on the sound.\n\nhttps://github.com/microsoft/gptools/assets/4175913/74517b81-4b9c-47d9-8a5c-a15362b0d4db\n\n## Overview\n\nThe key elements of the gptools framework are:\n\n-   [gpspecs](./docs/gpspecs.md): Natural language specification documents that also define the LLM context.\n-   [gptools](./docs/gptools.md): Scripts that combine the gpspec source, the context and the LLM models.\n-   [VS Code extension](./packages/vscode/README.md): User interaction with gptools and conversion of LLM results into workspace edits.\n-   **gpvm**: A framework and runtime system that executes gpspecs and gptools.\n\nGPTools uses hosted AI foundation models (OpenAI, Azure OpenAI, Llama, ...) using a [user-provided token](./docs/token.md).\n\n### GPTool scripts\n\nGPTool scripts use stylized JavaScript with minimal syntax. They are stored as files (`gptools/*.gptool.js`) in your project.\n\n```js\n// metadata\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\n// the context\ndef(\"TEXT\", env.file)\ndef(\"RES\", env.links)\n\n// the task\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.\nUse information from RES.`\n```\n\nGPTools comes with builtin tools and allows you to fork and customize the AI prompts to your project specific needs.\nThis leverages VSCode language support (completion, coloring, error checking)\nwhile remaining friendly to people not very familiar with JavaScript.\nGPTools also provides detailed expansion logs to help you debug your templates.\n\nSince gptool scripts are stored as files in the project, they can be shared, versioned, collaborated on by the entire development team\nusing the existing team development cycle.\n\nIn the future, we foresee that developers will create libraries of gptools and share them as libraries on their favorite package manager.\n\n-   [Read more about gptools](./docs/gptools.md).\n\n## GPSpec specifications\n\nNatural language documents that instantiate gptools in a particular context. GPTools parses `*.gpspec.md` markdown files as specification (`env.file`). Links define the content (`env.links`).\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n-   [Read more about gpspecs](./docs/gpspecs.md).\n\n## User experience\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\nThe AI-generated output is used to update the workspace, and the user interacts with the updated workspace through the gptools extension to VS code.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n## Getting started\n\n### Install in Visual Studio Code\n\nThese are the instructions to install the latest build of the extension manually in Visual Studio Code.\n\n-   install [Visual Studio Code](https://code.visualstudio.com/Download)\n-   open the [latest release](https://github.com/microsoft/gptools/releases/latest/),\n-   download the `gptools.vsix` file\n-   open Visual Studio Code\n-   open the command palette and type **Extensions: Install from VSIX...**\n-   load the `gptools.vsix` file\n\nUntil this extension is in the Marketplace, you will have to repeat these steps each time you want to upgrade the extension.\n\n### Try a builtin tool\n\nGPTools comes with sample tools and you don't need a gpspec to run those tools on any file. The easiest way to start playing with GPTools is to:\n\n-   open a folder in Visual Studio Code\n-   open any file, open the context menu and run \"Run GPTool...\"\n-   select one of the builtin tools in the dropdown\n\n### Create a gpspec\n\nThe default gpspec generated by GPTools is rather simplistic. You can improve the performance of the LLM\nby creating a new gpspec with more instructions.\n\n### Fork a tool\n\n-   open the command palette\n-   type \"Fork a GPTool...\" and select the tool you want to fork\n-   pick a new name and start editing the tool\n\nThe tool will be available in the dropdown of the \"Run GPTool...\" command.\n\n## Contributing\n\nWe accept contributions! Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n`````\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file README.md.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  IGNORE Contributing, Copyright and Trademarks sections.\n\n"}]},"val":"File ./README.md.slides.md:\n`````\n### GPTools - AI-Scripting for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- Combines traditional code and natural language.\n\n---\n\n### Overview\n\n- Key elements: gpspecs, gptools, VS Code extension, gpvm.\n- Uses hosted AI foundation models.\n\n---\n\n### GPTool Scripts\n\n- Use stylized JavaScript with minimal syntax.\n- Stored as files in your project.\n\n---\n\n```js\n// metadata\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\n// the context\ndef(\"TEXT\", env.file)\ndef(\"RES\", env.links)\n\n// the task\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.\nUse information from RES.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- Parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- AI-enhanced workflow process in gptools.\n- User interacts with the updated workspace through the gptools extension to VS code.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n\n`````\n\nSUMMARY:\n```\nConverted the README.md file into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck provides a concise overview of GPTools, including its key elements, how to use GPTool scripts and GPSpec specifications, the user experience, and how to get started.\n```"}
{"sha":"5ac3bf3416703a165a114c541b15f99e56ec0d7d3e31090feaf35b90b85ba2e2","key":{"model":"gpt-4","temperature":0.1,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SOURCE:\n````` file=src/counting.py.gpspec.md\n# counting.py\n\n-   [counting.py](./counting.py)\n`````\n\nSOURCE:\n``` file=src/counting.py\n# This is my favorite program!\n\nfor i in range(1, 45):\n    print(i)\n\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n\n# And now, at the end:\nprint(\"The end\")\n```\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file src/counting.py.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  IGNORE Contributing, Copyright and Trademarks sections.\n\n"}]},"val":"File src/counting.py.slides.md:\n`````\n### Introduction\n- This slidedeck provides a walkthrough of the Python script `counting.py`.\n\n---\n\n### Script Overview\n- The script `counting.py` prints a sequence of numbers and letters.\n\n---\n\n### Code Snippet 1\n```python\nfor i in range(1, 45):\n    print(i)\n```\n- This loop prints numbers from 1 to 44.\n\n---\n\n### Code Snippet 2\n```python\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n```\n- This loop prints lowercase letters from 'a' to 'z'.\n\n---\n\n### Code Snippet 3\n```python\nprint(\"The end\")\n```\n- This line prints the string \"The end\".\n\n---\n\n### Summary\n- The script `counting.py` prints a sequence of numbers, letters, and a final string.\n`````\n\nSUMMARY:\n```\nThe file src/counting.py.slides.md was created to provide a slidedeck walkthrough of the Python script `counting.py`. The slidedeck includes an introduction, an overview of the script, explanations of three code snippets, and a summary.\n```"}
{"sha":"7311ea7b248d73068ef3235ad0c1ec385f8460bb690086935786a0c523e0343f","key":{"model":"gpt-4-32k","temperature":0,"max_tokens":2000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n```diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDIFF ./file2.ts:\n```diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"FILE:\n````` file=src/demovideo.dialog.md\n[1] Ethan: Welcome to our presentation of GP tools in Visual Studio Code. We'll start by opening the GP spec file, which is a markdown file where we describe the task to do. In this example, we're going to implement an email validator.\n[2] \n[3] Nancy: That's right, Ethan. The task is to write a function that takes a string and validates if the whole string is a valid email address. This description is in natural language, in what we call the GP spec file.\n[4] \n[5] Ethan: Now, this GP spec file is run against a GP tool. The GP tools are JavaScript files defined in the project. Let's open the generate python GP tool, which has some metadata used to populate the UI, a programmatic way to access the context, and the typical prompt engineering using an intuitive syntax.\n[6] \n[7] Nancy: From the user's perspective, they can take the code action tool and select the \"generate python code\" option. This will execute the GP tool against the GP spec and the rest of the context. The results are streamed in Visual Studio Code and previewed as a refactoring.\n[8] \n[9] Ethan: That's right. We can see that a new file is parsed out, and an update to the file is made. If the user is happy with the changes, they can apply them just like any other refactoring. Next, they can run the test generation tool, which is another JavaScript file in the project.\n[10] \n[11] Nancy: When running the test generation tool, we can see that it generates tests but uses the wrong framework. To fix this, the team can update the tool file. After updating the file, they can run the test tool again, and now it picks up the right test framework.\n[12] \n[13] Ethan: Once the tests are generated, they can make sure the tests are passing. Now, let's say the customer changes their mind and decides that the function should also validate URLs. The user can update the spec to reflect this change and run the tool again.\n[14] \n[15] Nancy: When running the tool again, it initially uses the wrong file. The user can refine the spec to use the same pipeline file, run the tool again, and now it regenerates the email validator. They can review the changes and apply them if they're satisfied.\n[16] \n[17] Ethan: And that's it! Thank you for watching our presentation on GP tools in Visual Studio Code.\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter in FILE:\n- Update fields title as needed\n- Update description as needed \n- Update keywords as needed, only 5 keywords or less\n- use yaml format, do not use quotes\n- optimize for search engine optimization.\n- Do NOT modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n\n"}]},"val":"DIFF ./src/demovideo.dialog.md:\n```diff\n+ ---\n+ title: GP Tools in Visual Studio Code Presentation\n+ description: A walkthrough of using GP tools in Visual Studio Code for task implementation and test generation.\n+ keywords: GP Tools, Visual Studio Code, Task Implementation, Test Generation, Code Refactoring\n+ ---\n[1] Ethan: Welcome to our presentation of GP tools in Visual Studio Code. We'll start by opening the GP spec file, which is a markdown file where we describe the task to do. In this example, we're going to implement an email validator.\n[2] \n[3] Nancy: That's right, Ethan. The task is to write a function that takes a string and validates if the whole string is a valid email address. This description is in natural language, in what we call the GP spec file.\n```\n\nSUMMARY:\n```\nAdded front matter to the markdown file 'src/demovideo.dialog.md' with optimized title, description, and keywords for search engine optimization.\n```"}
{"sha":"ad98c972d104095df3891bede93ea85fdae3cd748ee7d04eb87c695c188049cc","key":{"model":"gpt-4-32k","temperature":0,"max_tokens":2000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n```diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDIFF ./file2.ts:\n```diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"You are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter in FILE:\n- Update fields title as needed\n- Update description as needed \n- Update keywords as needed, only 5 keywords or less\n- use yaml format, do not use quotes\n- optimize for search engine optimization.\n- Do NOT modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n\n"}]},"val":"```markdown\n---\ntitle: Your Optimized Title Here\ndescription: Your SEO-friendly description here.\nkeywords: keyword1, keyword2, keyword3, keyword4, keyword5\n---\n\n# Your Markdown Content Starts Here\n```\nThis is an example of how to update or generate front matter in a markdown file. Replace \"Your Optimized Title Here\" with your desired title, \"Your SEO-friendly description here\" with your description, and \"keyword1, keyword2, keyword3, keyword4, keyword5\" with your chosen keywords. Remember to keep the keywords to 5 or less for optimal SEO. The markdown content after the front matter should remain unchanged."}
{"sha":"e9e89421a5772d1904870d2deec35b67219733bc46b394e4597487444041b665","key":{"model":"gpt-4","temperature":0.2,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"Shorten the following FILE. Limit changes to minimum.\n\nFILE:\n````` file=src/demovideo.transcript.md.gpspec.md\n# demovideo.transcript.md\n\n-   [demovideo.transcript.md](./demovideo.transcript.md)\n`````\n\n"}]},"val":"File /src/demovideo.transcript.md.gpspec.md:\n````` \n# demovideo.transcript.md\n`````\n\nSUMMARY:\n```\nRemoved unnecessary link to the same file in /src/demovideo.transcript.md.gpspec.md.\n```"}
{"sha":"4d887609f5ce74cbf674f1dbd27a17c292f5e80ace7b3d2e3c1b791f3b2e8b7c","key":{"model":"gpt-4","temperature":0.1,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SOURCE:\n````` file=src/demovideo.transcript.md.gpspec.md\n# demovideo.transcript.md\n\n-   [demovideo.transcript.md](./demovideo.transcript.md)\n`````\n\nSOURCE:\n````` file=src/demovideo.transcript.md\n# Transcript\n\n  This is a presentation of GP tools in visual studio code.  And we start by opening the GP spec file, which is a markdown file word to use a described as a task to do. And this example, we're going to have. Implement. An email validator.  We're the task is to write a function. taKes a string and.  Validates that the whole string.  Is a valid email address.  \n\nSo that's the description of the problem in natural language, in what we call the GP spec file.  And these GP fact file.  Is run against a GP tool. The GP tools are JavaScript files defined in the project. We're going to open the generate piped on GP tool.  Which has some metadata, which is used to populate the UI.  It has programattic way to access the, the context, including the content of the GP. B GP spec file.  And then it has the typ typical prompt engineering. Thing here using an intuitive syntax.  \n\nfRom the user, who's writing the GP spec. We go in here and we take the code action tool. And we select the generate pipeline code. So this is going to. Execute the GP tool.  Against the GP spec and the rest of the context, the results are streamed.  In visual studio code and they're also previewed as a refactoring. So we can see that we parsed out. And you file here and we parsed out an update to the file. So if you're happy with that, you can go ahead and apply. The chains are applied, just like any other refactoring. And then why don't we can do now is go in and run the next tool, which is going to be. Test generation tool. So this is another JavaScript filed in project. We run that this is a different prompt. The prompt is about generating test.  Now, in this case, you can see that. It is generating tasks, but using the wrong fair mark.  So this is something that.  We want to fix, add team level. So we're going to go into the tools.  And we're going to update the tool. And this is something that.  THe team is using to generate test. So there we go. You used a union testimonial term for writing tests? We have updated.  The file that the tool file.  \n\nNow let's go back and run the.  Run the test tool again.  \n\nCan we update it?  To fight against. See, now that it is actually.  Picking up the right test framework, which is using our team.  Generating test cases.  \n\nCan I apply that?  Let's get, make sure our tests, our tests are passing.  Now the customer changes mind. And decided that we also had to validate your ELLs. So we're going to go and update. The spec. So write a function via email address or your.  All right. And now I can run this.  \n\nBy applying the tool.  Jerry And code.  And we can see that it is. It is using the wrong, the wrong file. So I'm going to refine my spec and say that we should use the same pipeline file. This goes into the GSB spec file and run again.  \n\nAnd now we're regenerating email validator, which we already have here.  \n\nAnd we have a new refactoring, and if we can look at the diff, we can see that we've actually.  We've kept that function but we've added his valid url and then we also have the function that combines the two that the change does. good we can click apply  And that's it  Thank you for watching \n`````\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file src/demovideo.transcript.md.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  IGNORE Contributing, Copyright and Trademarks sections.\n\n"}]},"val":"File src/demovideo.transcript.md.slides.md:\n`````\n### Introduction\n- Presentation of GP tools in visual studio code\n- Task: Implement an email validator\n\n---\n\n### GP Spec File\n- Description of the problem in natural language\n- Run against a GP tool\n\n---\n\n### GP Tools\n- JavaScript files defined in the project\n- Used to populate the UI and access the context\n\n---\n\n### Code Action Tool\n- Generate pipeline code\n- Results are streamed and previewed as a refactoring\n\n---\n\n### Test Generation Tool\n- JavaScript file in project\n- Generates tests using the correct framework\n\n---\n\n### Updating the Tool\n- Fix issues at team level\n- Update the tool file\n\n---\n\n### Running the Test Tool Again\n- Test tool updated to use the correct framework\n- Generates test cases\n\n---\n\n### Updating the Spec\n- Customer changes mind, also needs to validate URLs\n- Update the spec to reflect this\n\n---\n\n### Applying the Tool\n- Generate code\n- Refine spec to use the same pipeline file\n\n---\n\n### Regenerating Email Validator\n- New refactoring\n- Added isValidURL function and a function that combines the two\n\n---\n\n### Conclusion\n- Changes applied\n- Thank you for watching\n`````\n\nSUMMARY:\n```\nGenerated a slidedeck in markdown format for the content in src/demovideo.transcript.md and saved it in src/demovideo.transcript.md.slides.md.\n```"}
