{"sha":"de503a40221e1a84bfaefa40097333f004c2d18492f95ed1b48529e8e0e8e65c","key":{"template":{"id":"slides","title":"Generate Slides"},"fragment":{"fullId":"README.md.gpspec.md:0:0","hash":"f853854a0efa414d"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/sample/README.md.slides.md","filename":"/workspaces/coarch/packages/sample/README.md.slides.md","type":"replace","range":[[0,0],[94,0]],"text":"### GPTools - AI-Scripting for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- Combines traditional code and natural language.\n\n---\n\n### Overview\n\n- Key elements: gpspecs, gptools, VS Code extension, gpvm.\n- Uses hosted AI foundation models.\n\n---\n\n### GPTool Scripts\n\n- Use stylized JavaScript with minimal syntax.\n- Stored as files in your project.\n\n---\n\n```js\n// metadata\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\n// the context\ndef(\"TEXT\", env.file)\ndef(\"RES\", env.links)\n\n// the task\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.\nUse information from RES.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- Parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- AI-enhanced workflow process in gptools.\n- User interacts with the updated workspace through the gptools extension to VS code.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n\n"}],"fileEdits":{"/workspaces/coarch/packages/sample/README.md.slides.md":{"before":"### GPTools - AI-Scripting for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- Combines traditional code and natural language.\n\n---\n\n### Key Objectives and Technical Elements\n\n- Improve automation, collaboration, and accessibility.\n- Key elements: gptools, gpspecs, VS Code extension, gpvm.\n\n---\n\n### GPTool Scripts\n\n- Use stylized JavaScript with minimal syntax.\n- Stored as files (`gptools/*.gptool.js`) in your project.\n\n---\n\n### GPTool Script Example\n\n```js\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\ndef(\"TEXT\", env.file)\n\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a context.\n- Parses `*.gpspec.md` markdown files as specification.\n\n---\n\n### GPSpec Example\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- AI-enhanced workflow process in gptools.\n- gpspec starts the `gptool`, interacts with the gpvm and foundation model.\n\n---\n\n### Workflow Diagram\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n","after":"### GPTools - AI-Scripting for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- Combines traditional code and natural language.\n\n---\n\n### Overview\n\n- Key elements: gpspecs, gptools, VS Code extension, gpvm.\n- Uses hosted AI foundation models.\n\n---\n\n### GPTool Scripts\n\n- Use stylized JavaScript with minimal syntax.\n- Stored as files in your project.\n\n---\n\n```js\n// metadata\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\n// the context\ndef(\"TEXT\", env.file)\ndef(\"RES\", env.links)\n\n// the task\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.\nUse information from RES.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- Parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- AI-enhanced workflow process in gptools.\n- User interacts with the updated workspace through the gptools extension to VS code.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n\n"}},"trace":"\n# `slides` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-XCTEPJ`\n\n-   env.**file**\n```js\n{ filename: \"README.md.gpspec.md\",\nlabel: \"current\",\ncontent: \"# README.md\\n\\n-   [README.md](./README.md)\\n\" }\n```\n\n-   env.**links**\n```js\n[ { label: \"README.md\",\n  filename: \"README.md\",\n  content: \"# GPTools - AI-Scripting for Teams\\n\\nGPTools (formerly CoArch\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" },\n{ id: \"code-optimizer\",\n  title: \"Code Optimizer\",\n  description: \"Optimize code to run faster, modified from https://twitter.c\"... },\n{ id: \"code-xray\",\n  title: \"Code XRay\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"gptool-meta\",\n  title: \"GPTool metadata generator\",\n  description: \"Generates metadata for GPTools\" },\n{ id: \"slides\",\n  title: \"Generate Slides\",\n  description: \"Generate a slidedeck in markdown. Install extension 'vscode-\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... }... ]\n```\n\n-   env.**template**\n```js\n{ id: \"slides\",\ntitle: \"Generate Slides\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Generate Slides\\\",\\n    description: \\\"Gen\"...,\ndescription: \"Generate a slidedeck in markdown. Install extension 'vscode-\"...,\ncategories: [ \"samples\" ],\ntemperature: 0.1,\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.explanations` source\n\n```js\nsystem({ title: \"Explain your answers\" })\n$`When explaining answers, take a deep breath.`\n```\n#### expanded\n``````markdown\nWhen explaining answers, take a deep breath.\n``````\n###  `system.files` source\n\n```js\nsystem({\n    title: \"File generation\",\n    description: \"Teaches the file format supported by GPTools\",\n})\n\nconst folder =\n    env.vars[\"outputFolder\"] || env.template.outputFolder\n$`When generating or updating files you will use the following syntax:`\n\ndef(\n    `File ${folder || \".\"}/file1.ts`,\n    `What goes in\\n${folder || \".\"}/file1.ts.`,\n    { language: \"typescript\" }\n)\ndef(\n    `File ${folder || \".\"}/file1.py`,\n    `What goes in\\n${folder || \".\"}/file1.py.`,\n    { language: \"python\" }\n)\ndef(\n    `File /path_to_file/file2.md`,\n    `What goes in\\n/path_to_file/file2.md.`,\n    { language: \"markdown\" }\n)\n\n$`Make sure to use precisely ${env.fence} to guard file code sections.`\n$`Make sure to use precisely ${env.markdownFence} to guard file markdown sections.`\n$`Use full path of filename in code section header.`\nif (folder) $`When generating new files, place files in folder \"${folder}\".`\n$`If a file does not have changes, do not regenerate.`\n```\n#### expanded\n``````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n``````\n###  `system.summary` source\n\n```js\nsystem({\n    title: \"Summarize\",\n    description: \"Generate a summary of the changes\",\n})\n\n$`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n\ndef(`SUMMARY`, `This is a summary of the changes in files.`)\n```\n#### expanded\n``````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"Generate Slides\",\n    description: \"Generate a slidedeck in markdown. Install extension 'vscode-reveal'.\",\n    categories: [\"samples\"],\n    temperature: 0.1,\n})\n\nconst output = env.file.filename.replace(/\\.gpspec\\.md$/, \".slides.md\")\ndef(\n    \"SOURCE\",\n    [env.file,\n    ...env.links.filter(\n        (f) => !f.filename.endsWith(\".slides.md\")\n    )]\n)\n\n$`Generate a slidedeck in markdown format for the content in SOURCE\nin file ${output} using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  IGNORE Contributing, Copyright and Trademarks sections.\n`\n```\n\n\n</details>\n\n\n<details id=\"gptool-expanded-prompt\"><summary>gptool expanded prompt</summary>\n\n-  model: `gpt-4`\n-  temperature: 0.1\n-  max tokens: 800\n\n``````markdown\nSOURCE:\n````` file=README.md.gpspec.md\n# README.md\n\n-   [README.md](./README.md)\n`````\n\nSOURCE:\n````` file=README.md\n# GPTools - AI-Scripting for Teams\n\nGPTools (formerly CoArch) allows teams, including non-developers, to create and use AI-enhanced scripts. GPTools uses LLMs to enable a new kind of scripting that combines traditional code and natural language.\n\n> Don't forget to turn on the sound.\n\nhttps://github.com/microsoft/gptools/assets/4175913/74517b81-4b9c-47d9-8a5c-a15362b0d4db\n\n## Overview\n\nThe key elements of the gptools framework are:\n\n-   [gpspecs](./docs/gpspecs.md): Natural language specification documents that also define the LLM context.\n-   [gptools](./docs/gptools.md): Scripts that combine the gpspec source, the context and the LLM models.\n-   [VS Code extension](./packages/vscode/README.md): User interaction with gptools and conversion of LLM results into workspace edits.\n-   **gpvm**: A framework and runtime system that executes gpspecs and gptools.\n\nGPTools uses hosted AI foundation models (OpenAI, Azure OpenAI, Llama, ...) using a [user-provided token](./docs/token.md).\n\n### GPTool scripts\n\nGPTool scripts use stylized JavaScript with minimal syntax. They are stored as files (`gptools/*.gptool.js`) in your project.\n\n```js\n// metadata\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\n// the context\ndef(\"TEXT\", env.file)\ndef(\"RES\", env.links)\n\n// the task\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.\nUse information from RES.`\n```\n\nGPTools comes with builtin tools and allows you to fork and customize the AI prompts to your project specific needs.\nThis leverages VSCode language support (completion, coloring, error checking)\nwhile remaining friendly to people not very familiar with JavaScript.\nGPTools also provides detailed expansion logs to help you debug your templates.\n\nSince gptool scripts are stored as files in the project, they can be shared, versioned, collaborated on by the entire development team\nusing the existing team development cycle.\n\nIn the future, we foresee that developers will create libraries of gptools and share them as libraries on their favorite package manager.\n\n-   [Read more about gptools](./docs/gptools.md).\n\n## GPSpec specifications\n\nNatural language documents that instantiate gptools in a particular context. GPTools parses `*.gpspec.md` markdown files as specification (`env.file`). Links define the content (`env.links`).\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n-   [Read more about gpspecs](./docs/gpspecs.md).\n\n## User experience\n\nThis diagram demonstrates the AI-enhanced workflow process in gptools. The gpspec starts the `gptool`, which reads the `gpspec`, interacts with the gpvm and foundation model.\nThe AI-generated output is used to update the workspace, and the user interacts with the updated workspace through the gptools extension to VS code.\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n## Getting started\n\n### Install in Visual Studio Code\n\nThese are the instructions to install the latest build of the extension manually in Visual Studio Code.\n\n-   install [Visual Studio Code](https://code.visualstudio.com/Download)\n-   open the [latest release](https://github.com/microsoft/gptools/releases/latest/),\n-   download the `gptools.vsix` file\n-   open Visual Studio Code\n-   open the command palette and type **Extensions: Install from VSIX...**\n-   load the `gptools.vsix` file\n\nUntil this extension is in the Marketplace, you will have to repeat these steps each time you want to upgrade the extension.\n\n### Try a builtin tool\n\nGPTools comes with sample tools and you don't need a gpspec to run those tools on any file. The easiest way to start playing with GPTools is to:\n\n-   open a folder in Visual Studio Code\n-   open any file, open the context menu and run \"Run GPTool...\"\n-   select one of the builtin tools in the dropdown\n\n### Create a gpspec\n\nThe default gpspec generated by GPTools is rather simplistic. You can improve the performance of the LLM\nby creating a new gpspec with more instructions.\n\n### Fork a tool\n\n-   open the command palette\n-   type \"Fork a GPTool...\" and select the tool you want to fork\n-   pick a new name and start editing the tool\n\nThe tool will be available in the dropdown of the \"Run GPTool...\" command.\n\n## Contributing\n\nWe accept contributions! Checkout the [CONTRIBUTING](./CONTRIBUTING.md) page for details and developer setup.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n`````\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file README.md.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  IGNORE Contributing, Copyright and Trademarks sections.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nFile ./README.md.slides.md:\n`````\n### GPTools - AI-Scripting for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- Combines traditional code and natural language.\n\n---\n\n### Overview\n\n- Key elements: gpspecs, gptools, VS Code extension, gpvm.\n- Uses hosted AI foundation models.\n\n---\n\n### GPTool Scripts\n\n- Use stylized JavaScript with minimal syntax.\n- Stored as files in your project.\n\n---\n\n```js\n// metadata\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\n// the context\ndef(\"TEXT\", env.file)\ndef(\"RES\", env.links)\n\n// the task\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.\nUse information from RES.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- Parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- AI-enhanced workflow process in gptools.\n- User interacts with the updated workspace through the gptools extension to VS code.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n\n`````\n\nSUMMARY:\n```\nConverted the README.md file into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck provides a concise overview of GPTools, including its key elements, how to use GPTool scripts and GPSpec specifications, the user experience, and how to get started.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `File ./README.md.slides.md`\n`````md\n### GPTools - AI-Scripting for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- Combines traditional code and natural language.\n\n---\n\n### Overview\n\n- Key elements: gpspecs, gptools, VS Code extension, gpvm.\n- Uses hosted AI foundation models.\n\n---\n\n### GPTool Scripts\n\n- Use stylized JavaScript with minimal syntax.\n- Stored as files in your project.\n\n---\n\n```js\n// metadata\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\n// the context\ndef(\"TEXT\", env.file)\ndef(\"RES\", env.links)\n\n// the task\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.\nUse information from RES.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- Parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- AI-enhanced workflow process in gptools.\n- User interacts with the updated workspace through the gptools extension to VS code.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n\n\n`````\n\n-   `SUMMARY`\n`````\nConverted the README.md file into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck provides a concise overview of GPTools, including its key elements, how to use GPTool scripts and GPSpec specifications, the user experience, and how to get started.\n\n`````\n\n\n</details>\n","text":"File ./README.md.slides.md:\n`````\n### GPTools - AI-Scripting for Teams\n\n- GPTools allows teams to create and use AI-enhanced scripts.\n- Combines traditional code and natural language.\n\n---\n\n### Overview\n\n- Key elements: gpspecs, gptools, VS Code extension, gpvm.\n- Uses hosted AI foundation models.\n\n---\n\n### GPTool Scripts\n\n- Use stylized JavaScript with minimal syntax.\n- Stored as files in your project.\n\n---\n\n```js\n// metadata\ngptool({\n    title: \"Technical proofreading\",\n    description: \"Reviews the text as a tech writer.\",\n})\n\n// the context\ndef(\"TEXT\", env.file)\ndef(\"RES\", env.links)\n\n// the task\n$`You are reviewing and updating TEXT \nto fix grammatical errors, \nfix spelling errors and make it technical.\nUse information from RES.`\n```\n\n---\n\n### GPSpec Specifications\n\n- Natural language documents that instantiate gptools in a particular context.\n- Parses `*.gpspec.md` markdown files as specification.\n\n---\n\n```markdown\n# email address recognizer\n\n-   [email_validator.py](./email_validator.py)\n-   [best practices](./shared/best_practices.md)\n\nWrite a function that takes a string\nand returns true if the whole string is a valid email address,\nfalse otherwise.\n```\n\n---\n\n### User Experience\n\n- AI-enhanced workflow process in gptools.\n- User interacts with the updated workspace through the gptools extension to VS code.\n\n---\n\n```mermaid\nsequenceDiagram\nparticipant User\nparticipant VSCode\nparticipant gpspec\nparticipant gptool\nparticipant gpvm\nUser->>VSCode: Create/Edit gpspec\nVSCode->>gpspec: Save gpspec\nUser->>VSCode: Invoke gptool\nVSCode->>gptool: Execute gptool with gpspec + workspace\ngptool->>gpvm: Request foundation model execution\ngpvm->>gptool: Return AI-generated output\ngptool->>VSCode: Update workspace with output\nVSCode->>User: Display updated workspace\n```\n\n---\n\n### Getting Started\n\n- Install in Visual Studio Code.\n- Try a builtin tool.\n- Create a gpspec.\n- Fork a tool.\n\n`````\n\nSUMMARY:\n```\nConverted the README.md file into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck provides a concise overview of GPTools, including its key elements, how to use GPTool scripts and GPSpec specifications, the user experience, and how to get started.\n```","summary":"Converted the README.md file into a slidedeck in markdown format, saved as README.md.slides.md. The slidedeck provides a concise overview of GPTools, including its key elements, how to use GPTool scripts and GPSpec specifications, the user experience, and how to get started.\n"}}}
{"sha":"38c10caedc66fe0a49c404d46fe645df268c4bdb3b45305cc963463e775d127f","key":{"template":{"id":"slides","title":"Generate Slides"},"fragment":{"fullId":"src/counting.py.gpspec.md:0:0","hash":"a8819edfc0998416"}},"val":{"response":{"edits":[{"label":"Create /workspaces/coarch/packages/sample/src/counting.py.slides.md","filename":"/workspaces/coarch/packages/sample/src/counting.py.slides.md","type":"createfile","text":"### Introduction\n- This slidedeck provides a walkthrough of the Python script `counting.py`.\n\n---\n\n### Script Overview\n- The script `counting.py` prints a sequence of numbers and letters.\n\n---\n\n### Code Snippet 1\n```python\nfor i in range(1, 45):\n    print(i)\n```\n- This loop prints numbers from 1 to 44.\n\n---\n\n### Code Snippet 2\n```python\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n```\n- This loop prints lowercase letters from 'a' to 'z'.\n\n---\n\n### Code Snippet 3\n```python\nprint(\"The end\")\n```\n- This line prints the string \"The end\".\n\n---\n\n### Summary\n- The script `counting.py` prints a sequence of numbers, letters, and a final string.\n","overwrite":true}],"fileEdits":{"/workspaces/coarch/packages/sample/src/counting.py.slides.md":{"before":null,"after":"### Introduction\n- This slidedeck provides a walkthrough of the Python script `counting.py`.\n\n---\n\n### Script Overview\n- The script `counting.py` prints a sequence of numbers and letters.\n\n---\n\n### Code Snippet 1\n```python\nfor i in range(1, 45):\n    print(i)\n```\n- This loop prints numbers from 1 to 44.\n\n---\n\n### Code Snippet 2\n```python\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n```\n- This loop prints lowercase letters from 'a' to 'z'.\n\n---\n\n### Code Snippet 3\n```python\nprint(\"The end\")\n```\n- This line prints the string \"The end\".\n\n---\n\n### Summary\n- The script `counting.py` prints a sequence of numbers, letters, and a final string.\n"}},"trace":"\n# `slides` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-CTZKJF`\n\n-   env.**file**\n```js\n{ filename: \"src/counting.py.gpspec.md\",\nlabel: \"current\",\ncontent: \"# counting.py\\n\\n-   [counting.py](./counting.py)\\n\" }\n```\n\n-   env.**links**\n```js\n[ { label: \"counting.py\",\n  filename: \"src/counting.py\",\n  content: \"# This is my favorite program!\\n\\nfor i in range(1, 45):\\n    p\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" },\n{ id: \"code-optimizer\",\n  title: \"Code Optimizer\",\n  description: \"Optimize code to run faster, modified from https://twitter.c\"... },\n{ id: \"code-xray\",\n  title: \"Code XRay\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"gptool-meta\",\n  title: \"GPTool metadata generator\",\n  description: \"Generates metadata for GPTools\" },\n{ id: \"slides\",\n  title: \"Generate Slides\",\n  description: \"Generate a slidedeck in markdown. Install extension 'vscode-\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... }... ]\n```\n\n-   env.**template**\n```js\n{ id: \"slides\",\ntitle: \"Generate Slides\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Generate Slides\\\",\\n    description: \\\"Gen\"...,\ndescription: \"Generate a slidedeck in markdown. Install extension 'vscode-\"...,\ncategories: [ \"samples\" ],\ntemperature: 0.1,\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.explanations` source\n\n```js\nsystem({ title: \"Explain your answers\" })\n$`When explaining answers, take a deep breath.`\n```\n#### expanded\n``````markdown\nWhen explaining answers, take a deep breath.\n``````\n###  `system.files` source\n\n```js\nsystem({\n    title: \"File generation\",\n    description: \"Teaches the file format supported by GPTools\",\n})\n\nconst folder =\n    env.vars[\"outputFolder\"] || env.template.outputFolder\n$`When generating or updating files you will use the following syntax:`\n\ndef(\n    `File ${folder || \".\"}/file1.ts`,\n    `What goes in\\n${folder || \".\"}/file1.ts.`,\n    { language: \"typescript\" }\n)\ndef(\n    `File ${folder || \".\"}/file1.py`,\n    `What goes in\\n${folder || \".\"}/file1.py.`,\n    { language: \"python\" }\n)\ndef(\n    `File /path_to_file/file2.md`,\n    `What goes in\\n/path_to_file/file2.md.`,\n    { language: \"markdown\" }\n)\n\n$`Make sure to use precisely ${env.fence} to guard file code sections.`\n$`Make sure to use precisely ${env.markdownFence} to guard file markdown sections.`\n$`Use full path of filename in code section header.`\nif (folder) $`When generating new files, place files in folder \"${folder}\".`\n$`If a file does not have changes, do not regenerate.`\n```\n#### expanded\n``````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n``````\n###  `system.summary` source\n\n```js\nsystem({\n    title: \"Summarize\",\n    description: \"Generate a summary of the changes\",\n})\n\n$`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n\ndef(`SUMMARY`, `This is a summary of the changes in files.`)\n```\n#### expanded\n``````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"Generate Slides\",\n    description: \"Generate a slidedeck in markdown. Install extension 'vscode-reveal'.\",\n    categories: [\"samples\"],\n    temperature: 0.1,\n})\n\nconst output = env.file.filename.replace(/\\.gpspec\\.md$/, \".slides.md\")\ndef(\n    \"SOURCE\",\n    [env.file,\n    ...env.links.filter(\n        (f) => !f.filename.endsWith(\".slides.md\")\n    )]\n)\n\n$`Generate a slidedeck in markdown format for the content in SOURCE\nin file ${output} using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  IGNORE Contributing, Copyright and Trademarks sections.\n`\n```\n\n\n</details>\n\n\n<details id=\"gptool-expanded-prompt\"><summary>gptool expanded prompt</summary>\n\n-  model: `gpt-4`\n-  temperature: 0.1\n-  max tokens: 800\n\n``````markdown\nSOURCE:\n````` file=src/counting.py.gpspec.md\n# counting.py\n\n-   [counting.py](./counting.py)\n`````\n\nSOURCE:\n``` file=src/counting.py\n# This is my favorite program!\n\nfor i in range(1, 45):\n    print(i)\n\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n\n# And now, at the end:\nprint(\"The end\")\n```\n\nGenerate a slidedeck in markdown format for the content in SOURCE\nin file src/counting.py.slides.md using markdown.\n\n-  Each slide SHOULD have a title, unless it is only showing a code snippet.\n-  USE heading level 3 for slide titles.\n-  Do NOT add \"Slide:\" or \"Title:\" in the slide.\n-  Keep slides titles VERY short.\n-  USE --- to separate slides.\n-  Keep the content on each slide short. Maximum 3 bullet points.\n-  Use mermaid syntax if you need to generate state diagrams, class inheritance diagrams, relationships.\n-  If the source is code, describe the code and show the code in a separate slide.\n-  Keep code snippet short. Maximum 10 lines. Maximum 42 columns. Use multiple slides if needed. Ellipse sections with ... if necessary.\n-  The first slide have a title and a summary of the slidedeck.\n-  IGNORE Contributing, Copyright and Trademarks sections.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nFile src/counting.py.slides.md:\n`````\n### Introduction\n- This slidedeck provides a walkthrough of the Python script `counting.py`.\n\n---\n\n### Script Overview\n- The script `counting.py` prints a sequence of numbers and letters.\n\n---\n\n### Code Snippet 1\n```python\nfor i in range(1, 45):\n    print(i)\n```\n- This loop prints numbers from 1 to 44.\n\n---\n\n### Code Snippet 2\n```python\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n```\n- This loop prints lowercase letters from 'a' to 'z'.\n\n---\n\n### Code Snippet 3\n```python\nprint(\"The end\")\n```\n- This line prints the string \"The end\".\n\n---\n\n### Summary\n- The script `counting.py` prints a sequence of numbers, letters, and a final string.\n`````\n\nSUMMARY:\n```\nThe file src/counting.py.slides.md was created to provide a slidedeck walkthrough of the Python script `counting.py`. The slidedeck includes an introduction, an overview of the script, explanations of three code snippets, and a summary.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `File src/counting.py.slides.md`\n`````md\n### Introduction\n- This slidedeck provides a walkthrough of the Python script `counting.py`.\n\n---\n\n### Script Overview\n- The script `counting.py` prints a sequence of numbers and letters.\n\n---\n\n### Code Snippet 1\n```python\nfor i in range(1, 45):\n    print(i)\n```\n- This loop prints numbers from 1 to 44.\n\n---\n\n### Code Snippet 2\n```python\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n```\n- This loop prints lowercase letters from 'a' to 'z'.\n\n---\n\n### Code Snippet 3\n```python\nprint(\"The end\")\n```\n- This line prints the string \"The end\".\n\n---\n\n### Summary\n- The script `counting.py` prints a sequence of numbers, letters, and a final string.\n\n`````\n\n-   `SUMMARY`\n`````\nThe file src/counting.py.slides.md was created to provide a slidedeck walkthrough of the Python script `counting.py`. The slidedeck includes an introduction, an overview of the script, explanations of three code snippets, and a summary.\n\n`````\n\n\n</details>\n","text":"File src/counting.py.slides.md:\n`````\n### Introduction\n- This slidedeck provides a walkthrough of the Python script `counting.py`.\n\n---\n\n### Script Overview\n- The script `counting.py` prints a sequence of numbers and letters.\n\n---\n\n### Code Snippet 1\n```python\nfor i in range(1, 45):\n    print(i)\n```\n- This loop prints numbers from 1 to 44.\n\n---\n\n### Code Snippet 2\n```python\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n```\n- This loop prints lowercase letters from 'a' to 'z'.\n\n---\n\n### Code Snippet 3\n```python\nprint(\"The end\")\n```\n- This line prints the string \"The end\".\n\n---\n\n### Summary\n- The script `counting.py` prints a sequence of numbers, letters, and a final string.\n`````\n\nSUMMARY:\n```\nThe file src/counting.py.slides.md was created to provide a slidedeck walkthrough of the Python script `counting.py`. The slidedeck includes an introduction, an overview of the script, explanations of three code snippets, and a summary.\n```","summary":"The file src/counting.py.slides.md was created to provide a slidedeck walkthrough of the Python script `counting.py`. The slidedeck includes an introduction, an overview of the script, explanations of three code snippets, and a summary.\n"}}}
{"sha":"193461073d6dfeff0cb48ab2d0d0e327588a32a89aa0de61b4a37881b519dfef","key":{"template":{"id":"front-matter","title":"SEO front matter"},"fragment":{"fullId":"src/toomanytokens.gpspec.md:0:0","hash":"b30b8029149bfafc"}},"val":{"response":{"edits":[],"fileEdits":{},"trace":"\n# `front-matter` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-YBTUOC`\n\n-   env.**file**\n```js\n{ filename: \"src/toomanytokens.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Too much tokens\\n\\n-    [too many tokens](https://github.com\"... }\n```\n\n-   env.**links**\n```js\n[ { label: \"too many tokens\",\n  filename: \"https://github.com/microsoft/pxt-jacdac/blob/master/routing.\"...,\n  content: \"{\\\"payload\\\":{\\\"allShortcutsEnabled\\\":false,\\\"fileTree\\\":{\\\"\\\":{\\\"ite\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[ { id: \"screenplay\",\n  title: \"A dialog generator for descript\",\n  description: \"Given a description of scenes, generate a dialog between two\"... },\n{ id: \"code-review\",\n  title: \"Code review\",\n  description: \"Given a problem desciption and code, write a code review\" },\n{ id: \"feature\",\n  title: \"Generate BDD scenarios (.feature)\",\n  description: \"Generate a Gherkin feature file from the node and children.\" },\n{ id: \"genfiles.node\",\n  title: \"Generate Node.js Code (multifile)\",\n  description: undefined },\n{ id: \"gen-structure\",\n  title: \"Generate Project Structure\",\n  description: \"Generate project structure.\" },\n{ id: \"python\",\n  title: \"Generate Python Code\",\n  description: undefined },\n{ id: \"prompt-critic\",\n  title: \"Prompt critic\",\n  description: \"Given a goal and a prompt, evaluate the prompt\" },\n{ id: \"shorten.3.5\",\n  title: \"Shorten 3.5\",\n  description: \"Shorten the summary of the fragment using cheaper model.\" },\n{ id: \"short and summarize_2\",\n  title: \"Shorten and Summarize\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"shorten\",\n  title: \"Shorten\",\n  description: \"Shorten the summary of the fragment.\" },\n{ id: \"summarize-links\",\n  title: \"Summarize links\",\n  description: \"Expands contents from links and summarizes them\" },\n{ id: \"technical\",\n  title: \"Technical proofreading\",\n  description: \"Review the text as a technical document writer.\" },\n{ id: \"code-optimizer\",\n  title: \"Code Optimizer\",\n  description: \"Optimize code to run faster, modified from https://twitter.c\"... },\n{ id: \"code-xray\",\n  title: \"Code XRay\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"gptool-meta\",\n  title: \"GPTool metadata generator\",\n  description: \"Generates metadata for GPTools\" },\n{ id: \"slides\",\n  title: \"Generate Slides\",\n  description: \"Generate a slidedeck in markdown. Install extension 'vscode-\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... }... ]\n```\n\n-   env.**template**\n```js\n{ id: \"front-matter\",\ntitle: \"SEO front matter\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"SEO front matter\\\",\\n    description:\\n   \"...,\ndescription: \"Update or generate SEO-optimized front matter for a markdown\"...,\ncategories: [ \"samples\" ],\nsystem: [ \"system\",\n  \"system.diff\",\n  \"system.summary\" ],\nmaxTokens: 2000,\ntemperature: 0,\nmodel: \"gpt-4-32k\",\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.diff` source\n\n```js\nsystem({ title: \"Diff generation\", description: \"Teaches the diff file format supported by GPTools\" })\n\n$`The DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n${env.fence}diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n${env.fence}\n\nDIFF ./file2.ts:\n${env.fence}diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n${env.fence}\n`\n\n$`Do not generate anything else than DIFF sections. Use one DIFF section per change.`\n```\n#### expanded\n``````markdown\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n```diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDIFF ./file2.ts:\n```diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n``````\n###  `system.summary` source\n\n```js\nsystem({\n    title: \"Summarize\",\n    description: \"Generate a summary of the changes\",\n})\n\n$`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n\ndef(`SUMMARY`, `This is a summary of the changes in files.`)\n```\n#### expanded\n``````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"SEO front matter\",\n    description:\n        \"Update or generate SEO-optimized front matter for a markdown file.\",\n    categories: [\"samples\"],\n    system: [\"system\", \"system.diff\", \"system.summary\"],\n    maxTokens: 2000,\n    temperature: 0,\n    model: \"gpt-4-32k\"\n})\n\ndef(\n    \"FILE\",\n    env.links.filter((f) => f.filename.endsWith(\".md\")), { lineNumbers: true }\n)\n\n$`\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter in FILE:\n- Update fields title as needed\n- Update description as needed \n- Update keywords as needed, only 5 keywords or less\n- use yaml format, do not use quotes\n- optimize for search engine optimization.\n- Do NOT modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n`\n```\n\n\n</details>\n\n\n<details id=\"gptool-expanded-prompt\"><summary>gptool expanded prompt</summary>\n\n-  model: `gpt-4-32k`\n-  temperature: \n-  max tokens: 2000\n\n``````markdown\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter in FILE:\n- Update fields title as needed\n- Update description as needed \n- Update keywords as needed, only 5 keywords or less\n- use yaml format, do not use quotes\n- optimize for search engine optimization.\n- Do NOT modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\n```markdown\n---\ntitle: Your Optimized Title Here\ndescription: Your SEO-friendly description here.\nkeywords: keyword1, keyword2, keyword3, keyword4, keyword5\n---\n\n# Your Markdown Content Starts Here\n```\nThis is an example of how to update or generate front matter in a markdown file. Replace \"Your Optimized Title Here\" with your desired title, \"Your SEO-friendly description here\" with your description, and \"keyword1, keyword2, keyword3, keyword4, keyword5\" with your chosen keywords. Remember to keep the keywords to 5 or less for optimal SEO. The markdown content after the front matter should remain unchanged.\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `*`\n`````\nThis is an example of how to update or generate front matter in a markdown file. Replace \"Your Optimized Title Here\" with your desired title, \"Your SEO-friendly description here\" with your description, and \"keyword1, keyword2, keyword3, keyword4, keyword5\" with your chosen keywords. Remember to keep the keywords to 5 or less for optimal SEO. The markdown content after the front matter should remain unchanged.\n\n`````\n\n\n</details>\n","text":"```markdown\n---\ntitle: Your Optimized Title Here\ndescription: Your SEO-friendly description here.\nkeywords: keyword1, keyword2, keyword3, keyword4, keyword5\n---\n\n# Your Markdown Content Starts Here\n```\nThis is an example of how to update or generate front matter in a markdown file. Replace \"Your Optimized Title Here\" with your desired title, \"Your SEO-friendly description here\" with your description, and \"keyword1, keyword2, keyword3, keyword4, keyword5\" with your chosen keywords. Remember to keep the keywords to 5 or less for optimal SEO. The markdown content after the front matter should remain unchanged."}}}
{"sha":"acced0472441fc8d978b61522a482ca28def5581b53a6d784c7119fafdb9bc5a","key":{"template":{"id":"code-review","title":"Code review"},"fragment":{"fullId":"src/counting.py.gpspec.md:0:0","hash":"834e28b2bc1184c0"}},"val":{"creationTime":"2023-12-04T22:58:57.988Z","cacheTime":"2023-12-04T22:59:08.044Z","response":{"prompt":{"system":"---\nYou are concise. Answer in markdown.\n\n\n---\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3::typo\n```\n\nFor example, an error in app.js on line 1 with message \"Missing semicolon\" and a warning in index.ts, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1::Missing semicolon\n::warning file=index.ts,line=10::identation\n```\n\n\n","user":"CODE:\n``` file=src/counting.py\n[1] # This is my favorite program!\n[2] \n[3] for i in range(1, 45):\n[4]     print(i)\n[5] \n[6] for c in range(ord('a'), ord('z') + 1):\n[7]     print(chr(c))\n[8] \n[9] # And now, at the end:\n[10] print(\"The end\")\n```\n\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATIONS with code improvement notice, warning and errors.\n\n"},"vars":{"file":{"filename":"src/counting.py.gpspec.md","label":"current","content":"# Specification\n\n-   [counting.py](./counting.py)\n"},"links":[{"label":"counting.py","filename":"src/counting.py","content":"# This is my favorite program!\n\nfor i in range(1, 45):\n    print(i)\n\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n\n# And now, at the end:\nprint(\"The end\")"}],"parents":[],"fence":"```","markdownFence":"`````","error":"ERROR-YIBUYE","promptOptions":{},"vars":{},"templates":[],"template":{"id":"code-review","title":"Code review","text":"<nothing yet>","jsSource":"gptool({\n    title: \"Code review\",\n    description: \"Given a problem desciption and code, write a code review\",\n    maxTokens: 4000,\n    model: \"gpt-4\",\n    categories: [\"hello world\"],\n    system: [\"system\", \"system.summary\", \"system.annotations\"],\n    temperature: 0,\n})\n\ndef(\n    \"CODE\",\n    env.links.filter(\n        (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n    ),\n    { lineNumbers: true }\n)\n\n$`\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATIONS with code improvement notice, warning and errors.\n`","filename":"/workspaces/coarch/packages/sample/gptools/code-review.gptool.js","description":"Given a problem desciption and code, write a code review","maxTokens":4000,"model":"gpt-4","categories":["hello world"],"system":["system","system.summary","system.annotations"],"temperature":0,"input":".md"}},"edits":[],"annotations":[{"severity":"notice","file":"src/counting.py","line":3,"msg":"Consider adding a comment explaining what the loop does."}],"fileEdits":{},"trace":"\n# `code-review` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-YIBUYE`\n\n-   env.**file**\n```js\n{ filename: \"src/counting.py.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Specification\\n\\n-   [counting.py](./counting.py)\\n\" }\n```\n\n-   env.**links**\n```js\n[ { label: \"counting.py\",\n  filename: \"src/counting.py\",\n  content: \"# This is my favorite program!\\n\\nfor i in range(1, 45):\\n    p\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[  ]\n```\n\n-   env.**template**\n```js\n{ id: \"code-review\",\ntitle: \"Code review\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Code review\\\",\\n    description: \\\"Given a\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/code-review.gptoo\"...,\ndescription: \"Given a problem desciption and code, write a code review\",\nmaxTokens: 4000,\nmodel: \"gpt-4\",\ncategories: [ \"hello world\" ],\nsystem: [ \"system\",\n  \"system.summary\",\n  \"system.annotations\" ],\ntemperature: 0,\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.summary` source\n\n```js\nsystem({\n    title: \"Summarize\",\n    description: \"Generate a summary of the changes\",\n})\n\n$`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n\ndef(`SUMMARY`, `This is a summary of the changes in files.`)\n```\n#### expanded\n``````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n``````\n###  `system.annotations` source\n\n```js\nsystem({\n    title: \"Emits annotations compatible with GitHub Actions\",\n    description:\n        \"GitHub Actions workflows support annotations ([Read more...](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message).\",\n})\n\n$`Use the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.`\n\ndef(\n    \"ANNOTATION\",\n    `::(notice|warning|error) file=<filename>,line=<start line>::<message>`\n)\n\n$`For example, an warning in main.py on line 3 with message \"typo\" would be:`\ndef(\"ANNOTATION\", `::warning file=main.py,line=3::typo`)\n\n$`For example, an error in app.js on line 1 with message \"Missing semicolon\" and a warning in index.ts, would be:`\ndef(\n    \"ANNOTATION\",\n    `::error file=app.js,line=1::Missing semicolon\n::warning file=index.ts,line=10::identation`\n)\n```\n#### expanded\n``````markdown\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3::typo\n```\n\nFor example, an error in app.js on line 1 with message \"Missing semicolon\" and a warning in index.ts, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1::Missing semicolon\n::warning file=index.ts,line=10::identation\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"Code review\",\n    description: \"Given a problem desciption and code, write a code review\",\n    maxTokens: 4000,\n    model: \"gpt-4\",\n    categories: [\"hello world\"],\n    system: [\"system\", \"system.summary\", \"system.annotations\"],\n    temperature: 0,\n})\n\ndef(\n    \"CODE\",\n    env.links.filter(\n        (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n    ),\n    { lineNumbers: true }\n)\n\n$`\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATIONS with code improvement notice, warning and errors.\n`\n```\n\n\n</details>\n\n\n<details id=\"gptool-expanded-prompt\"><summary>gptool expanded prompt</summary>\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 4000\n\n``````markdown\nCODE:\n``` file=src/counting.py\n[1] # This is my favorite program!\n[2] \n[3] for i in range(1, 45):\n[4]     print(i)\n[5] \n[6] for c in range(ord('a'), ord('z') + 1):\n[7]     print(chr(c))\n[8] \n[9] # And now, at the end:\n[10] print(\"The end\")\n```\n\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATIONS with code improvement notice, warning and errors.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nANNOTATION:\n```\n::notice file=src/counting.py,line=3::Consider adding a comment explaining what the loop does.\n::notice file=src/counting.py,line=6::Consider adding a comment explaining what the loop does.\n::notice file=src/counting.py,line=3::The range could be made more readable by using variables for start and end numbers.\n::notice file=src/counting.py,line=6::The range could be made more readable by using variables for start and end characters.\n::notice file=src/counting.py,line=10::Consider adding a newline at the end of the file for better file formatting.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `ANNOTATION`\n`````\n::notice file=src/counting.py,line=3::Consider adding a comment explaining what the loop does.\n::notice file=src/counting.py,line=6::Consider adding a comment explaining what the loop does.\n::notice file=src/counting.py,line=3::The range could be made more readable by using variables for start and end numbers.\n::notice file=src/counting.py,line=6::The range could be made more readable by using variables for start and end characters.\n::notice file=src/counting.py,line=10::Consider adding a newline at the end of the file for better file formatting.\n\n`````\n\n\n</details>\n","text":"ANNOTATION:\n```\n::notice file=src/counting.py,line=3::Consider adding a comment explaining what the loop does.\n::notice file=src/counting.py,line=6::Consider adding a comment explaining what the loop does.\n::notice file=src/counting.py,line=3::The range could be made more readable by using variables for start and end numbers.\n::notice file=src/counting.py,line=6::The range could be made more readable by using variables for start and end characters.\n::notice file=src/counting.py,line=10::Consider adding a newline at the end of the file for better file formatting.\n```"}}}
{"sha":"a21467472ead256429fbf4e718dfb3fd9040d1393d75044d93d3cbc492cc1003","key":{"template":{"id":"code-annotator","title":"Code annotator"},"fragment":{"fullId":"src/counting.py.gpspec.md:0:0","hash":"834e28b2bc1184c0"}},"val":{"creationTime":"2023-12-04T23:32:40.987Z","cacheTime":"2023-12-04T23:32:41.008Z","response":{"prompt":{"system":"---\nYou are concise. Answer in markdown.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n\n\n","user":"CODE:\n``` file=src/counting.py\n[1] # This is my favorite program!\n[2] \n[3] for i in range(1, 45):\n[4]     print(i)\n[5] \n[6] for c in range(ord('a'), ord('z') + 1):\n[7]     print(chr(c))\n[8] \n[9] # And now, at the end:\n[10] print(\"The end\")\n```\n\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATION with code improvement notice, warning and errors.\n\n"},"vars":{"file":{"filename":"src/counting.py.gpspec.md","label":"current","content":"# Specification\n\n-   [counting.py](./counting.py)\n"},"links":[{"label":"counting.py","filename":"src/counting.py","content":"# This is my favorite program!\n\nfor i in range(1, 45):\n    print(i)\n\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n\n# And now, at the end:\nprint(\"The end\")"}],"parents":[],"fence":"```","markdownFence":"`````","error":"ERROR-LMEIGN","promptOptions":{},"vars":{},"templates":[],"template":{"id":"code-annotator","title":"Code annotator","text":"<nothing yet>","jsSource":"gptool({\n    title: \"Code annotator\",\n    description: \"Given a problem desciption and code, write a code review\",\n    maxTokens: 4000,\n    model: \"gpt-4-32k\",\n    categories: [\"hello world\"],\n    system: [\"system\", \"system.annotations\"],\n    temperature: 0,\n})\n\ndef(\n    \"CODE\",\n    env.links.filter(\n        (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n    ),\n    { lineNumbers: true }\n)\n\n$`\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATION with code improvement notice, warning and errors.\n`\n","filename":"/workspaces/coarch/packages/sample/gptools/code-annotator.gptool.js","description":"Given a problem desciption and code, write a code review","maxTokens":4000,"model":"gpt-4-32k","categories":["hello world"],"system":["system","system.annotations"],"temperature":0,"input":".md"}},"edits":[],"annotations":[{"severity":"notice","filename":"src/counting.py","range":[[0,0],[0,1.7976931348623157e+308]],"message":"Add a more descriptive comment about what the program does."},{"severity":"warning","filename":"src/counting.py","range":[[2,0],[2,1.7976931348623157e+308]],"message":"Consider using a main function to encapsulate the logic of your program."},{"severity":"notice","filename":"src/counting.py","range":[[3,0],[3,1.7976931348623157e+308]],"message":"Add a comment explaining what this loop does."},{"severity":"notice","filename":"src/counting.py","range":[[5,0],[5,1.7976931348623157e+308]],"message":"Add a comment explaining what this loop does."},{"severity":"warning","filename":"src/counting.py","range":[[9,0],[9,1.7976931348623157e+308]],"message":"Consider using a more descriptive message when printing the end of the program."}],"fileEdits":{},"trace":"\n# `code-annotator` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-LMEIGN`\n\n-   env.**file**\n```js\n{ filename: \"src/counting.py.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Specification\\n\\n-   [counting.py](./counting.py)\\n\" }\n```\n\n-   env.**links**\n```js\n[ { label: \"counting.py\",\n  filename: \"src/counting.py\",\n  content: \"# This is my favorite program!\\n\\nfor i in range(1, 45):\\n    p\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[  ]\n```\n\n-   env.**template**\n```js\n{ id: \"code-annotator\",\ntitle: \"Code annotator\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Code annotator\\\",\\n    description: \\\"Give\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/code-annotator.gp\"...,\ndescription: \"Given a problem desciption and code, write a code review\",\nmaxTokens: 4000,\nmodel: \"gpt-4-32k\",\ncategories: [ \"hello world\" ],\nsystem: [ \"system\",\n  \"system.annotations\" ],\ntemperature: 0,\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.annotations` source\n\n```js\nsystem({\n    title: \"Emits annotations compatible with GitHub Actions\",\n    description:\n        \"GitHub Actions workflows support annotations ([Read more...](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message).\",\n})\n\n$`Use the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.`\n\ndef(\n    \"ANNOTATION\",\n    `::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>`\n)\n\n$`For example, an warning in main.py on line 3 with message \"typo\" would be:`\ndef(\"ANNOTATION\", `::warning file=main.py,line=3,endLine=3::typo`)\n\n$`For example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:`\ndef(\n    \"ANNOTATION\",\n    `::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation`\n)\n```\n#### expanded\n``````markdown\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"Code annotator\",\n    description: \"Given a problem desciption and code, write a code review\",\n    maxTokens: 4000,\n    model: \"gpt-4-32k\",\n    categories: [\"hello world\"],\n    system: [\"system\", \"system.annotations\"],\n    temperature: 0,\n})\n\ndef(\n    \"CODE\",\n    env.links.filter(\n        (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n    ),\n    { lineNumbers: true }\n)\n\n$`\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATION with code improvement notice, warning and errors.\n`\n```\n\n\n</details>\n\n\n<details id=\"gptool-expanded-prompt\"><summary>gptool expanded prompt</summary>\n\n-  model: `gpt-4-32k`\n-  temperature: \n-  max tokens: 4000\n\n``````markdown\nCODE:\n``` file=src/counting.py\n[1] # This is my favorite program!\n[2] \n[3] for i in range(1, 45):\n[4]     print(i)\n[5] \n[6] for c in range(ord('a'), ord('z') + 1):\n[7]     print(chr(c))\n[8] \n[9] # And now, at the end:\n[10] print(\"The end\")\n```\n\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATION with code improvement notice, warning and errors.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nANNOTATION:\n```\n::notice file=src/counting.py,line=1,endLine=1::Add a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=3::Consider using a main function to encapsulate the logic of your program.\n::notice file=src/counting.py,line=4,endLine=4::Add a comment explaining what this loop does.\n::notice file=src/counting.py,line=6,endLine=6::Add a comment explaining what this loop does.\n::warning file=src/counting.py,line=10,endLine=10::Consider using a more descriptive message when printing the end of the program.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `ANNOTATION`\n`````\n::notice file=src/counting.py,line=1,endLine=1::Add a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=3::Consider using a main function to encapsulate the logic of your program.\n::notice file=src/counting.py,line=4,endLine=4::Add a comment explaining what this loop does.\n::notice file=src/counting.py,line=6,endLine=6::Add a comment explaining what this loop does.\n::warning file=src/counting.py,line=10,endLine=10::Consider using a more descriptive message when printing the end of the program.\n\n`````\n\n\n</details>\n","text":"ANNOTATION:\n```\n::notice file=src/counting.py,line=1,endLine=1::Add a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=3::Consider using a main function to encapsulate the logic of your program.\n::notice file=src/counting.py,line=4,endLine=4::Add a comment explaining what this loop does.\n::notice file=src/counting.py,line=6,endLine=6::Add a comment explaining what this loop does.\n::warning file=src/counting.py,line=10,endLine=10::Consider using a more descriptive message when printing the end of the program.\n```"}}}
{"sha":"a21467472ead256429fbf4e718dfb3fd9040d1393d75044d93d3cbc492cc1003","key":{"template":{"id":"code-annotator","title":"Code annotator"},"fragment":{"fullId":"src/counting.py.gpspec.md:0:0","hash":"834e28b2bc1184c0"}},"val":{"creationTime":"2023-12-04T23:35:29.182Z","cacheTime":"2023-12-04T23:35:29.855Z","response":{"prompt":{"system":"---\nYou are concise. Answer in markdown.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n\n\n","user":"CODE:\n``` file=src/counting.py\n[1] # This is my favorite program!\n[2] \n[3] for i in range(1, 45):\n[4]     print(i)\n[5] \n[6] for c in range(ord('a'), ord('z') + 1):\n[7]     print(chr(c))\n[8] \n[9] # And now, at the end:\n[10] print(\"The end\")\n```\n\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATION with code improvement notice, warning and errors.\n\n"},"vars":{"file":{"filename":"src/counting.py.gpspec.md","label":"current","content":"# Specification\n\n-   [counting.py](./counting.py)\n"},"links":[{"label":"counting.py","filename":"src/counting.py","content":"# This is my favorite program!\n\nfor i in range(1, 45):\n    print(i)\n\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n\n# And now, at the end:\nprint(\"The end\")"}],"parents":[],"fence":"```","markdownFence":"`````","error":"ERROR-JBVVAP","promptOptions":{},"vars":{},"templates":[],"template":{"id":"code-annotator","title":"Code annotator","text":"<nothing yet>","jsSource":"gptool({\n    title: \"Code annotator\",\n    description: \"Given a problem desciption and code, write a code review\",\n    maxTokens: 4000,\n    model: \"gpt-4-32k\",\n    categories: [\"hello world\"],\n    system: [\"system\", \"system.annotations\"],\n    temperature: 0,\n})\n\ndef(\n    \"CODE\",\n    env.links.filter(\n        (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n    ),\n    { lineNumbers: true }\n)\n\n$`\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATION with code improvement notice, warning and errors.\n`\n","filename":"/workspaces/coarch/packages/sample/gptools/code-annotator.gptool.js","description":"Given a problem desciption and code, write a code review","maxTokens":4000,"model":"gpt-4-32k","categories":["hello world"],"system":["system","system.annotations"],"temperature":0,"input":".md"}},"edits":[],"annotations":[{"severity":"notice","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[0,0],[0,1.7976931348623157e+308]],"message":"Add a more descriptive comment about what the program does."},{"severity":"warning","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[2,0],[2,1.7976931348623157e+308]],"message":"Consider using a main function to encapsulate the logic of your program."},{"severity":"notice","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[3,0],[3,1.7976931348623157e+308]],"message":"Add a comment explaining what this loop does."},{"severity":"notice","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[5,0],[5,1.7976931348623157e+308]],"message":"Add a comment explaining what this loop does."},{"severity":"warning","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[9,0],[9,1.7976931348623157e+308]],"message":"Consider using a more descriptive message when printing the end of the program."}],"fileEdits":{},"trace":"\n# `code-annotator` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-JBVVAP`\n\n-   env.**file**\n```js\n{ filename: \"src/counting.py.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Specification\\n\\n-   [counting.py](./counting.py)\\n\" }\n```\n\n-   env.**links**\n```js\n[ { label: \"counting.py\",\n  filename: \"src/counting.py\",\n  content: \"# This is my favorite program!\\n\\nfor i in range(1, 45):\\n    p\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[  ]\n```\n\n-   env.**template**\n```js\n{ id: \"code-annotator\",\ntitle: \"Code annotator\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Code annotator\\\",\\n    description: \\\"Give\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/code-annotator.gp\"...,\ndescription: \"Given a problem desciption and code, write a code review\",\nmaxTokens: 4000,\nmodel: \"gpt-4-32k\",\ncategories: [ \"hello world\" ],\nsystem: [ \"system\",\n  \"system.annotations\" ],\ntemperature: 0,\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.annotations` source\n\n```js\nsystem({\n    title: \"Emits annotations compatible with GitHub Actions\",\n    description:\n        \"GitHub Actions workflows support annotations ([Read more...](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message).\",\n})\n\n$`Use the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.`\n\ndef(\n    \"ANNOTATION\",\n    `::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>`\n)\n\n$`For example, an warning in main.py on line 3 with message \"typo\" would be:`\ndef(\"ANNOTATION\", `::warning file=main.py,line=3,endLine=3::typo`)\n\n$`For example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:`\ndef(\n    \"ANNOTATION\",\n    `::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation`\n)\n```\n#### expanded\n``````markdown\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"Code annotator\",\n    description: \"Given a problem desciption and code, write a code review\",\n    maxTokens: 4000,\n    model: \"gpt-4-32k\",\n    categories: [\"hello world\"],\n    system: [\"system\", \"system.annotations\"],\n    temperature: 0,\n})\n\ndef(\n    \"CODE\",\n    env.links.filter(\n        (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n    ),\n    { lineNumbers: true }\n)\n\n$`\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATION with code improvement notice, warning and errors.\n`\n```\n\n\n</details>\n\n\n<details id=\"gptool-expanded-prompt\"><summary>gptool expanded prompt</summary>\n\n-  model: `gpt-4-32k`\n-  temperature: \n-  max tokens: 4000\n\n``````markdown\nCODE:\n``` file=src/counting.py\n[1] # This is my favorite program!\n[2] \n[3] for i in range(1, 45):\n[4]     print(i)\n[5] \n[6] for c in range(ord('a'), ord('z') + 1):\n[7]     print(chr(c))\n[8] \n[9] # And now, at the end:\n[10] print(\"The end\")\n```\n\nYou are an expert software developer with deep knowledge of the Python programming language.  \nYou have been asked to review the code in CODE and provide a code review.  The code in CODE is written by a novice programmer.\n\nYour job is to critique the code and create ANNOTATION with code improvement notice, warning and errors.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nANNOTATION:\n```\n::notice file=src/counting.py,line=1,endLine=1::Add a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=3::Consider using a main function to encapsulate the logic of your program.\n::notice file=src/counting.py,line=4,endLine=4::Add a comment explaining what this loop does.\n::notice file=src/counting.py,line=6,endLine=6::Add a comment explaining what this loop does.\n::warning file=src/counting.py,line=10,endLine=10::Consider using a more descriptive message when printing the end of the program.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `ANNOTATION`\n`````\n::notice file=src/counting.py,line=1,endLine=1::Add a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=3::Consider using a main function to encapsulate the logic of your program.\n::notice file=src/counting.py,line=4,endLine=4::Add a comment explaining what this loop does.\n::notice file=src/counting.py,line=6,endLine=6::Add a comment explaining what this loop does.\n::warning file=src/counting.py,line=10,endLine=10::Consider using a more descriptive message when printing the end of the program.\n\n`````\n\n\n</details>\n","text":"ANNOTATION:\n```\n::notice file=src/counting.py,line=1,endLine=1::Add a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=3::Consider using a main function to encapsulate the logic of your program.\n::notice file=src/counting.py,line=4,endLine=4::Add a comment explaining what this loop does.\n::notice file=src/counting.py,line=6,endLine=6::Add a comment explaining what this loop does.\n::warning file=src/counting.py,line=10,endLine=10::Consider using a more descriptive message when printing the end of the program.\n```"}}}
{"sha":"a21467472ead256429fbf4e718dfb3fd9040d1393d75044d93d3cbc492cc1003","key":{"template":{"id":"code-annotator","title":"Code annotator"},"fragment":{"fullId":"src/counting.py.gpspec.md:0:0","hash":"834e28b2bc1184c0"}},"val":{"creationTime":"2023-12-04T23:44:10.041Z","cacheTime":"2023-12-04T23:44:18.528Z","response":{"prompt":{"system":"---\nYou are concise. Answer in markdown.\n\n\n---\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n\n\n","user":"CODE:\n``` file=src/counting.py\n[1] # This is my favorite program!\n[2] \n[3] for i in range(1, 45):\n[4]     print(i)\n[5] \n[6] for c in range(ord('a'), ord('z') + 1):\n[7]     print(chr(c))\n[8] \n[9] # And now, at the end:\n[10] print(\"The end\")\n```\n\nYou are an EXPORT software developer with deep knowledge of all programming languages.\n\nYour job is to do a code review of CODE and create ANNOTATION with code improvement notice, warning and errors. \n- No more than 5 annotations per code file.\n- Consider readability, maintainability, performance, security, and correctness. \n- The code in CODE is written by a novice programmer.\n\nDo your best and will get a large tip. $$$.\n\n"},"vars":{"file":{"filename":"src/counting.py.gpspec.md","label":"current","content":"# Specification\n\n-   [counting.py](./counting.py)\n"},"links":[{"label":"counting.py","filename":"src/counting.py","content":"# This is my favorite program!\n\nfor i in range(1, 45):\n    print(i)\n\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n\n# And now, at the end:\nprint(\"The end\")"}],"parents":[],"fence":"```","markdownFence":"`````","error":"ERROR-LVIMGQ","promptOptions":{},"vars":{},"templates":[],"template":{"id":"code-annotator","title":"Code annotator","text":"<nothing yet>","jsSource":"gptool({\n    title: \"Code annotator\",\n    description: \"Given a problem desciption and code, write a code review\",\n    maxTokens: 4000,\n    model: \"gpt-4-32k\",\n    categories: [\"hello world\"],\n    system: [\"system\", \"system.annotations\"],\n    temperature: 0,\n})\n\ndef(\n    \"CODE\",\n    env.links.filter(\n        (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n    ),\n    { lineNumbers: true }\n)\n\n$`\nYou are an EXPORT software developer with deep knowledge of all programming languages.\n\nYour job is to do a code review of CODE and create ANNOTATION with code improvement notice, warning and errors. \n- No more than 5 annotations per code file.\n- Consider readability, maintainability, performance, security, and correctness. \n- The code in CODE is written by a novice programmer.\n\nDo your best and will get a large tip. $$$.\n`\n","description":"Given a problem desciption and code, write a code review","maxTokens":4000,"model":"gpt-4-32k","categories":["hello world"],"system":["system","system.annotations"],"temperature":0,"input":".md"}},"edits":[],"annotations":[{"severity":"notice","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[0,0],[0,1.7976931348623157e+308]],"message":"Consider adding a more descriptive comment about what the program does."},{"severity":"warning","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[2,0],[3,1.7976931348623157e+308]],"message":"Use list comprehension for better performance and readability."},{"severity":"notice","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[5,0],[6,1.7976931348623157e+308]],"message":"Use list comprehension for better performance and readability."},{"severity":"error","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[5,0],[6,1.7976931348623157e+308]],"message":"Avoid using magic numbers ('a' and 'z'). Consider using constants for better readability and maintainability."},{"severity":"notice","filename":"/workspaces/coarch/packages/sample/src/counting.py","range":[[9,0],[9,1.7976931348623157e+308]],"message":"Consider adding a newline at the end of the file for better compatibility across different platforms and editors."}],"fileEdits":{},"trace":"\n# `code-annotator` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-LVIMGQ`\n\n-   env.**file**\n```js\n{ filename: \"src/counting.py.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Specification\\n\\n-   [counting.py](./counting.py)\\n\" }\n```\n\n-   env.**links**\n```js\n[ { label: \"counting.py\",\n  filename: \"src/counting.py\",\n  content: \"# This is my favorite program!\\n\\nfor i in range(1, 45):\\n    p\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[  ]\n```\n\n-   env.**template**\n```js\n{ id: \"code-annotator\",\ntitle: \"Code annotator\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Code annotator\\\",\\n    description: \\\"Give\"...,\ndescription: \"Given a problem desciption and code, write a code review\",\nmaxTokens: 4000,\nmodel: \"gpt-4-32k\",\ncategories: [ \"hello world\" ],\nsystem: [ \"system\",\n  \"system.annotations\" ],\ntemperature: 0,\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.annotations` source\n\n```js\nsystem({\n    title: \"Emits annotations compatible with GitHub Actions\",\n    description:\n        \"GitHub Actions workflows support annotations ([Read more...](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message).\",\n})\n\n$`Use the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.`\n\ndef(\n    \"ANNOTATION\",\n    `::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>`\n)\n\n$`For example, an warning in main.py on line 3 with message \"typo\" would be:`\ndef(\"ANNOTATION\", `::warning file=main.py,line=3,endLine=3::typo`)\n\n$`For example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:`\ndef(\n    \"ANNOTATION\",\n    `::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation`\n)\n```\n#### expanded\n``````markdown\nUse the following format to create **file annotations** (same as GitHub Actions workflow). Group annotations together.\n\nANNOTATION:\n```\n::(notice|warning|error) file=<filename>,line=<start line>,endLine=<end line>::<message>\n```\n\nFor example, an warning in main.py on line 3 with message \"typo\" would be:\n\nANNOTATION:\n```\n::warning file=main.py,line=3,endLine=3::typo\n```\n\nFor example, an error in app.js between line 1 and 4 with message \"Missing semicolon\" and a warning in index.ts on line 10, would be:\n\nANNOTATION:\n```\n::error file=app.js,line=1,endLine=4::Missing semicolon\n::warning file=index.ts,line=10,endLine=10::identation\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"Code annotator\",\n    description: \"Given a problem desciption and code, write a code review\",\n    maxTokens: 4000,\n    model: \"gpt-4-32k\",\n    categories: [\"hello world\"],\n    system: [\"system\", \"system.annotations\"],\n    temperature: 0,\n})\n\ndef(\n    \"CODE\",\n    env.links.filter(\n        (f) => f.filename.endsWith(\".py\") && !f.filename.startsWith(\"test_\")\n    ),\n    { lineNumbers: true }\n)\n\n$`\nYou are an EXPORT software developer with deep knowledge of all programming languages.\n\nYour job is to do a code review of CODE and create ANNOTATION with code improvement notice, warning and errors. \n- No more than 5 annotations per code file.\n- Consider readability, maintainability, performance, security, and correctness. \n- The code in CODE is written by a novice programmer.\n\nDo your best and will get a large tip. $$$.\n`\n```\n\n\n</details>\n\n\n<details id=\"gptool-expanded-prompt\"><summary>gptool expanded prompt</summary>\n\n-  model: `gpt-4-32k`\n-  temperature: \n-  max tokens: 4000\n\n``````markdown\nCODE:\n``` file=src/counting.py\n[1] # This is my favorite program!\n[2] \n[3] for i in range(1, 45):\n[4]     print(i)\n[5] \n[6] for c in range(ord('a'), ord('z') + 1):\n[7]     print(chr(c))\n[8] \n[9] # And now, at the end:\n[10] print(\"The end\")\n```\n\nYou are an EXPORT software developer with deep knowledge of all programming languages.\n\nYour job is to do a code review of CODE and create ANNOTATION with code improvement notice, warning and errors. \n- No more than 5 annotations per code file.\n- Consider readability, maintainability, performance, security, and correctness. \n- The code in CODE is written by a novice programmer.\n\nDo your best and will get a large tip. $$$.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nANNOTATION:\n```\n::notice file=src/counting.py,line=1,endLine=1::Consider adding a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=4::Use list comprehension for better performance and readability.\n::notice file=src/counting.py,line=6,endLine=7::Use list comprehension for better performance and readability.\n::error file=src/counting.py,line=6,endLine=7::Avoid using magic numbers ('a' and 'z'). Consider using constants for better readability and maintainability.\n::notice file=src/counting.py,line=10,endLine=10::Consider adding a newline at the end of the file for better compatibility across different platforms and editors.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `ANNOTATION`\n`````\n::notice file=src/counting.py,line=1,endLine=1::Consider adding a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=4::Use list comprehension for better performance and readability.\n::notice file=src/counting.py,line=6,endLine=7::Use list comprehension for better performance and readability.\n::error file=src/counting.py,line=6,endLine=7::Avoid using magic numbers ('a' and 'z'). Consider using constants for better readability and maintainability.\n::notice file=src/counting.py,line=10,endLine=10::Consider adding a newline at the end of the file for better compatibility across different platforms and editors.\n\n`````\n\n\n</details>\n","text":"ANNOTATION:\n```\n::notice file=src/counting.py,line=1,endLine=1::Consider adding a more descriptive comment about what the program does.\n::warning file=src/counting.py,line=3,endLine=4::Use list comprehension for better performance and readability.\n::notice file=src/counting.py,line=6,endLine=7::Use list comprehension for better performance and readability.\n::error file=src/counting.py,line=6,endLine=7::Avoid using magic numbers ('a' and 'z'). Consider using constants for better readability and maintainability.\n::notice file=src/counting.py,line=10,endLine=10::Consider adding a newline at the end of the file for better compatibility across different platforms and editors.\n```"}}}
{"sha":"cb971f2924b0a26375d5939302f87ed1d98f2a1d4db772c6988d5a839f2039b0","key":{"template":{"id":"python","title":"Generate Python Code"},"fragment":{"fullId":"src/counting.gpspec.md#RG35","hash":"c14bd941289e6ef2"}},"val":{"creationTime":"2023-12-06T03:46:10.482Z","cacheTime":"2023-12-06T03:46:15.600Z","response":{"prompt":{"system":"---\nYou are concise. Answer in markdown.\n\n\n---\nWhen explaining answers, take a deep breath.\n\n\n---\nWhen generating or updating files you will use the following syntax:\n\nFile anotherfolder/file1.ts:\n```\nWhat goes in\nanotherfolder/file1.ts.\n```\n\nFile anotherfolder/file1.py:\n```\nWhat goes in\nanotherfolder/file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nWhen generating new files, place files in folder \"anotherfolder\".\n\nIf a file does not have changes, do not regenerate.\n\n\n---\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n","user":"You are an expert system designer that writes Python code.\n\nSUMMARY:\n````` file=src/counting.gpspec.md\n# Counting {#RG35}\n\nProgram that shows numbers from 1 to 44 and then letters from a to z.\nFinally prints \"Finished\".\n\n-   [python](./counting.py)\n\n<!-- @outputFolder anotherfolder -->\n<!-- @maxTokens 1024 -->\n<!-- @temperature 0.5 -->\n<!-- @model gpt-4-32k -->\n`````\n\nGenerate python code to match SUMMARY. Save the generated python in the src/counting.gptools.py file.\n\n"},"vars":{"file":{"filename":"src/counting.gpspec.md","label":"current","content":"# Counting {#RG35}\n\nProgram that shows numbers from 1 to 44 and then letters from a to z.\nFinally prints \"Finished\".\n\n-   [python](./counting.py)\n\n<!-- @outputFolder anotherfolder -->\n<!-- @maxTokens 1024 -->\n<!-- @temperature 0.5 -->\n<!-- @model gpt-4-32k -->"},"links":[{"label":"python","filename":"src/counting.py","content":"# This is my favorite program!\n\nfor i in range(1, 45):\n    print(i)\n\nfor c in range(ord('a'), ord('z') + 1):\n    print(chr(c))\n\n# And now, at the end:\nprint(\"The end\")"}],"parents":[],"fence":"```","markdownFence":"`````","error":"ERROR-JDHJWS","promptOptions":{},"vars":{"outputFolder":"anotherfolder","maxTokens":"1024","temperature":"0.5","model":"gpt-4-32k"},"templates":[],"template":{"id":"python","title":"Generate Python Code","text":"<nothing yet>","jsSource":"gptool({\n    title: \"Generate Python Code\",\n    temperature: 0.01,\n    categories: [\"code.python\"],\n})\n\nconst pythonFileName = env.file?.filename?.replace(\".gpspec.md\", \".gptools.py\")\nconst python = env.links.find(lk => lk.filename === pythonFileName)\n\n$`\nYou are an expert system designer that writes Python code.\n`\n\ndef(\"SUMMARY\", env.file)\nif (python) {\n    $`Update the following CODE to match SUMMARY. Limit changes to existing code to minimum.`\n    def(\"CODE\", python)\n}\nelse\n    $`Generate python code to match SUMMARY. Save the generated python in the ${pythonFileName} file.`\n","filename":"/workspaces/coarch/packages/sample/gptools/python/python.gptool.js","temperature":0.01,"categories":["code.python"],"input":".md"}},"edits":[{"label":"Create /workspaces/coarch/packages/sample/src/counting.gptools.py","filename":"/workspaces/coarch/packages/sample/src/counting.gptools.py","type":"createfile","text":"# Program that shows numbers from 1 to 44 and then letters from a to z.\n# Finally prints \"Finished\".\n\nfor i in range(1, 45):\n    print(i)\n\nfor char in range(97, 123):\n    print(chr(char))\n\nprint(\"Finished\")\n","overwrite":true},{"label":"Generate Python Code","filename":"/workspaces/coarch/packages/sample/src/counting.gpspec.md","type":"insert","pos":[5,27],"text":"\n-   [counting.gptools.py](counting.gptools.py)"}],"annotations":[],"fileEdits":{"/workspaces/coarch/packages/sample/src/counting.gptools.py":{"before":null,"after":"# Program that shows numbers from 1 to 44 and then letters from a to z.\n# Finally prints \"Finished\".\n\nfor i in range(1, 45):\n    print(i)\n\nfor char in range(97, 123):\n    print(chr(char))\n\nprint(\"Finished\")\n"}},"trace":"## python\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-JDHJWS`\n\n-   env.**file**\n```js\n{ filename: \"src/counting.gpspec.md\",\nlabel: \"current\",\ncontent: \"# Counting {#RG35}\\n\\nProgram that shows numbers from 1 to 44 \"... }\n```\n\n-   env.**links**\n```js\n[ { label: \"python\",\n  filename: \"src/counting.py\",\n  content: \"# This is my favorite program!\\n\\nfor i in range(1, 45):\\n    p\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{ outputFolder: \"anotherfolder\",\nmaxTokens: \"1024\",\ntemperature: \"0.5\",\nmodel: \"gpt-4-32k\" }\n```\n\n-   env.**templates**\n```js\n[  ]\n```\n\n-   env.**template**\n```js\n{ id: \"python\",\ntitle: \"Generate Python Code\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"Generate Python Code\\\",\\n    temperature:\"...,\nfilename: \"/workspaces/coarch/packages/sample/gptools/python/python.gpt\"...,\ntemperature: 0.01,\ncategories: [ \"code.python\" ],\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.explanations` source\n\n```js\nsystem({ title: \"Explain your answers\" })\n$`When explaining answers, take a deep breath.`\n```\n#### expanded\n``````markdown\nWhen explaining answers, take a deep breath.\n``````\n###  `system.files` source\n\n```js\nsystem({\n    title: \"File generation\",\n    description: \"Teaches the file format supported by GPTools\",\n})\n\nconst folder =\n    env.vars[\"outputFolder\"] || env.template.outputFolder\n$`When generating or updating files you will use the following syntax:`\n\ndef(\n    `File ${folder || \".\"}/file1.ts`,\n    `What goes in\\n${folder || \".\"}/file1.ts.`,\n    { language: \"typescript\" }\n)\ndef(\n    `File ${folder || \".\"}/file1.py`,\n    `What goes in\\n${folder || \".\"}/file1.py.`,\n    { language: \"python\" }\n)\ndef(\n    `File /path_to_file/file2.md`,\n    `What goes in\\n/path_to_file/file2.md.`,\n    { language: \"markdown\" }\n)\n\n$`Make sure to use precisely ${env.fence} to guard file code sections.`\n$`Make sure to use precisely ${env.markdownFence} to guard file markdown sections.`\n$`Use full path of filename in code section header.`\nif (folder) $`When generating new files, place files in folder \"${folder}\".`\n$`If a file does not have changes, do not regenerate.`\n```\n#### expanded\n``````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile anotherfolder/file1.ts:\n```\nWhat goes in\nanotherfolder/file1.ts.\n```\n\nFile anotherfolder/file1.py:\n```\nWhat goes in\nanotherfolder/file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nWhen generating new files, place files in folder \"anotherfolder\".\n\nIf a file does not have changes, do not regenerate.\n``````\n###  `system.summary` source\n\n```js\nsystem({\n    title: \"Summarize\",\n    description: \"Generate a summary of the changes\",\n})\n\n$`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n\ndef(`SUMMARY`, `This is a summary of the changes in files.`)\n```\n#### expanded\n``````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: \"Generate Python Code\",\n    temperature: 0.01,\n    categories: [\"code.python\"],\n})\n\nconst pythonFileName = env.file?.filename?.replace(\".gpspec.md\", \".gptools.py\")\nconst python = env.links.find(lk => lk.filename === pythonFileName)\n\n$`\nYou are an expert system designer that writes Python code.\n`\n\ndef(\"SUMMARY\", env.file)\nif (python) {\n    $`Update the following CODE to match SUMMARY. Limit changes to existing code to minimum.`\n    def(\"CODE\", python)\n}\nelse\n    $`Generate python code to match SUMMARY. Save the generated python in the ${pythonFileName} file.`\n```\n\n\n</details>\n\n\n<details id=\"gptool-expanded-prompt\"><summary>gptool expanded prompt</summary>\n\n-  model: `gpt-4-32k`\n-  temperature: 0.5\n-  max tokens: 1024\n\n``````markdown\nYou are an expert system designer that writes Python code.\n\nSUMMARY:\n````` file=src/counting.gpspec.md\n# Counting {#RG35}\n\nProgram that shows numbers from 1 to 44 and then letters from a to z.\nFinally prints \"Finished\".\n\n-   [python](./counting.py)\n\n<!-- @outputFolder anotherfolder -->\n<!-- @maxTokens 1024 -->\n<!-- @temperature 0.5 -->\n<!-- @model gpt-4-32k -->\n`````\n\nGenerate python code to match SUMMARY. Save the generated python in the src/counting.gptools.py file.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nFile src/counting.gptools.py:\n```python\n# Program that shows numbers from 1 to 44 and then letters from a to z.\n# Finally prints \"Finished\".\n\nfor i in range(1, 45):\n    print(i)\n\nfor char in range(97, 123):\n    print(chr(char))\n\nprint(\"Finished\")\n```\n\nSUMMARY:\n```\nGenerated Python code that prints numbers from 1 to 44, then letters from a to z, and finally prints \"Finished\". The code is saved in the src/counting.gptools.py file.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `File src/counting.gptools.py`\n`````py\n# Program that shows numbers from 1 to 44 and then letters from a to z.\n# Finally prints \"Finished\".\n\nfor i in range(1, 45):\n    print(i)\n\nfor char in range(97, 123):\n    print(chr(char))\n\nprint(\"Finished\")\n\n`````\n\n-   `SUMMARY`\n`````\nGenerated Python code that prints numbers from 1 to 44, then letters from a to z, and finally prints \"Finished\". The code is saved in the src/counting.gptools.py file.\n\n`````\n\n\n</details>\n\n\n<details id=\"edits\"><summary>edits</summary>\n\n| Type | Filename | Message |\n| --- | --- | --- |\n| createfile | /workspaces/coarch/packages/sample/src/counting.gptools.py | Create /workspaces/coarch/packages/sample/src/counting.gptools.py |\n| insert | /workspaces/coarch/packages/sample/src/counting.gpspec.md | Generate Python Code |\n\n</details>\n","text":"File src/counting.gptools.py:\n```python\n# Program that shows numbers from 1 to 44 and then letters from a to z.\n# Finally prints \"Finished\".\n\nfor i in range(1, 45):\n    print(i)\n\nfor char in range(97, 123):\n    print(chr(char))\n\nprint(\"Finished\")\n```\n\nSUMMARY:\n```\nGenerated Python code that prints numbers from 1 to 44, then letters from a to z, and finally prints \"Finished\". The code is saved in the src/counting.gptools.py file.\n```","summary":"Generated Python code that prints numbers from 1 to 44, then letters from a to z, and finally prints \"Finished\". The code is saved in the src/counting.gptools.py file.\n"}}}
