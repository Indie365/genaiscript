/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/upsert-file": {
    /** Upsert File */
    post: operations["upsert_file_upsert_file_post"];
  };
  "/upsert": {
    /** Upsert */
    post: operations["upsert_upsert_post"];
  };
  "/query": {
    /** Query Main */
    post: operations["query_main_query_post"];
  };
  "/delete": {
    /** Delete */
    delete: operations["delete_delete_delete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_upsert_file_upsert_file_post */
    Body_upsert_file_upsert_file_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /** Metadata */
      metadata?: string;
    };
    /** DeleteRequest */
    DeleteRequest: {
      /** Ids */
      ids?: string[];
      filter?: components["schemas"]["DocumentMetadataFilter"];
      /**
       * Delete All
       * @default false
       */
      delete_all?: boolean;
    };
    /** DeleteResponse */
    DeleteResponse: {
      /** Success */
      success: boolean;
    };
    /** Document */
    Document: {
      /** Id */
      id?: string;
      /** Text */
      text: string;
      metadata?: components["schemas"]["DocumentMetadata"];
    };
    /** DocumentChunkMetadata */
    DocumentChunkMetadata: {
      source?: components["schemas"]["Source"];
      /** Source Id */
      source_id?: string;
      /** Url */
      url?: string;
      /** Created At */
      created_at?: string;
      /** Author */
      author?: string;
      /** Document Id */
      document_id?: string;
    };
    /** DocumentChunkWithScore */
    DocumentChunkWithScore: {
      /** Id */
      id?: string;
      /** Text */
      text: string;
      metadata: components["schemas"]["DocumentChunkMetadata"];
      /** Embedding */
      embedding?: number[];
      /** Score */
      score: number;
    };
    /** DocumentMetadata */
    DocumentMetadata: {
      source?: components["schemas"]["Source"];
      /** Source Id */
      source_id?: string;
      /** Url */
      url?: string;
      /** Created At */
      created_at?: string;
      /** Author */
      author?: string;
    };
    /** DocumentMetadataFilter */
    DocumentMetadataFilter: {
      /** Document Id */
      document_id?: string;
      source?: components["schemas"]["Source"];
      /** Source Id */
      source_id?: string;
      /** Author */
      author?: string;
      /** Start Date */
      start_date?: string;
      /** End Date */
      end_date?: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Query */
    Query: {
      /** Query */
      query: string;
      filter?: components["schemas"]["DocumentMetadataFilter"];
      /**
       * Top K
       * @default 3
       */
      top_k?: number;
    };
    /** QueryRequest */
    QueryRequest: {
      /** Queries */
      queries: components["schemas"]["Query"][];
    };
    /** QueryResponse */
    QueryResponse: {
      /** Results */
      results: components["schemas"]["QueryResult"][];
    };
    /** QueryResult */
    QueryResult: {
      /** Query */
      query: string;
      /** Results */
      results: components["schemas"]["DocumentChunkWithScore"][];
    };
    /**
     * Source
     * @description An enumeration.
     * @enum {string}
     */
    Source: "email" | "file" | "chat";
    /** UpsertRequest */
    UpsertRequest: {
      /** Documents */
      documents: components["schemas"]["Document"][];
    };
    /** UpsertResponse */
    UpsertResponse: {
      /** Ids */
      ids: string[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Upsert File */
  upsert_file_upsert_file_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upsert_file_upsert_file_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UpsertResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Upsert */
  upsert_upsert_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpsertRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UpsertResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Query Main */
  query_main_query_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QueryResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_delete_delete: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
