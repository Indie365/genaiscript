import { readdirSync, readFileSync, writeFileSync } from "fs"
import json5 from "json5"
const { parse } = json5

const dir = "./src/genaisrc"
const fp = "./src/default_prompts.ts"
const fmp = "../../docs/src/content/docs/reference/scripts/system.md"
console.debug(`bundling ${dir}/*.genai.js into default_prompts.ts`)
const promptMap = {}
const prompts = readdirSync(dir)
for (const prompt of prompts) {
    if (!prompt.endsWith(".js")) continue
    const text = readFileSync(`${dir}/${prompt}`, "utf-8")

    if (prompt.endsWith(".genai.js"))
        promptMap[prompt.replace(/\.genai\.js$/i, "")] = text
}
const promptDefs = {
    ".gitattributes": "genaiscript.d.ts -diff merge=ours linguist-generated",
    "jsconfig.json": JSON.stringify(
        {
            compilerOptions: {
                lib: ["ES2022"],
                target: "ES2022",
                module: "ES2022",
                moduleDetection: "force",
                checkJs: true,
                allowJs: true,
                skipLibCheck: true,
            },
            include: ["*.js", "./genaiscript.d.ts"],
        },
        null,
        4
    ),
    "genaiscript.d.ts": ["./src/prompt_template.d.ts", "./prompt_type.d.ts"]
        .map((fn) => readFileSync(fn, { encoding: "utf-8" }))
        .map((src) =>
            src.replace(/^\/\/\/\s+<reference\s+path="[^"]+"\s*\/>\s*$/gm, "")
        )
        .join("\n\n"),
}

// listing list of supported wasm languages
const wasms = await readdirSync("../../node_modules/tree-sitter-wasms/out/")
    .map((file) => /^tree-sitter-(\w*)\.wasm$/.exec(file))
    .map((m) => m?.[1])
    .filter((f) => !!f)

const text = `// autogenerated - node bundleprompts.mjs
export const defaultPrompts = Object.freeze<Record<string, string>>(${JSON.stringify(
    promptMap,
    null,
    4
)});

export const promptDefinitions = Object.freeze<Record<string, string>>(${JSON.stringify(
    promptDefs,
    null,
    4
)});

export const treeSitterWasms: string[] = ${JSON.stringify(wasms)};
\n`

writeFileSync(fp, text, "utf-8")

const markdown = `---
title: System Prompts
sidebar:
    order: 10
---
<!-- autogenerated - node bundleprompts.mjs -->

System prompts are scripts that are executed and injected before the main prompt output.

-   \`system.*.genai.js\` are considered system prompt templates
-   system prompts are unlisted by default
-   system prompts must use the \`system\` function instead of \`script\`
-   system prompts are executed with the same environment as the main prompt

\`\`\`js title="system.zscot.genai.js" "system"
system({
    title: "Zero-shot Chain of Thought",
})
$\`Let's think step by step.\`
\`\`\`


## Custom system prompts list

The \`system\` field can be populated with an array of system prompt identifiers.

\`\`\`js "system"
script({
    ...,
    system: ["system.annotations"]
})
\`\`\`

## Builtin System Prompts

GenAIScript comes with a number of system prompt that support features like creating files, extracting diffs or
generating annotations. If unspecified, GenAIScript looks for specific keywords to activate the various system prompts.

${Object.keys(promptMap)
    .sort()
    .map((k) => {
        const v = promptMap[k]
        const m = /\b(?<kind>system|script)\(\s*(?<meta>\{.*?\})\s*\)/s.exec(v)
        const meta = parse(m.groups.meta)
        return `### \`${k}\`

${meta.title || ""}

${meta.description || ""}

\`\`\`\`\`js wrap
${v}
\`\`\`\`\`
`
    })
    .join("\n\n")}
`
writeFileSync(fmp, markdown, "utf-8")
