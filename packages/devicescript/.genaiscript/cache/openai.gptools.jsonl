{"sha":"0235aeeda113e2b9ca7f720b2c89f61855974600b1a5f93087b919e3cd368e50","key":{"model":"gpt-4","temperature":0,"max_tokens":2000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, do not add line numbers\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do not generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do not emit the whole file content\n, deleted lines must exist in the original file (do not invent deleted lines)\n, added lines must not exist in the original file\n, keep the diffs as small as possible:\n\nDIFF ./file.ts:\n`````diff\n  2 lines before changes (not the whole file)\n- deleted line\n- delete line 2\n+ added line\n+ added line 2\n  2 lines after changes (not the whole file)\n`````\n\nDIFF ./file2.ts:\n`````diff\n  2 line before changes (not the whole file)\n  - deleted line\n  - delete line 2\n  + added line\n  + added line 2\n  2 lines after changes (not the whole file)\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"\nYou are a helpful front matter generator. You are an SEO expert.\n\nGenerate DIFF for SOURCE front matter:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter.\n\nIf no front matter is present, generate it.\n\n"}]},"val":"DIFF ./source.md:\n`````diff\n  ---\n  title: Original Title\n  description: Original Description\n  keywords: keyword1, keyword2, keyword3\n  ---\n  \n- title: Original Title\n- description: Original Description\n- keywords: keyword1, keyword2, keyword3\n+ title: Updated Title\n+ description: Updated Description\n+ keywords: keyword1, keyword2, keyword3, keyword4, keyword5\n`````\n\nDIFF ./source2.md:\n`````diff\n  No front matter present\n  \n+ ---\n+ title: New Title\n+ description: New Description\n+ keywords: keyword1, keyword2, keyword3, keyword4, keyword5\n+ ---\n`````"}
{"sha":"468faeaa729cca96bcd41611f3b58e2fb6a141afcde1bf921fcf285b9cae3792","key":{"model":"gpt-4","temperature":0,"max_tokens":2000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, do not add line numbers\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do not generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do not emit the whole file content\n, deleted lines must exist in the original file (do not invent deleted lines)\n, added lines must not exist in the original file\n, keep the diffs as small as possible:\n\nDIFF ./file.ts:\n`````diff\n  2 lines before changes (not the whole file)\n- deleted line\n- delete line 2\n+ added line\n+ added line 2\n  2 lines after changes (not the whole file)\n`````\n\nDIFF ./file2.ts:\n`````diff\n  2 line before changes (not the whole file)\n  - deleted line\n  - delete line 2\n  + added line\n  + added line 2\n  2 lines after changes (not the whole file)\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"\nSOURCE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a helpful front matter generator. You are an SEO expert.\n\nGenerate DIFF for SOURCE front matter:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter.\n\nIf no front matter is present, generate it.\n\n"}]},"val":"DIFF ./src/README.md:\n`````diff\n+ ---\n+ title: PCF8563 Real-Time Clock Driver\n+ description: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral\n+ keywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n+ ---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n"}
{"sha":"1626d1741169c981bdf9dc709700122c4b2c823ccaaa8e0ecc35ad38a5c932a5","key":{"model":"gpt-4","temperature":0,"max_tokens":2000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, do not add line numbers\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do not generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do not emit the whole file content\n, deleted lines must exist in the original file (do not invent deleted lines)\n, added lines must not exist in the original file\n, keep the diffs as small as possible:\n\nDIFF ./file.ts:\n`````diff\n  2 lines before changes (not the whole file)\n- deleted line\n- delete line 2\n+ added line\n+ added line 2\n  2 lines after changes (not the whole file)\n`````\n\nDIFF ./file2.ts:\n`````diff\n  2 line before changes (not the whole file)\n  - deleted line\n  - delete line 2\n  + added line\n  + added line 2\n  2 lines after changes (not the whole file)\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"\nSOURCE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nGenerate DIFF for SOURCE front matter:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter.\n\nIf no front matter is present, generate it.\n\n"}]},"val":"DIFF ./src/README.md:\n`````diff\n+ ---\n+ title: PCF8563 Real-Time Clock Driver\n+ description: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n+ keywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n+ ---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n"}
{"sha":"f70ae9a65114f0ba1864204cf26006a0d3e888d5c021c91bd3db0ea562bf75bf","key":{"model":"gpt-4","temperature":0,"max_tokens":2000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, do not add line numbers\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do not generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do not emit the whole file content\n, deleted lines must exist in the original file (do not invent deleted lines)\n, added lines must not exist in the original file\n, keep the diffs as small as possible:\n\nDIFF ./file.ts:\n`````diff\n  2 lines before changes (not the whole file)\n- deleted line\n- delete line 2\n+ added line\n+ added line 2\n  2 lines after changes (not the whole file)\n`````\n\nDIFF ./file2.ts:\n`````diff\n  2 line before changes (not the whole file)\n  - deleted line\n  - delete line 2\n  + added line\n  + added line 2\n  2 lines after changes (not the whole file)\n`````\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"\nSOURCE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nGenerate DIFF for SOURCE front matter:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter\n- do not generate markdown outside the front matter\n\nIf no front matter is present, generate it.\n\n"}]},"val":"DIFF ./src/README.md:\n`````diff\n+ ---\n+ title: PCF8563 Real-Time Clock Driver\n+ description: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral\n+ keywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n+ ---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n"}
{"sha":"286455b6a7e3e73e7add8daffb6738a174a8f7e9db981183d4a50919ce03828b","key":{"model":"gpt-4","temperature":0,"max_tokens":2000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\n"},{"role":"user","content":"\nSOURCE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter of SOURCE files:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n\n"}]},"val":"````` file=src/README.md\n---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript driver, peripheral\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n"}
{"sha":"1e33b61802955508da07bc1d99a319a21ea1e9cdf8ea4f7e808fcfb65e1e7d0a","key":{"model":"gpt-4","temperature":0,"max_tokens":2000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\n"},{"role":"user","content":"\nFILE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter in FILE:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n\n"}]},"val":"FILE:\n````` file=src/README.md\n---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n"}
{"sha":"72907d9dee6f98c2feb417b0bebc0e16a673b867ec2b2f99ce10811da0ee4f4b","key":{"model":"gpt-4","temperature":0.2,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n```diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDIFF ./file2.ts:\n```diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"SCRIPTS:\n``` file=gptools/firmware.gptool.js\ngptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n\nAnalyze the content of SCRIPTS files and generate a DIFF with the updated 'title' and 'description' field in the 'gptool' function call that represents the content of the script.\n\n## GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n$`This text is sent to the final prompt.`\n\n-   'def' defines a variable that can be used in the template string literal.\n\ndef(\"FILE\", env.file)\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n\n"}]},"val":"DIFF ./gptools/firmware.gptool.js:\n```diff\n1   gptool({\n2       title: \"firmware\",\n3       categories: [\"devicescript\"],\n4       system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5       model: \"gpt-4-32k\",\n6       maxTokens: 16000,\n7   })\n8   \n9   def(\"SPEC\", env.file)\n10  def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11  def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12  def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13  \n14  $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15  Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16  \n17  $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18  \n19  $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20  and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21  \n22  $`Minimize changes to the existing CODE files.`\n23  \n24  $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25  \n26  $`\n27  TypeScript style guidance:\n28  -  Use export keyboard on classes.\n29  -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n30  -  always await async functions or functions that return a Promise.\n31  -  Use Buffer (like node.js) instead of Uint8Array\n32  `\n```\n\nDIFF ./gptools/firmware.gptool.js:\n```diff\n1   gptool({\n2       title: \"firmware\",\n3       categories: [\"devicescript\"],\n4       system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5       model: \"gpt-4-32k\",\n6       maxTokens: 16000,\n7   })\n8   \n9   def(\"SPEC\", env.file)\n10  def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11  def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12  def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13  \n14  $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15  Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16  \n17  $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18  \n19  $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20  and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21  \n22  $`Minimize changes to the existing CODE files.`\n23  \n24  $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25  \n26  $`\n27  TypeScript style guidance:\n28  -  Use export keyboard on classes.\n29  -  generate const"}
{"sha":"f811b67380ae846c1f6d1bfcd9069dd88292a265e797185aa707ebbbdce2d45a","key":{"model":"gpt-4","temperature":0.2,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n```diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDIFF ./file2.ts:\n```diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n\n\n"},{"role":"user","content":"SCRIPTS:\n``` file=gptools/firmware.gptool.js\ngptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n\nGenerate a DIFF of the SCRIPTS files with the updated 'title' and 'description' field in the 'gptool' function call \nthat represents the content of the script. \nDo NOT regenerate the entire file. \nOnly update the 'gptool' function call.\n\n## GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n```\n$`This text is sent to the final prompt.`\n```\n\n-   'def' defines a variable that can be used in the template string literal.\n\n```\ndef(\"FILE\", env.file)\n```\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n\n"}]},"val":"DIFF ./gptools/firmware.gptool.js:\n```diff\n1  gptool({\n2      title: \"firmware\",\n3      categories: [\"devicescript\"],\n4      system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5      model: \"gpt-4-32k\",\n6      maxTokens: 16000,\n7  })\n8  \n9  def(\"SPEC\", env.file)\n10 def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11 def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12 def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13 \n14 $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15 Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16 \n17 $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18 \n19 $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20 and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21 \n22 $`Minimize changes to the existing CODE files.`\n23 \n24 $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25 \n26 $`\n27 TypeScript style guidance:\n28 -  Use export keyboard on classes.\n29 -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n30 -  always await async functions or functions that return a Promise.\n31 -  Use Buffer (like node.js) instead of Uint8Array\n32 `\n33 \n34 You are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n35 \n36 Generate a DIFF of the SCRIPTS files with the updated 'title' and 'description' field in the 'gptool' function call \n37 that represents the content of the script. \n38 Do NOT regenerate the entire file. \n39 Only update the 'gptool' function call.\n40 \n41 ## GPTool syntax\n42 \n43 -    '$' is a template string literal that emits text to the final prompt.\n44 \n45 ```\n46 $`This text is sent to the final prompt.`\n47 ```\n48 \n49 -   'def' defines a variable that can be used in the template string literal.\n50 \n51 ```\n52 def(\"FILE\", env.file)\n53 ```\n54 \n55 -   'env' is an object that contains the following fields: file, links, templates, and snippets.\n```\n\nDIFF ./gptools/firmware.gptool.js:\n```diff\n1  gptool({\n- 2      title: \"firmware\",\n+ 2      title: \"<new title>\",\n3      categories: [\"devicescript\"],\n- 4      system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n+ 4      system: [\"<new system>\"],\n5      model: \"gpt-4-32k\",\n6      maxTokens: 16000,\n7  })\n```\n"}
{"sha":"5b0fc2ba47d85cb480fef774dc10d5bdd82832594a16ef94e3211c4454b0043a","key":{"model":"gpt-4","temperature":0.2,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n```\nWhat goes in\n/path_to_file/file2.md.\n```\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SCRIPTS:\n``` file=gptools/addboard.gptool.js\ngptool({\n    title: \"Add board\",\n    description: \"Updates a DeviceScript board.json generic file with information from the vendor website.\",\n    categories: [\"devicescript\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 20000,\n    temperature: 0\n})\n\nconst schema = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json`)\ndef(\"SCHEMA\", schema.file)\nconst guide = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/add-board.mdx`)\ndef(\"GUIDE\", guide.file)\ndef(\"FILE\", env.file)\n//def(\"BOARDJSON\", env.links.filter(f => f.filename.endsWith(\".board.json\")))\n\n$`You are an expert at configuration new boards for the DeviceScript system. \nYou follow the GUIDE for instructions.\n\nThe features of the board are listed in the Features section of FILE.\nThe pinout of the board is listed in the Pinout section of FILE. Ignore GND and 3V3 pins. If a pin is used in a service, do NOT list in the pins section.\nThe Jacdac services of the board are listed in the Services section of FILE.\n\nThe file name of BOARDJSON must end with \".board.json\".\n\nThe JSON schema of BOARDJSON is SCHEMA at https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json.\n\nGenerate BOARDJSON according to the instructions above using the JSON schema SCHEMA. Add the $schema attribute.\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript. SCRIPTS files is a list of gptool files.\n\nGenerate a 'title' and 'description' for each SCRIPTS files.\n\n### GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n```\n$`This text is sent to the final prompt.`\n```\n\n-   'def' defines a variable that can be used in the template string literal.\n\n```\ndef(\"FILE\", env.file)\n```\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n\n"}]},"val":"SUMMARY:\n```\nThe changes involve the creation of a GPTool script file named 'addboard.gptool.js'. This script is designed to update a DeviceScript board.json generic file with information from the vendor website. The script fetches the schema and guide from specified URLs, defines several variables, and generates a BOARDJSON file according to the instructions and JSON schema. The script also provides a brief explanation of GPTool syntax.\n```"}
{"sha":"a36183573a1219f3a08f0d19c96048c6e8c4992d9a6ee97c71274ac8a17e9005","key":{"model":"gpt-4","temperature":0.2,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n```\nWhat goes in\n/path_to_file/file2.md.\n```\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SCRIPTS:\n``` file=gptools/addboard.gptool.js\ngptool({\n    title: \"Add board\",\n    description: \"Updates a DeviceScript board.json generic file with information from the vendor website.\",\n    categories: [\"devicescript\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 20000,\n    temperature: 0\n})\n\nconst schema = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json`)\ndef(\"SCHEMA\", schema.file)\nconst guide = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/add-board.mdx`)\ndef(\"GUIDE\", guide.file)\ndef(\"FILE\", env.file)\n//def(\"BOARDJSON\", env.links.filter(f => f.filename.endsWith(\".board.json\")))\n\n$`You are an expert at configuration new boards for the DeviceScript system. \nYou follow the GUIDE for instructions.\n\nThe features of the board are listed in the Features section of FILE.\nThe pinout of the board is listed in the Pinout section of FILE. Ignore GND and 3V3 pins. If a pin is used in a service, do NOT list in the pins section.\nThe Jacdac services of the board are listed in the Services section of FILE.\n\nThe file name of BOARDJSON must end with \".board.json\".\n\nThe JSON schema of BOARDJSON is SCHEMA at https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json.\n\nGenerate BOARDJSON according to the instructions above using the JSON schema SCHEMA. Add the $schema attribute.\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript. SCRIPTS files is a list of gptool files.\n\nGenerate a 'title' and 'description' for each SCRIPTS files in yaml format.  \n\n"}]},"val":"File ./gptools/addboard.gptool.js:\n```javascript\ngptool({\n    title: \"Add board\",\n    description: \"Updates a DeviceScript board.json generic file with information from the vendor website.\",\n    categories: [\"devicescript\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 20000,\n    temperature: 0\n})\n\nconst schema = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json`)\ndef(\"SCHEMA\", schema.file)\nconst guide = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/add-board.mdx`)\ndef(\"GUIDE\", guide.file)\ndef(\"FILE\", env.file)\n\n$`You are an expert at configuration new boards for the DeviceScript system. \nYou follow the GUIDE for instructions.\n\nThe features of the board are listed in the Features section of FILE.\nThe pinout of the board is listed in the Pinout section of FILE. Ignore GND and 3V3 pins. If a pin is used in a service, do NOT list in the pins section.\nThe Jacdac services of the board are listed in the Services section of FILE.\n\nThe file name of BOARDJSON must end with \".board.json\".\n\nThe JSON schema of BOARDJSON is SCHEMA at https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json.\n\nGenerate BOARDJSON according to the instructions above using the JSON schema SCHEMA. Add the $schema attribute.\n`\n```\n\nSUMMARY:\n```\nThe gptools/addboard.gptool.js file has been updated with a script for configuring new boards for the DeviceScript system. The script fetches the schema and guide from the DeviceScript repository, defines the file to be updated, and provides instructions for updating the file. The script also sets the title, description, categories, model, maxTokens, and temperature for the gptool.\n```"}
{"sha":"7615d08aa8901b9a2a213510d91b2731dd6c33e9413ae850b439341bc3e7b4ae","key":{"model":"gpt-4","temperature":0.2,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n```\nWhat goes in\n/path_to_file/file2.md.\n```\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SCRIPTS:\n``` file=gptools/addboard.gptool.js\ngptool({\n    title: \"title\",\n    categories: [\"devicescript\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 20000,\n    temperature: 0\n})\n\nconst schema = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json`)\ndef(\"SCHEMA\", schema.file)\nconst guide = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/add-board.mdx`)\ndef(\"GUIDE\", guide.file)\ndef(\"FILE\", env.file)\n//def(\"BOARDJSON\", env.links.filter(f => f.filename.endsWith(\".board.json\")))\n\n$`You are an expert at configuration new boards for the DeviceScript system. \nYou follow the GUIDE for instructions.\n\nThe features of the board are listed in the Features section of FILE.\nThe pinout of the board is listed in the Pinout section of FILE. Ignore GND and 3V3 pins. If a pin is used in a service, do NOT list in the pins section.\nThe Jacdac services of the board are listed in the Services section of FILE.\n\nThe file name of BOARDJSON must end with \".board.json\".\n\nThe JSON schema of BOARDJSON is SCHEMA at https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json.\n\nGenerate BOARDJSON according to the instructions above using the JSON schema SCHEMA. Add the $schema attribute.\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript. SCRIPTS files is a list of gptool files.\n\nGenerate a 'title' and 'description' for each SCRIPTS files in yaml format. Update the 'title' and 'description' fields in the 'gptool' function call.\n\n"}]},"val":"File ./gptools/addboard.gptool.js:\n```javascript\ngptool({\n    title: \"Add Board Configuration\",\n    description: \"This script assists in configuring new boards for the DeviceScript system. It follows the provided guide for instructions, uses the features, pinout, and Jacdac services listed in the file, and generates a JSON file according to the JSON schema.\",\n    categories: [\"devicescript\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 20000,\n    temperature: 0\n})\n\nconst schema = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json`)\ndef(\"SCHEMA\", schema.file)\nconst guide = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/add-board.mdx`)\ndef(\"GUIDE\", guide.file)\ndef(\"FILE\", env.file)\n//def(\"BOARDJSON\", env.links.filter(f => f.filename.endsWith(\".board.json\")))\n\n$`You are an expert at configuration new boards for the DeviceScript system. \nYou follow the GUIDE for instructions.\n\nThe features of the board are listed in the Features section of FILE.\nThe pinout of the board is listed in the Pinout section of FILE. Ignore GND and 3V3 pins. If a pin is used in a service, do NOT list in the pins section.\nThe Jacdac services of the board are listed in the Services section of FILE.\n\nThe file name of BOARDJSON must end with \".board.json\".\n\nThe JSON schema of BOARDJSON is SCHEMA at https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json.\n\nGenerate BOARDJSON according to the instructions above using the JSON schema SCHEMA. Add the $schema attribute.\n`\n```\n\nSUMMARY:\n```\nThe 'addboard.gptool.js' file has been updated with a new title and description to better reflect its purpose and functionality.\n```"}
{"sha":"35995924f43511eb0d6a03be3e7b21ce059fc515c10e53f56189af27ae844354","key":{"model":"gpt-4","temperature":0.2,"max_tokens":800,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n```\nWhat goes in\n/path_to_file/file2.md.\n```\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"SCRIPTS:\n``` file=gptools/firmware.gptool.js\ngptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript. SCRIPTS files is a list of gptool files.\n\nGenerate a 'title' and 'description' for each SCRIPTS files in yaml format. Update the 'title' and 'description' fields in the 'gptool' function call.\n\n-   refer to scripts as gptool.\n-   be concise and descriptive.\n-   do not change the rest of the file.\n\n"}]},"val":"File ./gptools/firmware.gptool.js:\n```javascript\ngptool({\n    title: \"Firmware DeviceScript Driver Generator\",\n    description: \"This tool generates a DeviceScript driver for a peripheral device based on provided specifications. It also updates existing code, generates a README.md file, and minimizes changes to existing files.\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`\n```\n\nSUMMARY:\n```\nThe title and description of the gptool function call in the firmware.gptool.js file have been updated to provide a concise and descriptive overview of the tool's functionality.\n```"}
{"sha":"3c74ad3c3c6cd7c1f3b98eb35d385b04398a199fb1350abb126adf9d2ddfacfe","key":{"model":"gpt-4-32k","temperature":0.2,"max_tokens":16000,"messages":[{"role":"system","content":"You are concise. Answer in markdown.\n\n\nWhen explaining answers, take a deep breath.\n\n\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n\n\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n\n\n"},{"role":"user","content":"FILE:\n``` file=https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts\nimport { AsyncValue, isSimulator, millis, sleep } from \"@devicescript/core\"\nimport { i2c, I2C } from \"@devicescript/i2c\"\nimport { DriverError, throttle } from \"./core\"\n\nexport interface I2CDriverOptions {\n    /**\n     * I2c client, default is `i2c`\n     */\n    client?: I2C\n}\n\n/**\n * A helper class to implement I2C drivers\n */\nexport abstract class I2CDriver {\n    readonly devAddr: number\n    readonly client: I2C\n\n    /**\n     * Instantiate a driver\n     * @param devAddr a 7 bit i2c address\n     * @param options\n     */\n    constructor(devAddr: number, options?: I2CDriverOptions) {\n        const { client } = options || {}\n\n        this.devAddr = devAddr\n        this.client = client || i2c\n    }\n\n    /**\n     * Initializes the I2C device\n     * @throws DriverError\n     */\n    async init(): Promise<void> {\n        if (isSimulator()) return\n        try {\n            await this.initDriver()\n        } catch (e: any) {\n            if (e instanceof DriverError) throw e\n            throw new DriverError(\n                \"I2C device not found or malfunctioning: \" + e.message\n            )\n        }\n    }\n\n    /**\n     * Initializes the I2C device\n     * @throws I2CError\n     */\n    protected abstract initDriver(): Promise<void>\n\n    /**\n     * Execute I2C transaction\n     * @param devAddr a 7 bit i2c address\n     * @param writeBuf the value to write\n     * @param numRead number of bytes to read afterwards\n     * @returns a buffer `numRead` bytes long\n     */\n    async xfer(writeBuf: Buffer, numRead: number): Promise<Buffer> {\n        return await this.client.xfer(this.devAddr, writeBuf, numRead)\n    }\n\n    /**\n     * Write a byte to a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param byte the value to write\n     * @throws I2CError\n     */\n    async writeReg(regAddr: number, byte: number): Promise<void> {\n        return await this.client.writeReg(this.devAddr, regAddr, byte)\n    }\n    /**\n     * read a byte from a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @returns a byte\n     * @throws I2CError\n     */\n    async readReg(regAddr: number): Promise<number> {\n        return await this.client.readReg(this.devAddr, regAddr)\n    }\n    /**\n     * write a buffer to a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param b a byte buffer\n     * @throws I2CError\n     */\n    async writeRegBuf(regAddr: number, b: Buffer): Promise<void> {\n        return await this.client.writeRegBuf(this.devAddr, regAddr, b)\n    }\n    /**\n     * read a buffer from a register\n     * @param devAddr a 7 bit i2c address\n     * @param regAddr an 8 bit register address\n     * @param size the number of bytes to request\n     * @returns a byte buffer\n     * @throws I2CError\n     */\n    async readRegBuf(regAddr: number, size: number): Promise<Buffer> {\n        return await this.client.readRegBuf(this.devAddr, regAddr, size)\n    }\n    /**\n     * read a raw buffer\n     * @param devAddr a 7 bit i2c address\n     * @param size the number of bytes to request\n     * @returns a byte buffer\n     * @throws I2CError\n     */\n    async readBuf(size: number): Promise<Buffer> {\n        return await this.client.readBuf(this.devAddr, size)\n    }\n    /**\n     * write a raw buffer\n     * @param devAddr a 7 bit i2c address\n     * @param b a byte buffer\n     * @throws I2CError\n     */\n    async writeBuf(b: Buffer): Promise<void> {\n        return await this.client.writeBuf(this.devAddr, b)\n    }\n}\n\nexport interface I2CSensorDriverOptions extends I2CDriverOptions {\n    /**\n     * Data read throttle time in milliseconds\n     */\n    readCacheTime?: number\n}\n\n/**\n * A helper class to implement I2C sensor drivers\n */\nexport abstract class I2CSensorDriver<TData> extends I2CDriver {\n    _data: TData\n    _dataTime = 0\n    _dataCacheTime: number\n\n    /**\n     * Instantiate a driver\n     * @param devAddr a 7 bit i2c address\n     * @param options\n     */\n    constructor(devAddr: number, options?: I2CSensorDriverOptions) {\n        super(devAddr, options)\n        const { readCacheTime } = options || {}\n        this._dataCacheTime = readCacheTime || 50\n    }\n\n    /**\n     * Throttled read of the sensor data\n     * @returns\n     */\n    async read(): Promise<TData> {\n        if (isSimulator()) return {} as any\n\n        // lock on reading data\n        while (this._dataTime === -1) await sleep(5)\n\n        // cache hit\n        if (millis() - this._dataTime < this._dataCacheTime) return this._data\n\n        // query sensor again, read data is throttled\n        this._dataTime = -1\n        this._data = await this.readData()\n        this._dataTime = millis()\n        return this._data\n    }\n\n    /**\n     * Perform the I2C transaction to read the sensor data\n     */\n    protected abstract readData(): AsyncValue<TData>\n}\n```\n\nFILE:\n``` file=src/driver.p.ts\nexport interface I2CDriverOptions {}\n\nexport abstract class I2CDriver {\n  constructor(devAddr: number, options?: I2CDriverOptions)\n  async init(): Promise<void>\n  protected abstract initDriver(): Promise<void>\n  async xfer(writeBuf: Buffer, numRead: number): Promise<Buffer>\n  async writeReg(regAddr: number, byte: number): Promise<void>\n  async readReg(regAddr: number): Promise<number>\n  async writeRegBuf(regAddr: number, b: Buffer): Promise<void>\n  async readRegBuf(regAddr: number, size: number): Promise<Buffer>\n  async readBuf(size: number): Promise<Buffer>\n  async writeBuf(b: Buffer): Promise<void>\n}\n\nexport interface I2CSensorDriverOptions extends I2CDriverOptions {}\n\nexport abstract class I2CSensorDriver<TData> extends I2CDriver {\n  constructor(devAddr: number, options?: I2CSensorDriverOptions)\n  async read(): Promise<TData>\n  protected abstract readData(): AsyncValue<TData>\n}\n```\n\nSPEC:\n````` file=src/drivers.gpspec.md\n# DeviceScript Drivers\n\n-   [src/driver.ts](https://github.com/microsoft/devicescript/blob/main/packages/drivers/src/driver.ts)\n\nDeviceScript is a TypeScript like language to program micro-controllers.\nYou will need to implement drivers in TypeScript using the i2c base classes.\n\n-   [driver.p.ts](driver.p.ts)\n`````\n\nYou are an expert at programming in all known languages.\nFor each FILE 'filename.<EXT>', generate the code structure in FILE 'filename.<EXT>.xray' \nthat ignores the internal details of the implementation and extracts enough information for an LLM \nto use the code elements in the source file in the context of the SPEC task.\n- Do not generate a pseudo-file for SPEC.\n- Generate commments that describe the internal structure of the code if it is not obvious from the code signature.\n\n"}]},"val":"File ./driver.ts.xray:\n```typescript\n// Importing necessary modules and functions\nimport { AsyncValue, isSimulator, millis, sleep } from \"@devicescript/core\"\nimport { i2c, I2C } from \"@devicescript/i2c\"\nimport { DriverError, throttle } from \"./core\"\n\n// Interface for I2C Driver Options\nexport interface I2CDriverOptions {\n    client?: I2C\n}\n\n// Abstract class for I2C Driver\nexport abstract class I2CDriver {\n    readonly devAddr: number\n    readonly client: I2C\n\n    constructor(devAddr: number, options?: I2CDriverOptions)\n\n    async init(): Promise<void>\n\n    protected abstract initDriver(): Promise<void>\n\n    async xfer(writeBuf: Buffer, numRead: number): Promise<Buffer>\n\n    async writeReg(regAddr: number, byte: number): Promise<void>\n\n    async readReg(regAddr: number): Promise<number>\n\n    async writeRegBuf(regAddr: number, b: Buffer): Promise<void>\n\n    async readRegBuf(regAddr: number, size: number): Promise<Buffer>\n\n    async readBuf(size: number): Promise<Buffer>\n\n    async writeBuf(b: Buffer): Promise<void>\n}\n\n// Interface for I2C Sensor Driver Options\nexport interface I2CSensorDriverOptions extends I2CDriverOptions {\n    readCacheTime?: number\n}\n\n// Abstract class for I2C Sensor Driver\nexport abstract class I2CSensorDriver<TData> extends I2CDriver {\n    _data: TData\n    _dataTime = 0\n    _dataCacheTime: number\n\n    constructor(devAddr: number, options?: I2CSensorDriverOptions)\n\n    async read(): Promise<TData>\n\n    protected abstract readData(): AsyncValue<TData>\n}\n```\n\nFile ./driver.p.ts.xray:\n```typescript\n// Interface for I2C Driver Options\nexport interface I2CDriverOptions {}\n\n// Abstract class for I2C Driver\nexport abstract class I2CDriver {\n  constructor(devAddr: number, options?: I2CDriverOptions)\n\n  async init(): Promise<void>\n\n  protected abstract initDriver(): Promise<void>\n\n  async xfer(writeBuf: Buffer, numRead: number): Promise<Buffer>\n\n  async writeReg(regAddr: number, byte: number): Promise<void>\n\n  async readReg(regAddr: number): Promise<number>\n\n  async writeRegBuf(regAddr: number, b: Buffer): Promise<void>\n\n  async readRegBuf(regAddr: number, size: number): Promise<Buffer>\n\n  async readBuf(size: number): Promise<Buffer>\n\n  async writeBuf(b: Buffer): Promise<void>\n}\n\n// Interface for I2C Sensor Driver Options\nexport interface I2CSensorDriverOptions extends I2CDriverOptions {}\n\n// Abstract class for I2C Sensor Driver\nexport abstract class I2CSensorDriver<TData> extends I2CDriver {\n  constructor(devAddr: number, options?: I2CSensorDriverOptions)\n\n  async read(): Promise<TData>\n\n  protected abstract readData(): AsyncValue<TData>\n}\n```\n\nSUMMARY:\n```markdown\nThe `driver.ts.xray` and `driver.p.ts.xray` files were generated. They provide a high-level overview of the structure of the I2C Driver and I2C Sensor Driver classes, including their methods and properties. This will help in understanding the code structure without going into the implementation details.\n```"}
