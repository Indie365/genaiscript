{"sha":"0a0639d63455ce09c83ca0b85538b11b0fd3da3923ca3f34ea1fd04aafb07e93","key":{"template":{"id":"front-matter","title":"SEO front matter"},"fragment":{"fullId":"src/README.md.gpspec.md:0:0","hash":"2a37d8ccac6b48d9"}},"val":{"response":{"edits":[],"fileEdits":{},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"SEO front matter\" (`front-matter`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"SEO front matter\",\n  3:     description: \"Update or generate SEO-optimized front matter for a markdown file.\",\n  4:     categories: [\"markdown\"],\n  5:     system: [\"system\", \"system.files\"],\n  6:     maxTokens: 2000,\n  7:     temperature: 0,\n  8: })\n  9: \n 10: def(\"SOURCE\", env.links.filter(f => f.filename.endsWith(\".md\")))\n 11: \n 12: $`\n 13: You are a search engine optimization expert at creating front matter for markdown document.\n 14: \n 15: Update or generate front matter of SOURCE files:\n 16: - Update fields title, description and keywords as needed\n 17: - use yaml format, do not use quotes\n 18: - only 5 keywords or less\n 19: - optimize for search engine optimization.\n 20: - Do not modify the markdown content after the front matter\n 21: \n 22: If no front matter is present, generate it.\n 23: `\n 24: \n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.markdown** missing\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nSOURCE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter of SOURCE files:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-QTFPOY`\n\n-   env.**file**\n```````````````js\n{ filename: \"src/README.md.gpspec.md\",\nlabel: \"current\",\ncontent: \"# README.md\\n\\n-   [README.md](./README.md)\\n\" }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"README.md\",\n  filename: \"src/README.md\",\n  content: \"# PCF8563 Real-Time Clock Driver\\n\\nThis is a DeviceScript dri\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"addboard\",\n  title: \"Add board\",\n  description: \"Updates a DeviceScript board.json generic file with informat\"... },\n{ id: \"summarizecode\",\n  title: \"Code Summarizer\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"firmware\",\n  title: \"firmware\",\n  description: \"Compile information about various sources to generate Device\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... },\n{ id: \"front-matter\",\n  title: \"SEO front matter\",\n  description: \"Update or generate SEO-optimized front matter for a markdown\"... } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"front-matter\",\ntitle: \"SEO front matter\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"SEO front matter\\\",\\n    description: \\\"Up\"...,\ndescription: \"Update or generate SEO-optimized front matter for a markdown\"...,\ncategories: [ \"markdown\" ],\nsystem: [ \"system\",\n  \"system.files\" ],\nmaxTokens: 2000,\ntemperature: 0,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 2000\n\n```````````````markdown\nSOURCE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter of SOURCE files:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\n````` file=src/README.md\n---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript driver, peripheral\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `*`\n`````\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\n\n`````\n\n","text":"````` file=src/README.md\n---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript driver, peripheral\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n"}}}
{"sha":"0a0639d63455ce09c83ca0b85538b11b0fd3da3923ca3f34ea1fd04aafb07e93","key":{"template":{"id":"front-matter","title":"SEO front matter"},"fragment":{"fullId":"src/README.md.gpspec.md:0:0","hash":"2a37d8ccac6b48d9"}},"val":{"response":{"edits":[{"label":"Update /workspaces/coarch/packages/devicescript/src/README.md","filename":"/workspaces/coarch/packages/devicescript/src/README.md","type":"replace","range":[[0,0],[31,0]],"text":"---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n"}],"fileEdits":{"/workspaces/coarch/packages/devicescript/src/README.md":{"before":"# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n","after":"---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n"}},"trace":"\n# Prompt trace\n\n\n\n## Prompt template \"SEO front matter\" (`front-matter`)\n\n```````````````js\n  1: gptool({\n  2:     title: \"SEO front matter\",\n  3:     description: \"Update or generate SEO-optimized front matter for a markdown file.\",\n  4:     categories: [\"markdown\"],\n  5:     system: [\"system\", \"system.files\"],\n  6:     maxTokens: 2000,\n  7:     temperature: 0,\n  8: })\n  9: \n 10: def(\"FILE\", env.links.filter(f => f.filename.endsWith(\".md\")))\n 11: \n 12: $`\n 13: You are a search engine optimization expert at creating front matter for markdown document.\n 14: \n 15: Update or generate front matter in FILE:\n 16: - Update fields title, description and keywords as needed\n 17: - use yaml format, do not use quotes\n 18: - only 5 keywords or less\n 19: - optimize for search engine optimization.\n 20: - Do not modify the markdown content after the front matter\n 21: \n 22: If no front matter is present, generate it.\n 23: `\n 24: \n```````````````\n\n\n\n## Inline prompts\n\nAdded as comment at the end of a fragment: \n\n```markdown\nLorem ipsum...\n\n<!-- @prompt.NAME \nYou are concise.\n!-->\n```\n        \n\n-   **@prompt** missing\n-   **@prompt.markdown** missing\n\n\n## console output\n> tip: use `console.log()` from gptool.js files\n## Expanded prompt\n\n```````````````markdown\nFILE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter in FILE:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n```````````````\n\n\n## Variables\nVariables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-ZUYVEQ`\n\n-   env.**file**\n```````````````js\n{ filename: \"src/README.md.gpspec.md\",\nlabel: \"current\",\ncontent: \"# README.md\\n\\n-   [README.md](./README.md)\\n\" }\n```````````````\n\n-   env.**links**\n```````````````js\n[ { label: \"README.md\",\n  filename: \"src/README.md\",\n  content: \"# PCF8563 Real-Time Clock Driver\\n\\nThis is a DeviceScript dri\"... } ]\n```````````````\n\n-   env.**parents**\n```````````````js\n[  ]\n```````````````\n\n-   env.**fence**\n```````````````\n`````\n```````````````\n\n-   env.**promptOptions**\n```````````````js\n{  }\n```````````````\n\n-   env.**vars**\n```````````````js\n{  }\n```````````````\n\n-   env.**templates**\n```````````````js\n[ { id: \"addboard\",\n  title: \"Add board\",\n  description: \"Updates a DeviceScript board.json generic file with informat\"... },\n{ id: \"summarizecode\",\n  title: \"Code Summarizer\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"firmware\",\n  title: \"firmware\",\n  description: \"Compile information about various sources to generate Device\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... },\n{ id: \"front-matter\",\n  title: \"SEO front matter\",\n  description: \"Update or generate SEO-optimized front matter for a markdown\"... } ]\n```````````````\n\n-   env.**template**\n```````````````js\n{ id: \"front-matter\",\ntitle: \"SEO front matter\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: \\\"SEO front matter\\\",\\n    description: \\\"Up\"...,\ndescription: \"Update or generate SEO-optimized front matter for a markdown\"...,\ncategories: [ \"markdown\" ],\nsystem: [ \"system\",\n  \"system.files\" ],\nmaxTokens: 2000,\ntemperature: 0,\ninput: \".md\" }\n```````````````\n\n## System prompt\n###  template: `system`\n\n```````````````js\n  1: system({ title: \"System prompt\" })\n  2: $`You are concise. Answer in markdown.`\n```````````````\n#### Expanded system prompt\n```````````````markdown\nYou are concise. Answer in markdown.\n```````````````\n###  template: `system.files`\n\n```````````````js\n  1: system({ title: \"File generation\", description: \"Teaches the file format supported by CoArch\" })\n  2: \n  3: const folder =\n  4:     env.vars[\"system.multifile.outputFolder\"] ||\n  5:     env.template.outputFolder\n  6: $`When generating or updating files you will use the following syntax:`\n  7: \n  8: def(`File ${folder || \".\"}/file1.ts`, `What goes in\\n${folder || \".\"}/file1.ts.`)\n  9: def(`File /path_to_file/file2.md`, `What goes in\\n/path_to_file/file2.md.`)\n 10: \n 11: $`Make sure to use precisely ${env.fence} to guard file code sections.`\n 12: $`Use full path of filename in code section header.`\n 13: if (folder)\n 14:     $`When generating new files, place files in folder \"${folder}\".`\n 15: $`If a file does not have changes, do not regenerate.`\n 16: \n```````````````\n#### Expanded system prompt\n```````````````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n`````\nWhat goes in\n./file1.ts.\n`````\n\nFile /path_to_file/file2.md:\n`````\nWhat goes in\n/path_to_file/file2.md.\n`````\n\nMake sure to use precisely ````` to guard file code sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n```````````````\n\n\n## Final prompt\n\n-  model: `gpt-4`\n-  temperature: \n-  max tokens: 2000\n\n```````````````markdown\nFILE:\n````` file=src/README.md\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n\nYou are a search engine optimization expert at creating front matter for markdown document.\n\nUpdate or generate front matter in FILE:\n- Update fields title, description and keywords as needed\n- use yaml format, do not use quotes\n- only 5 keywords or less\n- optimize for search engine optimization.\n- Do not modify the markdown content after the front matter\n\nIf no front matter is present, generate it.\n```````````````\n\n\n## AI Output\n\n\n```````````````markdown\nFILE:\n````` file=src/README.md\n---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n```````````````\n\n\n### Extracted Variables\n\n-   `FILE src/README.md`\n`````\n---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n\n`````\n\n","text":"FILE:\n````` file=src/README.md\n---\ntitle: PCF8563 Real-Time Clock Driver\ndescription: DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\nkeywords: PCF8563, Real-Time Clock, RTC, DeviceScript, Driver\n---\n\n# PCF8563 Real-Time Clock Driver\n\nThis is a DeviceScript driver for the PCF8563 real-time clock (RTC) peripheral.\n\n## Usage\n\n```typescript\nimport { PCF8563 } from \"./pcf8563\";\n\nconst rtc = new PCF8563(0x51);\nawait rtc.init();\n\nconst currentTime = await rtc.readTime();\nconsole.log(\"Current time:\", currentTime);\n\nconst newTime = new Date();\nawait rtc.writeTime(newTime);\nconsole.log(\"Time updated to:\", newTime);\n```\n\n## Sources\n\n- [PCF8563 Datasheet](https://files.seeedstudio.com/wiki/round_display_for_xiao/RTC-PCF8563-datasheet.pdf)\n- [Adafruit CircuitPython PCF8563](https://github.com/adafruit/Adafruit_CircuitPython_PCF8563)\n- [tuupola/pcf8563](https://github.com/tuupola/pcf8563)\n`````\n"}}}
{"sha":"786684d2f97cf3a95debcc29e89a0f82179e6dd171820a6e2e146ada679cc3dd","key":{"template":{"id":"gptool-meta","title":"GPTool metadata generator"},"fragment":{"fullId":"gptools/firmware.gptool.js.gpspec.md:0:0","hash":"7461780d8563d476"}},"val":{"response":{"edits":[],"fileEdits":{"/workspaces/coarch/packages/devicescript/gptools/firmware.gptool.js":{"before":"gptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`","after":"gptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`"}},"trace":"\n# `gptool-meta` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-CTKQGE`\n\n-   env.**file**\n```js\n{ filename: \"gptools/firmware.gptool.js.gpspec.md\",\nlabel: \"current\",\ncontent: \"# firmware.gptool.js\\n\\n-   [firmware.gptool.js](./firmware.gp\"... }\n```\n\n-   env.**links**\n```js\n[ { label: \"firmware.gptool.js\",\n  filename: \"gptools/firmware.gptool.js\",\n  content: \"gptool({\\n    title: \\\"firmware\\\",\\n    categories: [\\\"devicescri\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[ { id: \"addboard\",\n  title: \"Add board\",\n  description: \"Updates a DeviceScript board.json generic file with informat\"... },\n{ id: \"gptool-meta\",\n  title: \"GPTool metadata generator\",\n  description: \"Generates metadata for GPTools\" },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"firmware\",\n  title: \"firmware\",\n  description: undefined },\n{ id: \"code-optimizer\",\n  title: \"Code Optimizer\",\n  description: \"Optimize code to run faster, modified from https://twitter.c\"... },\n{ id: \"code-xray\",\n  title: \"Code XRay\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"slides\",\n  title: \"Generate Slides\",\n  description: \"Generate a slidedeck in markdown. Install extension 'vscode-\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... },\n{ id: \"front-matter\",\n  title: \"SEO front matter\",\n  description: \"Update or generate SEO-optimized front matter for a markdown\"... },\n{ id: \"peer-review\",\n  title: \"peer review\",\n  description: \"An expert academic is reviewing your submission.\" } ]\n```\n\n-   env.**template**\n```js\n{ id: \"gptool-meta\",\ntitle: \"GPTool metadata generator\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: 'GPTool metadata generator',\\n    descrip\"...,\nfilename: \"/workspaces/coarch/packages/devicescript/gptools/gptool-meta\"...,\ndescription: \"Generates metadata for GPTools\",\nsystem: [ \"system.diff\" ],\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.diff` source\n\n```js\nsystem({ title: \"Diff generation\", description: \"Teaches the diff file format supported by GPTools\" })\n\n$`The DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n${env.fence}diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n${env.fence}\n\nDIFF ./file2.ts:\n${env.fence}diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n${env.fence}\n`\n\n$`Do not generate anything else than DIFF sections. Use one DIFF section per change.`\n```\n#### expanded\n``````markdown\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n```diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDIFF ./file2.ts:\n```diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: 'GPTool metadata generator',\n    description: 'Generates metadata for GPTools',\n    system: [\"system.diff\"]\n})\n\ndef(\"SCRIPTS\", env.links)\n\n$`You are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n\nAnalyze the content of SCRIPTS files and generate a DIFF with the updated 'title' and 'description' field in the 'gptool' function call that represents the content of the script.\n\n## GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n$\\`This text is sent to the final prompt.\\`\n\n-   'def' defines a variable that can be used in the template string literal.\n\ndef(\"FILE\", env.file)\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n\n`\n```\n\n\n</details>\n\n\n<details id=\"expanded-prompt\"><summary>expanded prompt</summary>\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n``````markdown\nSCRIPTS:\n``` file=gptools/firmware.gptool.js\ngptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n\nAnalyze the content of SCRIPTS files and generate a DIFF with the updated 'title' and 'description' field in the 'gptool' function call that represents the content of the script.\n\n## GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n$`This text is sent to the final prompt.`\n\n-   'def' defines a variable that can be used in the template string literal.\n\ndef(\"FILE\", env.file)\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nDIFF ./gptools/firmware.gptool.js:\n```diff\n1   gptool({\n2       title: \"firmware\",\n3       categories: [\"devicescript\"],\n4       system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5       model: \"gpt-4-32k\",\n6       maxTokens: 16000,\n7   })\n8   \n9   def(\"SPEC\", env.file)\n10  def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11  def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12  def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13  \n14  $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15  Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16  \n17  $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18  \n19  $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20  and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21  \n22  $`Minimize changes to the existing CODE files.`\n23  \n24  $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25  \n26  $`\n27  TypeScript style guidance:\n28  -  Use export keyboard on classes.\n29  -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n30  -  always await async functions or functions that return a Promise.\n31  -  Use Buffer (like node.js) instead of Uint8Array\n32  `\n```\n\nDIFF ./gptools/firmware.gptool.js:\n```diff\n1   gptool({\n2       title: \"firmware\",\n3       categories: [\"devicescript\"],\n4       system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5       model: \"gpt-4-32k\",\n6       maxTokens: 16000,\n7   })\n8   \n9   def(\"SPEC\", env.file)\n10  def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11  def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12  def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13  \n14  $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15  Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16  \n17  $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18  \n19  $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20  and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21  \n22  $`Minimize changes to the existing CODE files.`\n23  \n24  $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25  \n26  $`\n27  TypeScript style guidance:\n28  -  Use export keyboard on classes.\n29  -  generate const\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `DIFF ./gptools/firmware.gptool.js`\n`````\n1   gptool({\n2       title: \"firmware\",\n3       categories: [\"devicescript\"],\n4       system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5       model: \"gpt-4-32k\",\n6       maxTokens: 16000,\n7   })\n8   \n9   def(\"SPEC\", env.file)\n10  def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11  def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12  def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13  \n14  $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15  Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16  \n17  $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18  \n19  $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20  and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21  \n22  $`Minimize changes to the existing CODE files.`\n23  \n24  $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25  \n26  $`\n27  TypeScript style guidance:\n28  -  Use export keyboard on classes.\n29  -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n30  -  always await async functions or functions that return a Promise.\n31  -  Use Buffer (like node.js) instead of Uint8Array\n32  `\n\n`````\n\n-   `DIFF ./gptools/firmware.gptool.js`\n`````\n1   gptool({\n2       title: \"firmware\",\n3       categories: [\"devicescript\"],\n4       system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5       model: \"gpt-4-32k\",\n6       maxTokens: 16000,\n7   })\n8   \n9   def(\"SPEC\", env.file)\n10  def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11  def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12  def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13  \n14  $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15  Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16  \n17  $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18  \n19  $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20  and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21  \n22  $`Minimize changes to the existing CODE files.`\n23  \n24  $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25  \n26  $`\n27  TypeScript style guidance:\n28  -  Use export keyboard on classes.\n29  -  generate const\n\n`````\n\n\n</details>\n\n\n### Error applying patch\n\n\n``````markdown\nmissing line number\n``````\n\n\n### Error applying patch\n\n\n``````markdown\nmissing line number\n``````\n","text":"DIFF ./gptools/firmware.gptool.js:\n```diff\n1   gptool({\n2       title: \"firmware\",\n3       categories: [\"devicescript\"],\n4       system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5       model: \"gpt-4-32k\",\n6       maxTokens: 16000,\n7   })\n8   \n9   def(\"SPEC\", env.file)\n10  def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11  def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12  def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13  \n14  $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15  Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16  \n17  $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18  \n19  $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20  and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21  \n22  $`Minimize changes to the existing CODE files.`\n23  \n24  $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25  \n26  $`\n27  TypeScript style guidance:\n28  -  Use export keyboard on classes.\n29  -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n30  -  always await async functions or functions that return a Promise.\n31  -  Use Buffer (like node.js) instead of Uint8Array\n32  `\n```\n\nDIFF ./gptools/firmware.gptool.js:\n```diff\n1   gptool({\n2       title: \"firmware\",\n3       categories: [\"devicescript\"],\n4       system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5       model: \"gpt-4-32k\",\n6       maxTokens: 16000,\n7   })\n8   \n9   def(\"SPEC\", env.file)\n10  def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11  def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12  def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13  \n14  $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15  Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16  \n17  $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18  \n19  $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20  and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21  \n22  $`Minimize changes to the existing CODE files.`\n23  \n24  $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25  \n26  $`\n27  TypeScript style guidance:\n28  -  Use export keyboard on classes.\n29  -  generate const"}}}
{"sha":"786684d2f97cf3a95debcc29e89a0f82179e6dd171820a6e2e146ada679cc3dd","key":{"template":{"id":"gptool-meta","title":"GPTool metadata generator"},"fragment":{"fullId":"gptools/firmware.gptool.js.gpspec.md:0:0","hash":"7461780d8563d476"}},"val":{"response":{"edits":[],"fileEdits":{"/workspaces/coarch/packages/devicescript/gptools/firmware.gptool.js":{"before":"gptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`","after":"gptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`"}},"trace":"\n# `gptool-meta` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-CIJDTG`\n\n-   env.**file**\n```js\n{ filename: \"gptools/firmware.gptool.js.gpspec.md\",\nlabel: \"current\",\ncontent: \"# firmware.gptool.js\\n\\n-   [firmware.gptool.js](./firmware.gp\"... }\n```\n\n-   env.**links**\n```js\n[ { label: \"firmware.gptool.js\",\n  filename: \"gptools/firmware.gptool.js\",\n  content: \"gptool({\\n    title: \\\"firmware\\\",\\n    categories: [\\\"devicescri\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[ { id: \"addboard\",\n  title: \"Add board\",\n  description: \"Updates a DeviceScript board.json generic file with informat\"... },\n{ id: \"gptool-meta\",\n  title: \"GPTool metadata generator\",\n  description: \"Generates metadata for GPTools\" },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"firmware\",\n  title: \"firmware\",\n  description: undefined },\n{ id: \"code-optimizer\",\n  title: \"Code Optimizer\",\n  description: \"Optimize code to run faster, modified from https://twitter.c\"... },\n{ id: \"code-xray\",\n  title: \"Code XRay\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"slides\",\n  title: \"Generate Slides\",\n  description: \"Generate a slidedeck in markdown. Install extension 'vscode-\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... },\n{ id: \"front-matter\",\n  title: \"SEO front matter\",\n  description: \"Update or generate SEO-optimized front matter for a markdown\"... },\n{ id: \"peer-review\",\n  title: \"peer review\",\n  description: \"An expert academic is reviewing your submission.\" } ]\n```\n\n-   env.**template**\n```js\n{ id: \"gptool-meta\",\ntitle: \"GPTool metadata generator\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: 'GPTool metadata generator',\\n    descrip\"...,\nfilename: \"/workspaces/coarch/packages/devicescript/gptools/gptool-meta\"...,\ndescription: \"Generates metadata for GPTools\",\nsystem: [ \"system.diff\" ],\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.diff` source\n\n```js\nsystem({ title: \"Diff generation\", description: \"Teaches the diff file format supported by GPTools\" })\n\n$`The DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n${env.fence}diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n${env.fence}\n\nDIFF ./file2.ts:\n${env.fence}diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n${env.fence}\n`\n\n$`Do not generate anything else than DIFF sections. Use one DIFF section per change.`\n```\n#### expanded\n``````markdown\nThe DIFF format should be used to generate diff changes on files: added lines start with +\n, deleted lines start with -\n, preserve indentation\n, use relative file path name\n, only generate diff for files that have changes\n, do NOT generate diff for files that have no changes\n, only emit a couple unmodified lines before and after the changes\n, do NOT emit the whole file content\n, deleted lines MUST exist in the original file (do not invent deleted lines)\n, added lines MUST not exist in the original file\n, emit original line numbers from existing lines and deleted lines\n, do NOT emit line numbers for added lines\n, keep the diffs AS SMALL AS POSSIBLE:\n\nDIFF ./file.ts:\n```diff\n[original line number]  <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDIFF ./file2.ts:\n```diff\n[original line number]   <2 lines before changes (not the whole file)>\n- [original line number] <deleted line>\n- [original line number] <delete line 2>\n+ <added line>\n+ <added line 2>\n[original line number]   <2 lines after changes (not the whole file)>\n```\n\nDo not generate anything else than DIFF sections. Use one DIFF section per change.\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: 'GPTool metadata generator',\n    description: 'Generates metadata for GPTools',\n    system: [\"system.diff\"]\n})\n\ndef(\"SCRIPTS\", env.links)\n\n$`You are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n\nGenerate a DIFF of the SCRIPTS files with the updated 'title' and 'description' field in the 'gptool' function call \nthat represents the content of the script. \nDo NOT regenerate the entire file. \nOnly update the 'gptool' function call.`\n\n$`## GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n\\`\\`\\`\n$\\`This text is sent to the final prompt.\\`\n\\`\\`\\`\n\n-   'def' defines a variable that can be used in the template string literal.\n\n\\`\\`\\`\ndef(\"FILE\", env.file)\n\\`\\`\\`\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n\n`\n```\n\n\n</details>\n\n\n<details id=\"expanded-prompt\"><summary>expanded prompt</summary>\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n``````markdown\nSCRIPTS:\n``` file=gptools/firmware.gptool.js\ngptool({\n    title: \"firmware\",\n    categories: [\"devicescript\"],\n    system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 16000,\n})\n\ndef(\"SPEC\", env.file)\ndef(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\ndef(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\ndef(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n\n$`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\nUsing the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n\n$`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n\n$`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \nand displays meaningful information to the console. Generate the list of sources used to generate the code.`\n\n$`Minimize changes to the existing CODE files.`\n\n$`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n\n$`\nTypeScript style guidance:\n-  Use export keyboard on classes.\n-  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n-  always await async functions or functions that return a Promise.\n-  Use Buffer (like node.js) instead of Uint8Array\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n\nGenerate a DIFF of the SCRIPTS files with the updated 'title' and 'description' field in the 'gptool' function call \nthat represents the content of the script. \nDo NOT regenerate the entire file. \nOnly update the 'gptool' function call.\n\n## GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n```\n$`This text is sent to the final prompt.`\n```\n\n-   'def' defines a variable that can be used in the template string literal.\n\n```\ndef(\"FILE\", env.file)\n```\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nDIFF ./gptools/firmware.gptool.js:\n```diff\n1  gptool({\n2      title: \"firmware\",\n3      categories: [\"devicescript\"],\n4      system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5      model: \"gpt-4-32k\",\n6      maxTokens: 16000,\n7  })\n8  \n9  def(\"SPEC\", env.file)\n10 def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11 def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12 def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13 \n14 $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15 Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16 \n17 $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18 \n19 $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20 and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21 \n22 $`Minimize changes to the existing CODE files.`\n23 \n24 $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25 \n26 $`\n27 TypeScript style guidance:\n28 -  Use export keyboard on classes.\n29 -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n30 -  always await async functions or functions that return a Promise.\n31 -  Use Buffer (like node.js) instead of Uint8Array\n32 `\n33 \n34 You are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n35 \n36 Generate a DIFF of the SCRIPTS files with the updated 'title' and 'description' field in the 'gptool' function call \n37 that represents the content of the script. \n38 Do NOT regenerate the entire file. \n39 Only update the 'gptool' function call.\n40 \n41 ## GPTool syntax\n42 \n43 -    '$' is a template string literal that emits text to the final prompt.\n44 \n45 ```\n46 $`This text is sent to the final prompt.`\n47 ```\n48 \n49 -   'def' defines a variable that can be used in the template string literal.\n50 \n51 ```\n52 def(\"FILE\", env.file)\n53 ```\n54 \n55 -   'env' is an object that contains the following fields: file, links, templates, and snippets.\n```\n\nDIFF ./gptools/firmware.gptool.js:\n```diff\n1  gptool({\n- 2      title: \"firmware\",\n+ 2      title: \"<new title>\",\n3      categories: [\"devicescript\"],\n- 4      system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n+ 4      system: [\"<new system>\"],\n5      model: \"gpt-4-32k\",\n6      maxTokens: 16000,\n7  })\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `DIFF ./gptools/firmware.gptool.js`\n`````\n1  gptool({\n2      title: \"firmware\",\n3      categories: [\"devicescript\"],\n4      system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5      model: \"gpt-4-32k\",\n6      maxTokens: 16000,\n7  })\n8  \n9  def(\"SPEC\", env.file)\n10 def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11 def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12 def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13 \n14 $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15 Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16 \n17 $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18 \n19 $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20 and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21 \n22 $`Minimize changes to the existing CODE files.`\n23 \n24 $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25 \n26 $`\n27 TypeScript style guidance:\n28 -  Use export keyboard on classes.\n29 -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n30 -  always await async functions or functions that return a Promise.\n31 -  Use Buffer (like node.js) instead of Uint8Array\n32 `\n33 \n34 You are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n35 \n36 Generate a DIFF of the SCRIPTS files with the updated 'title' and 'description' field in the 'gptool' function call \n37 that represents the content of the script. \n38 Do NOT regenerate the entire file. \n39 Only update the 'gptool' function call.\n40 \n41 ## GPTool syntax\n42 \n43 -    '$' is a template string literal that emits text to the final prompt.\n44 \n45 ```\n46 $`This text is sent to the final prompt.`\n47 ```\n48 \n49 -   'def' defines a variable that can be used in the template string literal.\n50 \n51 ```\n52 def(\"FILE\", env.file)\n53 ```\n54 \n55 -   'env' is an object that contains the following fields: file, links, templates, and snippets.\n\n`````\n\n-   `DIFF ./gptools/firmware.gptool.js`\n`````\n1  gptool({\n- 2      title: \"firmware\",\n+ 2      title: \"<new title>\",\n3      categories: [\"devicescript\"],\n- 4      system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n+ 4      system: [\"<new system>\"],\n5      model: \"gpt-4-32k\",\n6      maxTokens: 16000,\n7  })\n\n`````\n\n\n</details>\n\n\n### Error applying patch\n\n\n``````markdown\nmissing line number\n``````\n\n\n### Error applying patch\n\n\n``````markdown\nmissing line number\n``````\n","text":"DIFF ./gptools/firmware.gptool.js:\n```diff\n1  gptool({\n2      title: \"firmware\",\n3      categories: [\"devicescript\"],\n4      system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n5      model: \"gpt-4-32k\",\n6      maxTokens: 16000,\n7  })\n8  \n9  def(\"SPEC\", env.file)\n10 def(\"CODE\", env.links.filter(f => f.filename.endsWith(\".ts\")))\n11 def(\"README\", env.links.filter(f => f.filename.endsWith(\"README.md\")))\n12 def(\"PSEUDO\", env.links.filter(f => f.filename.endsWith(\".p.ts\")))\n13 \n14 $`You are an expert at DeviceScript (https://microsoft.github.io/devicescript), a TypeScript compiler and runtime for embedded devices.\n15 Using the information provided in SPEC, generate a DeviceScript driver for the peripherical.`\n16 \n17 $`The PSEUDO file contain information about existing code in the library. Use this in CODE.`\n18 \n19 $`Generate a README.md file (with filename starting with 'main${env.file.filename.replace(`.gpspec.md`, '')}') that uses the driver \n20 and displays meaningful information to the console. Generate the list of sources used to generate the code.`\n21 \n22 $`Minimize changes to the existing CODE files.`\n23 \n24 $`In CODE, when you encounter a comment starting by \"// TODO: \", replace comment with generated code for the TODO comment.`\n25 \n26 $`\n27 TypeScript style guidance:\n28 -  Use export keyboard on classes.\n29 -  generate const declarations for constants found in datasheets; specify where the constant value was found. Avoid magic numbers in generated code.\n30 -  always await async functions or functions that return a Promise.\n31 -  Use Buffer (like node.js) instead of Uint8Array\n32 `\n33 \n34 You are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript.\n35 \n36 Generate a DIFF of the SCRIPTS files with the updated 'title' and 'description' field in the 'gptool' function call \n37 that represents the content of the script. \n38 Do NOT regenerate the entire file. \n39 Only update the 'gptool' function call.\n40 \n41 ## GPTool syntax\n42 \n43 -    '$' is a template string literal that emits text to the final prompt.\n44 \n45 ```\n46 $`This text is sent to the final prompt.`\n47 ```\n48 \n49 -   'def' defines a variable that can be used in the template string literal.\n50 \n51 ```\n52 def(\"FILE\", env.file)\n53 ```\n54 \n55 -   'env' is an object that contains the following fields: file, links, templates, and snippets.\n```\n\nDIFF ./gptools/firmware.gptool.js:\n```diff\n1  gptool({\n- 2      title: \"firmware\",\n+ 2      title: \"<new title>\",\n3      categories: [\"devicescript\"],\n- 4      system: [\"system\", \"system.summary\", \"system.explanations\", \"system.files\", \"system.typescript\", \"system.summary\"],\n+ 4      system: [\"<new system>\"],\n5      model: \"gpt-4-32k\",\n6      maxTokens: 16000,\n7  })\n```\n"}}}
{"sha":"a55a1a27c5259079517932619461e21012e251731d430d473ff42160341700e9","key":{"template":{"id":"gptool-meta","title":"GPTool metadata generator"},"fragment":{"fullId":"gptools/addboard.gptool.js.gpspec.md:0:0","hash":"dd29a84093d7fb49"}},"val":{"response":{"edits":[],"fileEdits":{},"trace":"\n# `gptool-meta` trace\n\n\n\n\n\n<details id=\"console-output\"><summary>console output</summary>\n\n> tip: use `console.log()` from gptool.js files\n\n</details>\n\n\n<details id=\"variables\"><summary>variables</summary>\n\n> Variables are referenced through `env.NAME` in prompts.\n\n-   env.**error**: `ERROR-OWWQTZ`\n\n-   env.**file**\n```js\n{ filename: \"gptools/addboard.gptool.js.gpspec.md\",\nlabel: \"current\",\ncontent: \"# addboard.gptool.js\\n\\n-   [addboard.gptool.js](./addboard.gp\"... }\n```\n\n-   env.**links**\n```js\n[ { label: \"addboard.gptool.js\",\n  filename: \"gptools/addboard.gptool.js\",\n  content: \"gptool({\\n    title: \\\"Add board\\\",\\n    description: \\\"Updates a\"... } ]\n```\n\n-   env.**parents**\n```js\n[  ]\n```\n\n-   env.**fence**\n``````markdown\n```\n``````\n\n-   env.**markdownFence**\n``````markdown\n`````\n``````\n\n-   env.**promptOptions**\n```js\n{  }\n```\n\n-   env.**vars**\n```js\n{  }\n```\n\n-   env.**templates**\n```js\n[ { id: \"addboard\",\n  title: \"Add board\",\n  description: \"Updates a DeviceScript board.json generic file with informat\"... },\n{ id: \"gptool-meta\",\n  title: \"GPTool metadata generator\",\n  description: \"Generates metadata for GPTools\" },\n{ id: \"todo\",\n  title: \"TODOs\",\n  description: \"Try to implement TODOs found in source code.\" },\n{ id: \"firmware\",\n  title: \"firmware\",\n  description: undefined },\n{ id: \"code-optimizer\",\n  title: \"Code Optimizer\",\n  description: \"Optimize code to run faster, modified from https://twitter.c\"... },\n{ id: \"code-xray\",\n  title: \"Code XRay\",\n  description: \"Given a source file in a programming language, extract the s\"... },\n{ id: \"slides\",\n  title: \"Generate Slides\",\n  description: \"Generate a slidedeck in markdown. Install extension 'vscode-\"... },\n{ id: \"core.default\",\n  title: \"Run gpspec directly\",\n  description: \"This is the default gptool that assumes the gpspec contains \"... },\n{ id: \"front-matter\",\n  title: \"SEO front matter\",\n  description: \"Update or generate SEO-optimized front matter for a markdown\"... },\n{ id: \"peer-review\",\n  title: \"peer review\",\n  description: \"An expert academic is reviewing your submission.\" } ]\n```\n\n-   env.**template**\n```js\n{ id: \"gptool-meta\",\ntitle: \"GPTool metadata generator\",\ntext: \"<nothing yet>\",\njsSource: \"gptool({\\n    title: 'GPTool metadata generator',\\n    descrip\"...,\nfilename: \"/workspaces/coarch/packages/devicescript/gptools/gptool-meta\"...,\ndescription: \"Generates metadata for GPTools\",\ninput: \".md\" }\n```\n\n\n\n</details>\n\n\n<details id=\"system-gptools\"><summary>system gptools</summary>\n\n###  `system` source\n\n```js\nsystem({ title: \"System prompt\" })\n$`You are concise. Answer in markdown.`\n```\n#### expanded\n``````markdown\nYou are concise. Answer in markdown.\n``````\n###  `system.explanations` source\n\n```js\nsystem({ title: \"Explain your answers\" })\n$`When explaining answers, take a deep breath.`\n```\n#### expanded\n``````markdown\nWhen explaining answers, take a deep breath.\n``````\n###  `system.files` source\n\n```js\nsystem({\n    title: \"File generation\",\n    description: \"Teaches the file format supported by GPTools\",\n})\n\nconst folder =\n    env.vars[\"outputFolder\"] || env.template.outputFolder\n$`When generating or updating files you will use the following syntax:`\n\ndef(\n    `File ${folder || \".\"}/file1.ts`,\n    `What goes in\\n${folder || \".\"}/file1.ts.`,\n    \"typescript\"\n)\ndef(\n    `File ${folder || \".\"}/file1.py`,\n    `What goes in\\n${folder || \".\"}/file1.py.`,\n    \"python\"\n)\ndef(\n    `File /path_to_file/file2.md`,\n    `What goes in\\n/path_to_file/file2.md.`,\n    \"markdown\"\n)\n\n$`Make sure to use precisely ${env.fence} to guard file code sections.`\n$`Make sure to use precisely ${env.markdownFence} to guard file markdown sections.`\n$`Use full path of filename in code section header.`\nif (folder) $`When generating new files, place files in folder \"${folder}\".`\n$`If a file does not have changes, do not regenerate.`\n```\n#### expanded\n``````markdown\nWhen generating or updating files you will use the following syntax:\n\nFile ./file1.ts:\n```\nWhat goes in\n./file1.ts.\n```\n\nFile ./file1.py:\n```\nWhat goes in\n./file1.py.\n```\n\nFile /path_to_file/file2.md:\n```\nWhat goes in\n/path_to_file/file2.md.\n```\n\nMake sure to use precisely ``` to guard file code sections.\n\nMake sure to use precisely ````` to guard file markdown sections.\n\nUse full path of filename in code section header.\n\nIf a file does not have changes, do not regenerate.\n``````\n###  `system.summary` source\n\n```js\nsystem({\n    title: \"Summarize\",\n    description: \"Generate a summary of the changes\",\n})\n\n$`Additionally, generate a concise SUMMARY of the changes in all files using the following syntax:`\n\ndef(`SUMMARY`, `This is a summary of the changes in files.`)\n```\n#### expanded\n``````markdown\nAdditionally, generate a concise SUMMARY of the changes in all files using the following syntax:\n\nSUMMARY:\n```\nThis is a summary of the changes in files.\n```\n``````\n\n\n</details>\n\n\n<details id=\"gptool-source\"><summary>gptool source</summary>\n\n\n```js\ngptool({\n    title: 'GPTool metadata generator',\n    description: 'Generates metadata for GPTools',\n})\n\ndef(\"SCRIPTS\", env.links)\n\n$`You are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript. SCRIPTS files is a list of gptool files.\n\nGenerate a 'title' and 'description' for each SCRIPTS files.\n`\n$`### GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n\\`\\`\\`\n$\\`This text is sent to the final prompt.\\`\n\\`\\`\\`\n\n-   'def' defines a variable that can be used in the template string literal.\n\n\\`\\`\\`\ndef(\"FILE\", env.file)\n\\`\\`\\`\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n\n`\n```\n\n\n</details>\n\n\n<details id=\"expanded-prompt\"><summary>expanded prompt</summary>\n\n-  model: `gpt-4`\n-  temperature: 0.2\n-  max tokens: 800\n\n``````markdown\nSCRIPTS:\n``` file=gptools/addboard.gptool.js\ngptool({\n    title: \"Add board\",\n    description: \"Updates a DeviceScript board.json generic file with information from the vendor website.\",\n    categories: [\"devicescript\"],\n    model: \"gpt-4-32k\",\n    maxTokens: 20000,\n    temperature: 0\n})\n\nconst schema = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json`)\ndef(\"SCHEMA\", schema.file)\nconst guide = await fetchText(`https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/add-board.mdx`)\ndef(\"GUIDE\", guide.file)\ndef(\"FILE\", env.file)\n//def(\"BOARDJSON\", env.links.filter(f => f.filename.endsWith(\".board.json\")))\n\n$`You are an expert at configuration new boards for the DeviceScript system. \nYou follow the GUIDE for instructions.\n\nThe features of the board are listed in the Features section of FILE.\nThe pinout of the board is listed in the Pinout section of FILE. Ignore GND and 3V3 pins. If a pin is used in a service, do NOT list in the pins section.\nThe Jacdac services of the board are listed in the Services section of FILE.\n\nThe file name of BOARDJSON must end with \".board.json\".\n\nThe JSON schema of BOARDJSON is SCHEMA at https://raw.githubusercontent.com/microsoft/devicescript/main/website/docs/devices/boards.json.\n\nGenerate BOARDJSON according to the instructions above using the JSON schema SCHEMA. Add the $schema attribute.\n`\n```\n\nYou are an expert in GPTool scripts; a script language for creating LLM tools written in Javascript. SCRIPTS files is a list of gptool files.\n\nGenerate a 'title' and 'description' for each SCRIPTS files.\n\n### GPTool syntax\n\n-    '$' is a template string literal that emits text to the final prompt.\n\n```\n$`This text is sent to the final prompt.`\n```\n\n-   'def' defines a variable that can be used in the template string literal.\n\n```\ndef(\"FILE\", env.file)\n```\n\n-   'env' is an object that contains the following fields: file, links, templates, and snippets.\n``````\n\n\n</details>\n\n\n<details id=\"LLM-response\"><summary>LLM response</summary>\n\n\n``````markdown\nSUMMARY:\n```\nThe changes involve the creation of a GPTool script file named 'addboard.gptool.js'. This script is designed to update a DeviceScript board.json generic file with information from the vendor website. The script fetches the schema and guide from specified URLs, defines several variables, and generates a BOARDJSON file according to the instructions and JSON schema. The script also provides a brief explanation of GPTool syntax.\n```\n``````\n\n\n</details>\n\n\n<details id=\"code-regions\"><summary>code regions</summary>\n\n-   `SUMMARY`\n`````\nThe changes involve the creation of a GPTool script file named 'addboard.gptool.js'. This script is designed to update a DeviceScript board.json generic file with information from the vendor website. The script fetches the schema and guide from specified URLs, defines several variables, and generates a BOARDJSON file according to the instructions and JSON schema. The script also provides a brief explanation of GPTool syntax.\n\n`````\n\n\n</details>\n","text":"SUMMARY:\n```\nThe changes involve the creation of a GPTool script file named 'addboard.gptool.js'. This script is designed to update a DeviceScript board.json generic file with information from the vendor website. The script fetches the schema and guide from specified URLs, defines several variables, and generates a BOARDJSON file according to the instructions and JSON schema. The script also provides a brief explanation of GPTool syntax.\n```","summary":"The changes involve the creation of a GPTool script file named 'addboard.gptool.js'. This script is designed to update a DeviceScript board.json generic file with information from the vendor website. The script fetches the schema and guide from specified URLs, defines several variables, and generates a BOARDJSON file according to the instructions and JSON schema. The script also provides a brief explanation of GPTool syntax.\n"}}}
